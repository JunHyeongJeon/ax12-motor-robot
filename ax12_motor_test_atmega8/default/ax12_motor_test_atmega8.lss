
ax12_motor_test_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000139a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  0000139a  0000142e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00800208  00800208  000015d6  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00002412  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000330  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002026  00000000  00000000  00002902  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010a1  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f00  00000000  00000000  000059c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c0  00000000  00000000  000078cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000609  00000000  00000000  00007b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001353  00000000  00000000  00008195  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000004bc  00000000  00000000  000094e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000090  00000000  00000000  000099a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	68 c3       	rjmp	.+1744   	; 0x6e8 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	bb c3       	rjmp	.+1910   	; 0x792 <__vector_13>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	12 e0       	ldi	r17, 0x02	; 2
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ea e9       	ldi	r30, 0x9A	; 154
      3a:	f3 e1       	ldi	r31, 0x13	; 19
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a8 30       	cpi	r26, 0x08	; 8
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	12 e0       	ldi	r17, 0x02	; 2
      4a:	a8 e0       	ldi	r26, 0x08	; 8
      4c:	b2 e0       	ldi	r27, 0x02	; 2
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ab 34       	cpi	r26, 0x4B	; 75
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	d8 d1       	rcall	.+944    	; 0x40a <main>
      5a:	9d c9       	rjmp	.-3270   	; 0xfffff396 <__eeprom_end+0xff7ef396>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <dgree_to_hex>:
#define punch_l 0x30
#define punch_h 0x31

void dgree_to_hex(int dg)
{
  dg = (int)(dg * 3.41);
      5e:	9c 01       	movw	r18, r24
      60:	b9 01       	movw	r22, r18
      62:	88 27       	eor	r24, r24
      64:	77 fd       	sbrc	r23, 7
      66:	80 95       	com	r24
      68:	98 2f       	mov	r25, r24
      6a:	92 d4       	rcall	.+2340   	; 0x990 <__floatsisf>
      6c:	21 e7       	ldi	r18, 0x71	; 113
      6e:	3d e3       	ldi	r19, 0x3D	; 61
      70:	4a e5       	ldi	r20, 0x5A	; 90
      72:	50 e4       	ldi	r21, 0x40	; 64
      74:	98 d3       	rcall	.+1840   	; 0x7a6 <__mulsf3>
      76:	e8 d4       	rcall	.+2512   	; 0xa48 <__fixsfsi>
    
  ang1 = dg>>8;
      78:	87 2f       	mov	r24, r23
      7a:	99 27       	eor	r25, r25
      7c:	87 fd       	sbrc	r24, 7
      7e:	9a 95       	dec	r25
      80:	90 93 0c 02 	sts	0x020C, r25
      84:	80 93 0b 02 	sts	0x020B, r24
  ang2 = dg & 0x0ff;
      88:	70 70       	andi	r23, 0x00	; 0
      8a:	70 93 0e 02 	sts	0x020E, r23
      8e:	60 93 0d 02 	sts	0x020D, r22
}
      92:	08 95       	ret

00000094 <put_data>:


void put_data(unsigned char id_num, unsigned char data_type, unsigned char data)
{
      94:	ef 92       	push	r14
      96:	ff 92       	push	r15
      98:	0f 93       	push	r16
      9a:	1f 93       	push	r17
      9c:	df 93       	push	r29
      9e:	cf 93       	push	r28
      a0:	cd b7       	in	r28, 0x3d	; 61
      a2:	de b7       	in	r29, 0x3e	; 62
      a4:	28 97       	sbiw	r28, 0x08	; 8
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	f8 94       	cli
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	0f be       	out	0x3f, r0	; 63
      ae:	cd bf       	out	0x3d, r28	; 61
	int i;
	char put[8];
	put[0] = 0xff;
      b0:	9f ef       	ldi	r25, 0xFF	; 255
      b2:	99 83       	std	Y+1, r25	; 0x01
	put[1] = 0xff;
      b4:	9a 83       	std	Y+2, r25	; 0x02
	put[2] = id_num;   //id
      b6:	8b 83       	std	Y+3, r24	; 0x03
	put[3] = 0x04;     //length
      b8:	84 e0       	ldi	r24, 0x04	; 4
      ba:	8c 83       	std	Y+4, r24	; 0x04
	put[4] = 0x03;     //write data
      bc:	83 e0       	ldi	r24, 0x03	; 3
      be:	8d 83       	std	Y+5, r24	; 0x05
	put[5] = data_type;     //data_type
      c0:	6e 83       	std	Y+6, r22	; 0x06
	put[6] = data;
      c2:	4f 83       	std	Y+7, r20	; 0x07
	put[7] = 0x00;
      c4:	18 86       	std	Y+8, r1	; 0x08
      c6:	fe 01       	movw	r30, r28
      c8:	33 96       	adiw	r30, 0x03	; 3
  ang1 = dg>>8;
  ang2 = dg & 0x0ff;
}


void put_data(unsigned char id_num, unsigned char data_type, unsigned char data)
      ca:	ce 01       	movw	r24, r28
      cc:	08 96       	adiw	r24, 0x08	; 8
	put[6] = data;
	put[7] = 0x00;

	for( i = 2; i<7; i++)
	{
		put[7] += put[i];
      ce:	21 91       	ld	r18, Z+
      d0:	38 85       	ldd	r19, Y+8	; 0x08
      d2:	23 0f       	add	r18, r19
      d4:	28 87       	std	Y+8, r18	; 0x08
	put[4] = 0x03;     //write data
	put[5] = data_type;     //data_type
	put[6] = data;
	put[7] = 0x00;

	for( i = 2; i<7; i++)
      d6:	e8 17       	cp	r30, r24
      d8:	f9 07       	cpc	r31, r25
      da:	c9 f7       	brne	.-14     	; 0xce <put_data+0x3a>
	{
		put[7] += put[i];
	}
	put[7] = ~put[7];
      dc:	20 95       	com	r18
      de:	28 87       	std	Y+8, r18	; 0x08

	CON_PORT = SEND;
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	82 bb       	out	0x12, r24	; 18
      e4:	8e 01       	movw	r16, r28
      e6:	0f 5f       	subi	r16, 0xFF	; 255
      e8:	1f 4f       	sbci	r17, 0xFF	; 255
  ang1 = dg>>8;
  ang2 = dg & 0x0ff;
}


void put_data(unsigned char id_num, unsigned char data_type, unsigned char data)
      ea:	28 e0       	ldi	r18, 0x08	; 8
      ec:	e2 2e       	mov	r14, r18
      ee:	f1 2c       	mov	r15, r1
      f0:	e0 0e       	add	r14, r16
      f2:	f1 1e       	adc	r15, r17

	CON_PORT = SEND;

	for(i=0;i<8;i++)
	{
		USART_Transmit(put[i]);
      f4:	f8 01       	movw	r30, r16
      f6:	81 91       	ld	r24, Z+
      f8:	8f 01       	movw	r16, r30
      fa:	89 d1       	rcall	.+786    	; 0x40e <USART_Transmit>
	}
	put[7] = ~put[7];

	CON_PORT = SEND;

	for(i=0;i<8;i++)
      fc:	0e 15       	cp	r16, r14
      fe:	1f 05       	cpc	r17, r15
     100:	c9 f7       	brne	.-14     	; 0xf4 <put_data+0x60>
	{
		USART_Transmit(put[i]);
	}
}
     102:	28 96       	adiw	r28, 0x08	; 8
     104:	0f b6       	in	r0, 0x3f	; 63
     106:	f8 94       	cli
     108:	de bf       	out	0x3e, r29	; 62
     10a:	0f be       	out	0x3f, r0	; 63
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	1f 91       	pop	r17
     114:	0f 91       	pop	r16
     116:	ff 90       	pop	r15
     118:	ef 90       	pop	r14
     11a:	08 95       	ret

0000011c <get_data>:

void get_data(unsigned char id_num, unsigned char data_type, unsigned char data, char *get)
{
     11c:	cf 92       	push	r12
     11e:	df 92       	push	r13
     120:	ef 92       	push	r14
     122:	ff 92       	push	r15
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	df 93       	push	r29
     12a:	cf 93       	push	r28
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	28 97       	sbiw	r28, 0x08	; 8
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
     13c:	79 01       	movw	r14, r18
	int i;
	char put[8];

	put[0] = 0xff;
     13e:	9f ef       	ldi	r25, 0xFF	; 255
     140:	99 83       	std	Y+1, r25	; 0x01
	put[1] = 0xff;
     142:	9a 83       	std	Y+2, r25	; 0x02
	put[2] = id_num;   //id
     144:	8b 83       	std	Y+3, r24	; 0x03
	put[3] = 0x04;     //length
     146:	84 e0       	ldi	r24, 0x04	; 4
     148:	8c 83       	std	Y+4, r24	; 0x04
	put[4] = 0x02;     //read data
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	8d 83       	std	Y+5, r24	; 0x05
	put[5] = data_type;     //data_type
     14e:	6e 83       	std	Y+6, r22	; 0x06
	put[6] = data;
     150:	4f 83       	std	Y+7, r20	; 0x07
	put[7] = 0x00;
     152:	18 86       	std	Y+8, r1	; 0x08
     154:	fe 01       	movw	r30, r28
     156:	33 96       	adiw	r30, 0x03	; 3
	{
		USART_Transmit(put[i]);
	}
}

void get_data(unsigned char id_num, unsigned char data_type, unsigned char data, char *get)
     158:	ce 01       	movw	r24, r28
     15a:	08 96       	adiw	r24, 0x08	; 8
	put[6] = data;
	put[7] = 0x00;

	for( i = 2; i<7; i++)
	{
		put[7] += put[i];
     15c:	21 91       	ld	r18, Z+
     15e:	38 85       	ldd	r19, Y+8	; 0x08
     160:	23 0f       	add	r18, r19
     162:	28 87       	std	Y+8, r18	; 0x08
	put[4] = 0x02;     //read data
	put[5] = data_type;     //data_type
	put[6] = data;
	put[7] = 0x00;

	for( i = 2; i<7; i++)
     164:	e8 17       	cp	r30, r24
     166:	f9 07       	cpc	r31, r25
     168:	c9 f7       	brne	.-14     	; 0x15c <get_data+0x40>
	{
		put[7] += put[i];
	}
	put[7] = ~put[7];
     16a:	20 95       	com	r18
     16c:	28 87       	std	Y+8, r18	; 0x08

	CON_PORT = SEND;
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	82 bb       	out	0x12, r24	; 18
     172:	8e 01       	movw	r16, r28
     174:	0f 5f       	subi	r16, 0xFF	; 255
     176:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		USART_Transmit(put[i]);
	}
}

void get_data(unsigned char id_num, unsigned char data_type, unsigned char data, char *get)
     178:	38 e0       	ldi	r19, 0x08	; 8
     17a:	c3 2e       	mov	r12, r19
     17c:	d1 2c       	mov	r13, r1
     17e:	c0 0e       	add	r12, r16
     180:	d1 1e       	adc	r13, r17

	CON_PORT = SEND;

	for(i=0;i<8;i++)
	{
		USART_Transmit(put[i]);
     182:	f8 01       	movw	r30, r16
     184:	81 91       	ld	r24, Z+
     186:	8f 01       	movw	r16, r30
     188:	42 d1       	rcall	.+644    	; 0x40e <USART_Transmit>
	}
	put[7] = ~put[7];

	CON_PORT = SEND;

	for(i=0;i<8;i++)
     18a:	0c 15       	cp	r16, r12
     18c:	1d 05       	cpc	r17, r13
     18e:	c9 f7       	brne	.-14     	; 0x182 <get_data+0x66>
	{
		USART_Transmit(put[i]);
	}

	CON_PORT = GET;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	82 bb       	out	0x12, r24	; 18

	for(i=0; i<8; i++)
     194:	00 e0       	ldi	r16, 0x00	; 0
     196:	10 e0       	ldi	r17, 0x00	; 0
	{
		*get = USART_Receive();
     198:	86 d1       	rcall	.+780    	; 0x4a6 <USART_Receive>
     19a:	f7 01       	movw	r30, r14
     19c:	81 93       	st	Z+, r24
     19e:	7f 01       	movw	r14, r30
		USART_Transmit(put[i]);
	}

	CON_PORT = GET;

	for(i=0; i<8; i++)
     1a0:	0f 5f       	subi	r16, 0xFF	; 255
     1a2:	1f 4f       	sbci	r17, 0xFF	; 255
     1a4:	08 30       	cpi	r16, 0x08	; 8
     1a6:	11 05       	cpc	r17, r1
     1a8:	b9 f7       	brne	.-18     	; 0x198 <get_data+0x7c>
	{
		*get = USART_Receive();
		get++;
	}

}
     1aa:	28 96       	adiw	r28, 0x08	; 8
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	f8 94       	cli
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	0f be       	out	0x3f, r0	; 63
     1b4:	cd bf       	out	0x3d, r28	; 61
     1b6:	cf 91       	pop	r28
     1b8:	df 91       	pop	r29
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	df 90       	pop	r13
     1c4:	cf 90       	pop	r12
     1c6:	08 95       	ret

000001c8 <act_dynamixel>:

void act_dynamixel(char mot_id, int ang)
{
     1c8:	ef 92       	push	r14
     1ca:	ff 92       	push	r15
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	df 93       	push	r29
     1d2:	cf 93       	push	r28
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	2b 97       	sbiw	r28, 0x0b	; 11
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	08 2f       	mov	r16, r24
	int i;
	char act[11];
	dgree_to_hex(ang);
     1e6:	cb 01       	movw	r24, r22
     1e8:	3a df       	rcall	.-396    	; 0x5e <dgree_to_hex>
	act[0] = 0xff;
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	89 83       	std	Y+1, r24	; 0x01
	act[1] = 0xff;
     1ee:	8a 83       	std	Y+2, r24	; 0x02
	act[2] = mot_id;
     1f0:	0b 83       	std	Y+3, r16	; 0x03
	act[3] = 0x07;
     1f2:	87 e0       	ldi	r24, 0x07	; 7
     1f4:	8c 83       	std	Y+4, r24	; 0x04
	act[4] = 0x03;
     1f6:	83 e0       	ldi	r24, 0x03	; 3
     1f8:	8d 83       	std	Y+5, r24	; 0x05
	act[5] = goal_position_l;
     1fa:	8e e1       	ldi	r24, 0x1E	; 30
     1fc:	8e 83       	std	Y+6, r24	; 0x06
	act[6] = ang2;
     1fe:	80 91 0d 02 	lds	r24, 0x020D
     202:	8f 83       	std	Y+7, r24	; 0x07
	act[7] = ang1;
     204:	80 91 0b 02 	lds	r24, 0x020B
     208:	88 87       	std	Y+8, r24	; 0x08
	act[8] = 0x00;
     20a:	19 86       	std	Y+9, r1	; 0x09
	act[9] = 0x02;
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	8a 87       	std	Y+10, r24	; 0x0a
	act[10] = 0x00;
     210:	1b 86       	std	Y+11, r1	; 0x0b
     212:	fe 01       	movw	r30, r28
     214:	33 96       	adiw	r30, 0x03	; 3
		get++;
	}

}

void act_dynamixel(char mot_id, int ang)
     216:	ce 01       	movw	r24, r28
     218:	0b 96       	adiw	r24, 0x0b	; 11
	act[9] = 0x02;
	act[10] = 0x00;

	for( i = 2; i<10; i++)
	{
		act[10] += act[i];
     21a:	21 91       	ld	r18, Z+
     21c:	3b 85       	ldd	r19, Y+11	; 0x0b
     21e:	23 0f       	add	r18, r19
     220:	2b 87       	std	Y+11, r18	; 0x0b
	act[7] = ang1;
	act[8] = 0x00;
	act[9] = 0x02;
	act[10] = 0x00;

	for( i = 2; i<10; i++)
     222:	e8 17       	cp	r30, r24
     224:	f9 07       	cpc	r31, r25
     226:	c9 f7       	brne	.-14     	; 0x21a <act_dynamixel+0x52>
	{
		act[10] += act[i];
	}
	act[10] = ~act[10];
     228:	20 95       	com	r18
     22a:	2b 87       	std	Y+11, r18	; 0x0b
     22c:	8e 01       	movw	r16, r28
     22e:	0f 5f       	subi	r16, 0xFF	; 255
     230:	1f 4f       	sbci	r17, 0xFF	; 255
		get++;
	}

}

void act_dynamixel(char mot_id, int ang)
     232:	4b e0       	ldi	r20, 0x0B	; 11
     234:	e4 2e       	mov	r14, r20
     236:	f1 2c       	mov	r15, r1
     238:	e0 0e       	add	r14, r16
     23a:	f1 1e       	adc	r15, r17
	act[10] = ~act[10];


	for(i=0;i<11;i++)
	{
	 	USART_Transmit(act[i]);
     23c:	f8 01       	movw	r30, r16
     23e:	81 91       	ld	r24, Z+
     240:	8f 01       	movw	r16, r30
     242:	e5 d0       	rcall	.+458    	; 0x40e <USART_Transmit>
		act[10] += act[i];
	}
	act[10] = ~act[10];


	for(i=0;i<11;i++)
     244:	0e 15       	cp	r16, r14
     246:	1f 05       	cpc	r17, r15
     248:	c9 f7       	brne	.-14     	; 0x23c <act_dynamixel+0x74>
	{
	 	USART_Transmit(act[i]);
	}
}
     24a:	2b 96       	adiw	r28, 0x0b	; 11
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	cf 91       	pop	r28
     258:	df 91       	pop	r29
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	08 95       	ret

00000264 <reg_act>:

void reg_act(char mot_id, int ang)
{
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	2b 97       	sbiw	r28, 0x0b	; 11
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	08 2f       	mov	r16, r24
	int i;
	char act[11];
	dgree_to_hex(ang);
     282:	cb 01       	movw	r24, r22
     284:	ec de       	rcall	.-552    	; 0x5e <dgree_to_hex>
	act[0] = 0xff;
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	89 83       	std	Y+1, r24	; 0x01
	act[1] = 0xff;
     28a:	8a 83       	std	Y+2, r24	; 0x02
	act[2] = mot_id;
     28c:	0b 83       	std	Y+3, r16	; 0x03
	act[3] = 0x07;
     28e:	87 e0       	ldi	r24, 0x07	; 7
     290:	8c 83       	std	Y+4, r24	; 0x04
	act[4] = 0x04;
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	8d 83       	std	Y+5, r24	; 0x05
	act[5] = goal_position_l;
     296:	8e e1       	ldi	r24, 0x1E	; 30
     298:	8e 83       	std	Y+6, r24	; 0x06
	act[6] = ang2;
     29a:	80 91 0d 02 	lds	r24, 0x020D
     29e:	8f 83       	std	Y+7, r24	; 0x07
	act[7] = ang1;
     2a0:	80 91 0b 02 	lds	r24, 0x020B
     2a4:	88 87       	std	Y+8, r24	; 0x08
	act[8] = 0x60;
     2a6:	80 e6       	ldi	r24, 0x60	; 96
     2a8:	89 87       	std	Y+9, r24	; 0x09
	act[9] = 0x00;
     2aa:	1a 86       	std	Y+10, r1	; 0x0a
	act[10] = 0x00;
     2ac:	1b 86       	std	Y+11, r1	; 0x0b
     2ae:	fe 01       	movw	r30, r28
     2b0:	33 96       	adiw	r30, 0x03	; 3
	{
	 	USART_Transmit(act[i]);
	}
}

void reg_act(char mot_id, int ang)
     2b2:	ce 01       	movw	r24, r28
     2b4:	0b 96       	adiw	r24, 0x0b	; 11
	act[9] = 0x00;
	act[10] = 0x00;

	for( i = 2; i<10; i++)
	{
		act[10] += act[i];
     2b6:	21 91       	ld	r18, Z+
     2b8:	3b 85       	ldd	r19, Y+11	; 0x0b
     2ba:	23 0f       	add	r18, r19
     2bc:	2b 87       	std	Y+11, r18	; 0x0b
	act[7] = ang1;
	act[8] = 0x60;
	act[9] = 0x00;
	act[10] = 0x00;

	for( i = 2; i<10; i++)
     2be:	e8 17       	cp	r30, r24
     2c0:	f9 07       	cpc	r31, r25
     2c2:	c9 f7       	brne	.-14     	; 0x2b6 <reg_act+0x52>
	{
		act[10] += act[i];
	}
	act[10] = ~act[10];
     2c4:	20 95       	com	r18
     2c6:	2b 87       	std	Y+11, r18	; 0x0b
     2c8:	8e 01       	movw	r16, r28
     2ca:	0f 5f       	subi	r16, 0xFF	; 255
     2cc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
	 	USART_Transmit(act[i]);
	}
}

void reg_act(char mot_id, int ang)
     2ce:	5b e0       	ldi	r21, 0x0B	; 11
     2d0:	e5 2e       	mov	r14, r21
     2d2:	f1 2c       	mov	r15, r1
     2d4:	e0 0e       	add	r14, r16
     2d6:	f1 1e       	adc	r15, r17
	act[10] = ~act[10];


	for(i=0;i<11;i++)
	{
		USART_Transmit(act[i]);
     2d8:	f8 01       	movw	r30, r16
     2da:	81 91       	ld	r24, Z+
     2dc:	8f 01       	movw	r16, r30
     2de:	97 d0       	rcall	.+302    	; 0x40e <USART_Transmit>
		act[10] += act[i];
	}
	act[10] = ~act[10];


	for(i=0;i<11;i++)
     2e0:	0e 15       	cp	r16, r14
     2e2:	1f 05       	cpc	r17, r15
     2e4:	c9 f7       	brne	.-14     	; 0x2d8 <reg_act+0x74>
	{
		USART_Transmit(act[i]);
	}
}
     2e6:	2b 96       	adiw	r28, 0x0b	; 11
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	cf 91       	pop	r28
     2f4:	df 91       	pop	r29
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	ff 90       	pop	r15
     2fc:	ef 90       	pop	r14
     2fe:	08 95       	ret

00000300 <action>:

void action()
{
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	df 93       	push	r29
     30a:	cf 93       	push	r28
     30c:	00 d0       	rcall	.+0      	; 0x30e <action+0xe>
     30e:	00 d0       	rcall	.+0      	; 0x310 <action+0x10>
     310:	00 d0       	rcall	.+0      	; 0x312 <action+0x12>
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
	int i;
	char act[6];
	act[0] = 0xff;
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	89 83       	std	Y+1, r24	; 0x01
	act[1] = 0xff;
     31a:	8a 83       	std	Y+2, r24	; 0x02
	act[2] = 0xfe;
     31c:	8e ef       	ldi	r24, 0xFE	; 254
     31e:	8b 83       	std	Y+3, r24	; 0x03
	act[3] = 0x02;
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	8c 83       	std	Y+4, r24	; 0x04
	act[4] = 0x05;
     324:	85 e0       	ldi	r24, 0x05	; 5
     326:	8d 83       	std	Y+5, r24	; 0x05

	for( i = 2; i<5; i++)
	{
		act[5] += act[i];
	}
	act[5] = ~act[5];
     328:	8a ef       	ldi	r24, 0xFA	; 250
     32a:	8e 83       	std	Y+6, r24	; 0x06
     32c:	8e 01       	movw	r16, r28
     32e:	0f 5f       	subi	r16, 0xFF	; 255
     330:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		USART_Transmit(act[i]);
	}
}

void action()
     332:	67 e0       	ldi	r22, 0x07	; 7
     334:	e6 2e       	mov	r14, r22
     336:	f1 2c       	mov	r15, r1
     338:	ec 0e       	add	r14, r28
     33a:	fd 1e       	adc	r15, r29
	}
	act[5] = ~act[5];

	for(i=0;i<6;i++)
	{
		USART_Transmit(act[i]);
     33c:	f8 01       	movw	r30, r16
     33e:	81 91       	ld	r24, Z+
     340:	8f 01       	movw	r16, r30
     342:	65 d0       	rcall	.+202    	; 0x40e <USART_Transmit>
	{
		act[5] += act[i];
	}
	act[5] = ~act[5];

	for(i=0;i<6;i++)
     344:	0e 15       	cp	r16, r14
     346:	1f 05       	cpc	r17, r15
     348:	c9 f7       	brne	.-14     	; 0x33c <action+0x3c>
	{
		USART_Transmit(act[i]);
	}
} 
     34a:	26 96       	adiw	r28, 0x06	; 6
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	08 95       	ret

00000364 <ang>:

void ang()
{
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	df 93       	push	r29
     36e:	cf 93       	push	r28
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	29 97       	sbiw	r28, 0x09	; 9
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	f8 94       	cli
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	cd bf       	out	0x3d, r28	; 61
	int i;
	char act[9];

	act[0] = 0xff;
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	89 83       	std	Y+1, r24	; 0x01
	act[1] = 0xff;
     384:	8a 83       	std	Y+2, r24	; 0x02
	act[2] = 0xfe;
     386:	8e ef       	ldi	r24, 0xFE	; 254
     388:	8b 83       	std	Y+3, r24	; 0x03
	act[3] = 0x05;
     38a:	85 e0       	ldi	r24, 0x05	; 5
     38c:	8c 83       	std	Y+4, r24	; 0x04
	act[4] = 0x03;
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	8d 83       	std	Y+5, r24	; 0x05
	act[5] = cw_angle_limit_l;
     392:	86 e0       	ldi	r24, 0x06	; 6
     394:	8e 83       	std	Y+6, r24	; 0x06
	act[6] = 0x00;
     396:	1f 82       	std	Y+7, r1	; 0x07
	act[7] = 0x00;
     398:	18 86       	std	Y+8, r1	; 0x08
	act[8] = 0x00;
     39a:	19 86       	std	Y+9, r1	; 0x09
     39c:	fe 01       	movw	r30, r28
     39e:	33 96       	adiw	r30, 0x03	; 3
	{
		USART_Transmit(act[i]);
	}
} 

void ang()
     3a0:	ce 01       	movw	r24, r28
     3a2:	09 96       	adiw	r24, 0x09	; 9
	act[7] = 0x00;
	act[8] = 0x00;

	for( i = 2; i<8; i++)
	{
		act[8] += act[i];
     3a4:	21 91       	ld	r18, Z+
     3a6:	39 85       	ldd	r19, Y+9	; 0x09
     3a8:	23 0f       	add	r18, r19
     3aa:	29 87       	std	Y+9, r18	; 0x09
	act[5] = cw_angle_limit_l;
	act[6] = 0x00;
	act[7] = 0x00;
	act[8] = 0x00;

	for( i = 2; i<8; i++)
     3ac:	e8 17       	cp	r30, r24
     3ae:	f9 07       	cpc	r31, r25
     3b0:	c9 f7       	brne	.-14     	; 0x3a4 <ang+0x40>
	{
		act[8] += act[i];
	}
	act[8] = ~act[8];
     3b2:	20 95       	com	r18
     3b4:	29 87       	std	Y+9, r18	; 0x09
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5f       	subi	r16, 0xFF	; 255
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		USART_Transmit(act[i]);
	}
} 

void ang()
     3bc:	79 e0       	ldi	r23, 0x09	; 9
     3be:	e7 2e       	mov	r14, r23
     3c0:	f1 2c       	mov	r15, r1
     3c2:	e0 0e       	add	r14, r16
     3c4:	f1 1e       	adc	r15, r17
	}
	act[8] = ~act[8];

	for(i=0;i<9;i++)
	{
		USART_Transmit(act[i]);
     3c6:	f8 01       	movw	r30, r16
     3c8:	81 91       	ld	r24, Z+
     3ca:	8f 01       	movw	r16, r30
     3cc:	20 d0       	rcall	.+64     	; 0x40e <USART_Transmit>
	{
		act[8] += act[i];
	}
	act[8] = ~act[8];

	for(i=0;i<9;i++)
     3ce:	0e 15       	cp	r16, r14
     3d0:	1f 05       	cpc	r17, r15
     3d2:	c9 f7       	brne	.-14     	; 0x3c6 <ang+0x62>
	{
		act[8] += act[i];
	}
	act[8] = ~act[8];

}
     3d4:	29 96       	adiw	r28, 0x09	; 9
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	cf 91       	pop	r28
     3e2:	df 91       	pop	r29
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	08 95       	ret

000003ee <setup>:
#include "test.h"

void setup()
{
	
	GPIO_init();
     3ee:	78 d1       	rcall	.+752    	; 0x6e0 <GPIO_init>
	USART_Init();
     3f0:	5e d0       	rcall	.+188    	; 0x4ae <USART_Init>
	
	SYSTEM_Log("START");
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <setup+0x6>
     3f4:	80 e6       	ldi	r24, 0x60	; 96
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	ed b7       	in	r30, 0x3d	; 61
     3fa:	fe b7       	in	r31, 0x3e	; 62
     3fc:	92 83       	std	Z+2, r25	; 0x02
     3fe:	81 83       	std	Z+1, r24	; 0x01
     400:	62 d0       	rcall	.+196    	; 0x4c6 <SYSTEM_Log>
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
}
     406:	08 95       	ret

00000408 <loop>:
void loop()
{
//	_delay_ms(16000); // 1s, this is complier error.

}
     408:	08 95       	ret

0000040a <main>:



int main(){

	setup();
     40a:	f1 df       	rcall	.-30     	; 0x3ee <setup>
     40c:	ff cf       	rjmp	.-2      	; 0x40c <main+0x2>

0000040e <USART_Transmit>:
#include "usart.h"

void USART_Transmit(volatile unsigned char data_)
{
     40e:	df 93       	push	r29
     410:	cf 93       	push	r28
     412:	0f 92       	push	r0
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	89 83       	std	Y+1, r24	; 0x01
	while((UCSRA&0x20)==0); 
     41a:	5d 9b       	sbis	0x0b, 5	; 11
     41c:	fe cf       	rjmp	.-4      	; 0x41a <USART_Transmit+0xc>
	UDR = (data_); 
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	8c b9       	out	0x0c, r24	; 12
}
     422:	0f 90       	pop	r0
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	08 95       	ret

0000042a <USART_Print>:

int USART_Print(char * pFormat, ...)
{
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	df 93       	push	r29
     432:	cf 93       	push	r28
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	c1 58       	subi	r28, 0x81	; 129
     43a:	d0 40       	sbci	r29, 0x00	; 0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	fe 01       	movw	r30, r28
     448:	e7 57       	subi	r30, 0x77	; 119
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	61 91       	ld	r22, Z+
     44e:	71 91       	ld	r23, Z+
    int nRst;
    char aBuff[128] = {0, }, * p;
     450:	8e 01       	movw	r16, r28
     452:	0f 5f       	subi	r16, 0xFF	; 255
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	80 e8       	ldi	r24, 0x80	; 128
     458:	d8 01       	movw	r26, r16
     45a:	1d 92       	st	X+, r1
     45c:	8a 95       	dec	r24
     45e:	e9 f7       	brne	.-6      	; 0x45a <USART_Print+0x30>
    va_list ap;
    va_start(ap, pFormat);
    nRst = vsprintf(aBuff, pFormat, ap);
     460:	c8 01       	movw	r24, r16
     462:	af 01       	movw	r20, r30
     464:	07 d5       	rcall	.+2574   	; 0xe74 <vsprintf>
     466:	f8 2e       	mov	r15, r24
    va_end(ap);
    for(p = aBuff; *p != '\0'; p++)
     468:	0b c0       	rjmp	.+22     	; 0x480 <__stack+0x21>
    USART_Transmit(*p);
     46a:	cf 57       	subi	r28, 0x7F	; 127
     46c:	df 4f       	sbci	r29, 0xFF	; 255
     46e:	98 83       	st	Y, r25
     470:	c1 58       	subi	r28, 0x81	; 129
     472:	d0 40       	sbci	r29, 0x00	; 0
     474:	cc df       	rcall	.-104    	; 0x40e <USART_Transmit>
     476:	cf 57       	subi	r28, 0x7F	; 127
     478:	df 4f       	sbci	r29, 0xFF	; 255
     47a:	98 81       	ld	r25, Y
     47c:	c1 58       	subi	r28, 0x81	; 129
     47e:	d0 40       	sbci	r29, 0x00	; 0
    char aBuff[128] = {0, }, * p;
    va_list ap;
    va_start(ap, pFormat);
    nRst = vsprintf(aBuff, pFormat, ap);
    va_end(ap);
    for(p = aBuff; *p != '\0'; p++)
     480:	f8 01       	movw	r30, r16
     482:	81 91       	ld	r24, Z+
     484:	8f 01       	movw	r16, r30
     486:	88 23       	and	r24, r24
     488:	81 f7       	brne	.-32     	; 0x46a <__stack+0xb>
    USART_Transmit(*p);
    return nRst;
}
     48a:	8f 2d       	mov	r24, r15
     48c:	cf 57       	subi	r28, 0x7F	; 127
     48e:	df 4f       	sbci	r29, 0xFF	; 255
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	de bf       	out	0x3e, r29	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	cf 91       	pop	r28
     49c:	df 91       	pop	r29
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	08 95       	ret

000004a6 <USART_Receive>:


char USART_Receive(void)

{
	while(!(UCSRA&0x80));
     4a6:	5f 9b       	sbis	0x0b, 7	; 11
     4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <USART_Receive>
	return UDR;
     4aa:	8c b1       	in	r24, 0x0c	; 12
}
     4ac:	08 95       	ret

000004ae <USART_Init>:

void USART_Init()
{

    UCSRA = 0x00;
     4ae:	1b b8       	out	0x0b, r1	; 11
    UCSRB = 0xd8;
     4b0:	88 ed       	ldi	r24, 0xD8	; 216
     4b2:	8a b9       	out	0x0a, r24	; 10
    UCSRC = 0x06;
     4b4:	86 e0       	ldi	r24, 0x06	; 6
     4b6:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0;
     4b8:	10 bc       	out	0x20, r1	; 32
    UBRRL = 8;
     4ba:	88 e0       	ldi	r24, 0x08	; 8
     4bc:	89 b9       	out	0x09, r24	; 9
	SREG |= 0x80;
     4be:	8f b7       	in	r24, 0x3f	; 63
     4c0:	80 68       	ori	r24, 0x80	; 128
     4c2:	8f bf       	out	0x3f, r24	; 63

}
     4c4:	08 95       	ret

000004c6 <SYSTEM_Log>:
void SYSTEM_Log(char * pFormat, ...){
     4c6:	df 93       	push	r29
     4c8:	cf 93       	push	r28
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
	USART_Print(pFormat);
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <SYSTEM_Log+0xa>
     4d0:	8d 81       	ldd	r24, Y+5	; 0x05
     4d2:	9e 81       	ldd	r25, Y+6	; 0x06
     4d4:	ed b7       	in	r30, 0x3d	; 61
     4d6:	fe b7       	in	r31, 0x3e	; 62
     4d8:	92 83       	std	Z+2, r25	; 0x02
     4da:	81 83       	std	Z+1, r24	; 0x01
     4dc:	a6 df       	rcall	.-180    	; 0x42a <USART_Print>
	USART_Print("\r\n");
     4de:	86 e6       	ldi	r24, 0x66	; 102
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	ed b7       	in	r30, 0x3d	; 61
     4e4:	fe b7       	in	r31, 0x3e	; 62
     4e6:	92 83       	std	Z+2, r25	; 0x02
     4e8:	81 83       	std	Z+1, r24	; 0x01
     4ea:	9f df       	rcall	.-194    	; 0x42a <USART_Print>
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0

}
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <TxD>:
unsigned int Position[20];
volatile unsigned char data100=0, data10=0, data1=0;


void TxD(unsigned char MoterID ,unsigned char Length)
{
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	00 d0       	rcall	.+0      	; 0x500 <TxD+0xa>
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned char Counter; //For Counter
    volatile unsigned char CheckSum=2; //Used CheckSum >> ~(ID + Length + Parameters)
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	9a 83       	std	Y+2, r25	; 0x02

    Parameter[2]=MoterID;
     508:	80 93 6b 00 	sts	0x006B, r24
    Parameter[3]=Length;
     50c:	60 93 6c 00 	sts	0x006C, r22
    for(Counter=0; Counter < (Length+3); Counter++) 
     510:	19 82       	std	Y+1, r1	; 0x01
     512:	06 2f       	mov	r16, r22
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	0e 5f       	subi	r16, 0xFE	; 254
     518:	1f 4f       	sbci	r17, 0xFF	; 255
     51a:	11 c0       	rjmp	.+34     	; 0x53e <TxD+0x48>
    {
            USART_Transmit(Parameter[ Counter ]);
     51c:	e9 81       	ldd	r30, Y+1	; 0x01
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	e7 59       	subi	r30, 0x97	; 151
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	80 81       	ld	r24, Z
     526:	73 df       	rcall	.-282    	; 0x40e <USART_Transmit>
            CheckSum += Parameter[ Counter ];
     528:	9a 81       	ldd	r25, Y+2	; 0x02
     52a:	e9 81       	ldd	r30, Y+1	; 0x01
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	e7 59       	subi	r30, 0x97	; 151
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	80 81       	ld	r24, Z
     534:	89 0f       	add	r24, r25
     536:	8a 83       	std	Y+2, r24	; 0x02
    volatile unsigned char Counter; //For Counter
    volatile unsigned char CheckSum=2; //Used CheckSum >> ~(ID + Length + Parameters)

    Parameter[2]=MoterID;
    Parameter[3]=Length;
    for(Counter=0; Counter < (Length+3); Counter++) 
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	89 83       	std	Y+1, r24	; 0x01
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	08 17       	cp	r16, r24
     544:	19 07       	cpc	r17, r25
     546:	54 f7       	brge	.-44     	; 0x51c <TxD+0x26>
    {
            USART_Transmit(Parameter[ Counter ]);
            CheckSum += Parameter[ Counter ];
    }
    USART_Transmit(~(CheckSum));
     548:	8a 81       	ldd	r24, Y+2	; 0x02
     54a:	80 95       	com	r24
     54c:	60 df       	rcall	.-320    	; 0x40e <USART_Transmit>
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	cf 91       	pop	r28
     554:	df 91       	pop	r29
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	08 95       	ret

0000055c <MOTOR_Move>:

void MOTOR_Move(unsigned char MoterID ,unsigned int Position,unsigned int Speed)
{
     55c:	df 93       	push	r29
     55e:	cf 93       	push	r28
     560:	00 d0       	rcall	.+0      	; 0x562 <MOTOR_Move+0x6>
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned char Counter; //For Counter
    volatile unsigned char CheckSum=2; //Used CheckSum >> ~(ID + Length + Parameters)
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	9a 83       	std	Y+2, r25	; 0x02
    CheckSum=2;
     56a:	9a 83       	std	Y+2, r25	; 0x02
    Parameter[2]=MoterID;
     56c:	80 93 6b 00 	sts	0x006B, r24
    Parameter[3]=7;
     570:	87 e0       	ldi	r24, 0x07	; 7
     572:	80 93 6c 00 	sts	0x006C, r24
    Parameter[4]=INST_WRITE;
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	80 93 6d 00 	sts	0x006D, r24
    Parameter[5]=P_GOAL_POSITION_L ;
     57c:	8e e1       	ldi	r24, 0x1E	; 30
     57e:	80 93 6e 00 	sts	0x006E, r24
    Parameter[6]=Position & 0xff ;//Position_L
     582:	60 93 6f 00 	sts	0x006F, r22
    Parameter[7]=Position >> 8 ;//Position_H
     586:	70 93 70 00 	sts	0x0070, r23
   // Parameter[8]=Speed& 0xff ;//Position_L
 //   Parameter[9]=Speed >> 8 ;//Position_H
  	Parameter[8]=Speed ;//Speed_L
     58a:	40 93 71 00 	sts	0x0071, r20
 	Parameter[9]=Speed>> 8;//Speed_H
     58e:	50 93 72 00 	sts	0x0072, r21
    for(Counter=0; Counter < (10); Counter++) 
     592:	19 82       	std	Y+1, r1	; 0x01
     594:	11 c0       	rjmp	.+34     	; 0x5b8 <MOTOR_Move+0x5c>
    {
            USART_Transmit(Parameter[ Counter ]);
     596:	e9 81       	ldd	r30, Y+1	; 0x01
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	e7 59       	subi	r30, 0x97	; 151
     59c:	ff 4f       	sbci	r31, 0xFF	; 255
     59e:	80 81       	ld	r24, Z
     5a0:	36 df       	rcall	.-404    	; 0x40e <USART_Transmit>
 	           CheckSum += Parameter[ Counter ];
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	e9 81       	ldd	r30, Y+1	; 0x01
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	e7 59       	subi	r30, 0x97	; 151
     5aa:	ff 4f       	sbci	r31, 0xFF	; 255
     5ac:	80 81       	ld	r24, Z
     5ae:	89 0f       	add	r24, r25
     5b0:	8a 83       	std	Y+2, r24	; 0x02
    Parameter[7]=Position >> 8 ;//Position_H
   // Parameter[8]=Speed& 0xff ;//Position_L
 //   Parameter[9]=Speed >> 8 ;//Position_H
  	Parameter[8]=Speed ;//Speed_L
 	Parameter[9]=Speed>> 8;//Speed_H
    for(Counter=0; Counter < (10); Counter++) 
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	8a 30       	cpi	r24, 0x0A	; 10
     5bc:	60 f3       	brcs	.-40     	; 0x596 <MOTOR_Move+0x3a>
    {
            USART_Transmit(Parameter[ Counter ]);
 	           CheckSum += Parameter[ Counter ];
    }
    USART_Transmit(~(CheckSum));
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	80 95       	com	r24
     5c2:	25 df       	rcall	.-438    	; 0x40e <USART_Transmit>
}
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	cf 91       	pop	r28
     5ca:	df 91       	pop	r29
     5cc:	08 95       	ret

000005ce <Multi_Move0>:

void Multi_Move0(unsigned char N)
{
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	df 93       	push	r29
     5d4:	cf 93       	push	r28
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <Multi_Move0+0xa>
     5d8:	0f 92       	push	r0
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned char Counter; //For Counter
    volatile unsigned char CheckSum=2; //Used CheckSum >> ~(ID + Length + Parameters)
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	9a 83       	std	Y+2, r25	; 0x02
    volatile unsigned char i=0;
     5e2:	1b 82       	std	Y+3, r1	; 0x03
    CheckSum=2;
     5e4:	9a 83       	std	Y+2, r25	; 0x02
    Parameter[2]=0xfe;
     5e6:	9e ef       	ldi	r25, 0xFE	; 254
     5e8:	90 93 6b 00 	sts	0x006B, r25
    Parameter[3]=((4 + 1)*N + 4);// L>> datalength(move >>4) N >> nimber of moter
     5ec:	98 2f       	mov	r25, r24
     5ee:	99 0f       	add	r25, r25
     5f0:	99 0f       	add	r25, r25
     5f2:	98 0f       	add	r25, r24
     5f4:	9c 5f       	subi	r25, 0xFC	; 252
     5f6:	90 93 6c 00 	sts	0x006C, r25
    Parameter[4]=INST_SYNC_WRITE;
     5fa:	93 e8       	ldi	r25, 0x83	; 131
     5fc:	90 93 6d 00 	sts	0x006D, r25
    Parameter[5]=P_GOAL_POSITION_L ;
     600:	9e e1       	ldi	r25, 0x1E	; 30
     602:	90 93 6e 00 	sts	0x006E, r25
    Parameter[6]=4;//length
     606:	94 e0       	ldi	r25, 0x04	; 4
     608:	90 93 6f 00 	sts	0x006F, r25
    for(i=0;i<N ;i++) {
     60c:	1b 82       	std	Y+3, r1	; 0x03
        Parameter[i*5+7]=MoterID[i];
     60e:	95 e0       	ldi	r25, 0x05	; 5
        Parameter[i*5+8]=Position[i] & 0xff ;//Position_L
        Parameter[i*5+9]=Position[i] >> 8 ;//Position_H
        Parameter[i*5+10]=0xf0 ;//Speed_L
     610:	40 ef       	ldi	r20, 0xF0	; 240
        Parameter[i*5+11]=2;//Speed_H  6+(i*N)
     612:	32 e0       	ldi	r19, 0x02	; 2
    Parameter[2]=0xfe;
    Parameter[3]=((4 + 1)*N + 4);// L>> datalength(move >>4) N >> nimber of moter
    Parameter[4]=INST_SYNC_WRITE;
    Parameter[5]=P_GOAL_POSITION_L ;
    Parameter[6]=4;//length
    for(i=0;i<N ;i++) {
     614:	39 c0       	rjmp	.+114    	; 0x688 <Multi_Move0+0xba>
        Parameter[i*5+7]=MoterID[i];
     616:	eb 81       	ldd	r30, Y+3	; 0x03
     618:	e9 9f       	mul	r30, r25
     61a:	f0 01       	movw	r30, r0
     61c:	11 24       	eor	r1, r1
     61e:	ab 81       	ldd	r26, Y+3	; 0x03
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	a9 5c       	subi	r26, 0xC9	; 201
     624:	bd 4f       	sbci	r27, 0xFD	; 253
     626:	2c 91       	ld	r18, X
     628:	e0 59       	subi	r30, 0x90	; 144
     62a:	ff 4f       	sbci	r31, 0xFF	; 255
     62c:	20 83       	st	Z, r18
        Parameter[i*5+8]=Position[i] & 0xff ;//Position_L
     62e:	ab 81       	ldd	r26, Y+3	; 0x03
     630:	a9 9f       	mul	r26, r25
     632:	d0 01       	movw	r26, r0
     634:	11 24       	eor	r1, r1
     636:	eb 81       	ldd	r30, Y+3	; 0x03
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	e1 5f       	subi	r30, 0xF1	; 241
     640:	fd 4f       	sbci	r31, 0xFD	; 253
     642:	20 81       	ld	r18, Z
     644:	af 58       	subi	r26, 0x8F	; 143
     646:	bf 4f       	sbci	r27, 0xFF	; 255
     648:	2c 93       	st	X, r18
        Parameter[i*5+9]=Position[i] >> 8 ;//Position_H
     64a:	ab 81       	ldd	r26, Y+3	; 0x03
     64c:	a9 9f       	mul	r26, r25
     64e:	d0 01       	movw	r26, r0
     650:	11 24       	eor	r1, r1
     652:	eb 81       	ldd	r30, Y+3	; 0x03
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	ee 0f       	add	r30, r30
     658:	ff 1f       	adc	r31, r31
     65a:	e1 5f       	subi	r30, 0xF1	; 241
     65c:	fd 4f       	sbci	r31, 0xFD	; 253
     65e:	21 81       	ldd	r18, Z+1	; 0x01
     660:	ae 58       	subi	r26, 0x8E	; 142
     662:	bf 4f       	sbci	r27, 0xFF	; 255
     664:	2c 93       	st	X, r18
        Parameter[i*5+10]=0xf0 ;//Speed_L
     666:	eb 81       	ldd	r30, Y+3	; 0x03
     668:	e9 9f       	mul	r30, r25
     66a:	f0 01       	movw	r30, r0
     66c:	11 24       	eor	r1, r1
     66e:	ed 58       	subi	r30, 0x8D	; 141
     670:	ff 4f       	sbci	r31, 0xFF	; 255
     672:	40 83       	st	Z, r20
        Parameter[i*5+11]=2;//Speed_H  6+(i*N)
     674:	eb 81       	ldd	r30, Y+3	; 0x03
     676:	e9 9f       	mul	r30, r25
     678:	f0 01       	movw	r30, r0
     67a:	11 24       	eor	r1, r1
     67c:	ec 58       	subi	r30, 0x8C	; 140
     67e:	ff 4f       	sbci	r31, 0xFF	; 255
     680:	30 83       	st	Z, r19
    Parameter[2]=0xfe;
    Parameter[3]=((4 + 1)*N + 4);// L>> datalength(move >>4) N >> nimber of moter
    Parameter[4]=INST_SYNC_WRITE;
    Parameter[5]=P_GOAL_POSITION_L ;
    Parameter[6]=4;//length
    for(i=0;i<N ;i++) {
     682:	2b 81       	ldd	r18, Y+3	; 0x03
     684:	2f 5f       	subi	r18, 0xFF	; 255
     686:	2b 83       	std	Y+3, r18	; 0x03
     688:	2b 81       	ldd	r18, Y+3	; 0x03
     68a:	28 17       	cp	r18, r24
     68c:	20 f2       	brcs	.-120    	; 0x616 <Multi_Move0+0x48>
        Parameter[i*5+8]=Position[i] & 0xff ;//Position_L
        Parameter[i*5+9]=Position[i] >> 8 ;//Position_H
        Parameter[i*5+10]=0xf0 ;//Speed_L
        Parameter[i*5+11]=2;//Speed_H  6+(i*N)
    }
    for(Counter=0; Counter < 7+(5*N) ; Counter++) 
     68e:	19 82       	std	Y+1, r1	; 0x01
     690:	05 e0       	ldi	r16, 0x05	; 5
     692:	80 9f       	mul	r24, r16
     694:	80 01       	movw	r16, r0
     696:	11 24       	eor	r1, r1
     698:	0a 5f       	subi	r16, 0xFA	; 250
     69a:	1f 4f       	sbci	r17, 0xFF	; 255
     69c:	11 c0       	rjmp	.+34     	; 0x6c0 <Multi_Move0+0xf2>
    {
            USART_Transmit(Parameter[ Counter ]);
     69e:	e9 81       	ldd	r30, Y+1	; 0x01
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	e7 59       	subi	r30, 0x97	; 151
     6a4:	ff 4f       	sbci	r31, 0xFF	; 255
     6a6:	80 81       	ld	r24, Z
     6a8:	b2 de       	rcall	.-668    	; 0x40e <USART_Transmit>
            CheckSum += Parameter[ Counter ];
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	e9 81       	ldd	r30, Y+1	; 0x01
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	e7 59       	subi	r30, 0x97	; 151
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	80 81       	ld	r24, Z
     6b6:	89 0f       	add	r24, r25
     6b8:	8a 83       	std	Y+2, r24	; 0x02
        Parameter[i*5+8]=Position[i] & 0xff ;//Position_L
        Parameter[i*5+9]=Position[i] >> 8 ;//Position_H
        Parameter[i*5+10]=0xf0 ;//Speed_L
        Parameter[i*5+11]=2;//Speed_H  6+(i*N)
    }
    for(Counter=0; Counter < 7+(5*N) ; Counter++) 
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	89 83       	std	Y+1, r24	; 0x01
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	08 17       	cp	r16, r24
     6c6:	19 07       	cpc	r17, r25
     6c8:	54 f7       	brge	.-44     	; 0x69e <Multi_Move0+0xd0>
    {
            USART_Transmit(Parameter[ Counter ]);
            CheckSum += Parameter[ Counter ];
    }
    USART_Transmit(~(CheckSum));
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	80 95       	com	r24
     6ce:	9f de       	rcall	.-706    	; 0x40e <USART_Transmit>
}  
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	cf 91       	pop	r28
     6d8:	df 91       	pop	r29
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	08 95       	ret

000006e0 <GPIO_init>:
#include "gpio.h"
#include <avr/io.h>

void GPIO_init(){
	DDRC = (1<<DDC1); // set blue led output mode.
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	84 bb       	out	0x14, r24	; 20
	PORTC = (0<<PC1); // blue led on 
     6e4:	15 ba       	out	0x15, r1	; 21
}
     6e6:	08 95       	ret

000006e8 <__vector_11>:
#include "interrupt.h"
#include "usart.h"
#include "ax-12.h"

SIGNAL(SIG_UART_RECV){// usart receive interrupt
     6e8:	1f 92       	push	r1
     6ea:	0f 92       	push	r0
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	0f 92       	push	r0
     6f0:	11 24       	eor	r1, r1
     6f2:	2f 93       	push	r18
     6f4:	3f 93       	push	r19
     6f6:	4f 93       	push	r20
     6f8:	5f 93       	push	r21
     6fa:	6f 93       	push	r22
     6fc:	7f 93       	push	r23
     6fe:	8f 93       	push	r24
     700:	9f 93       	push	r25
     702:	af 93       	push	r26
     704:	bf 93       	push	r27
     706:	ef 93       	push	r30
     708:	ff 93       	push	r31

	PORTC = ~PORTC; // if usart data receive led is blink
     70a:	85 b3       	in	r24, 0x15	; 21
     70c:	80 95       	com	r24
     70e:	85 bb       	out	0x15, r24	; 21
	char buffer = UDR;
     710:	8c b1       	in	r24, 0x0c	; 12
	if (buffer ==  'w'){
     712:	87 37       	cpi	r24, 0x77	; 119
     714:	21 f4       	brne	.+8      	; 0x71e <__vector_11+0x36>
		SYSTEM_Log("front");
     716:	00 d0       	rcall	.+0      	; 0x718 <__vector_11+0x30>
     718:	89 ee       	ldi	r24, 0xE9	; 233
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	05 c0       	rjmp	.+10     	; 0x728 <__vector_11+0x40>
	}
	else if(buffer == 's'){
     71e:	83 37       	cpi	r24, 0x73	; 115
     720:	59 f4       	brne	.+22     	; 0x738 <__vector_11+0x50>
		SYSTEM_Log("back");
     722:	00 d0       	rcall	.+0      	; 0x724 <__vector_11+0x3c>
     724:	8f ee       	ldi	r24, 0xEF	; 239
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	ed b7       	in	r30, 0x3d	; 61
     72a:	fe b7       	in	r31, 0x3e	; 62
     72c:	92 83       	std	Z+2, r25	; 0x02
     72e:	81 83       	std	Z+1, r24	; 0x01
     730:	ca de       	rcall	.-620    	; 0x4c6 <SYSTEM_Log>
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	1c c0       	rjmp	.+56     	; 0x770 <__vector_11+0x88>
	}
	else if(buffer == 'a'){
     738:	81 36       	cpi	r24, 0x61	; 97
     73a:	21 f4       	brne	.+8      	; 0x744 <__vector_11+0x5c>
		SYSTEM_Log("left");
     73c:	00 d0       	rcall	.+0      	; 0x73e <__vector_11+0x56>
     73e:	84 ef       	ldi	r24, 0xF4	; 244
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	f2 cf       	rjmp	.-28     	; 0x728 <__vector_11+0x40>
	}
	else if(buffer == 'd'){
     744:	84 36       	cpi	r24, 0x64	; 100
     746:	21 f4       	brne	.+8      	; 0x750 <__vector_11+0x68>
		SYSTEM_Log("right");
     748:	00 d0       	rcall	.+0      	; 0x74a <__vector_11+0x62>
     74a:	89 ef       	ldi	r24, 0xF9	; 249
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	ec cf       	rjmp	.-40     	; 0x728 <__vector_11+0x40>
	}
	else if(buffer == 'z'){
     750:	8a 37       	cpi	r24, 0x7A	; 122
     752:	29 f4       	brne	.+10     	; 0x75e <__vector_11+0x76>
		int i;
	//	for (i =0; i < 254; i ++){
			MOTOR_Move(254, 500, 200 );
     754:	8e ef       	ldi	r24, 0xFE	; 254
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	64 ef       	ldi	r22, 0xF4	; 244
     75a:	71 e0       	ldi	r23, 0x01	; 1
     75c:	06 c0       	rjmp	.+12     	; 0x76a <__vector_11+0x82>
	//	}
	}
	else if(buffer == 'x'){
     75e:	88 37       	cpi	r24, 0x78	; 120
     760:	39 f4       	brne	.+14     	; 0x770 <__vector_11+0x88>
		int i;
	//	for (i =0; i < 254; i ++){
			MOTOR_Move(254, 300, 200 );
     762:	8e ef       	ldi	r24, 0xFE	; 254
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	6c e2       	ldi	r22, 0x2C	; 44
     768:	71 e0       	ldi	r23, 0x01	; 1
     76a:	48 ec       	ldi	r20, 0xC8	; 200
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	f6 de       	rcall	.-532    	; 0x55c <MOTOR_Move>
	//	}
	}


}
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <__vector_13>:
SIGNAL(SIG_UART_TRANS){// usart transmit interrupt
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	0f 92       	push	r0
     79a:	11 24       	eor	r1, r1


// add code you want..

}
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <__mulsf3>:
     7a6:	a0 e2       	ldi	r26, 0x20	; 32
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
     7aa:	e8 ed       	ldi	r30, 0xD8	; 216
     7ac:	f3 e0       	ldi	r31, 0x03	; 3
     7ae:	2b c3       	rjmp	.+1622   	; 0xe06 <__prologue_saves__>
     7b0:	69 83       	std	Y+1, r22	; 0x01
     7b2:	7a 83       	std	Y+2, r23	; 0x02
     7b4:	8b 83       	std	Y+3, r24	; 0x03
     7b6:	9c 83       	std	Y+4, r25	; 0x04
     7b8:	2d 83       	std	Y+5, r18	; 0x05
     7ba:	3e 83       	std	Y+6, r19	; 0x06
     7bc:	4f 83       	std	Y+7, r20	; 0x07
     7be:	58 87       	std	Y+8, r21	; 0x08
     7c0:	ce 01       	movw	r24, r28
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	be 01       	movw	r22, r28
     7c6:	67 5f       	subi	r22, 0xF7	; 247
     7c8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ca:	b4 d2       	rcall	.+1384   	; 0xd34 <__unpack_f>
     7cc:	ce 01       	movw	r24, r28
     7ce:	05 96       	adiw	r24, 0x05	; 5
     7d0:	be 01       	movw	r22, r28
     7d2:	6f 5e       	subi	r22, 0xEF	; 239
     7d4:	7f 4f       	sbci	r23, 0xFF	; 255
     7d6:	ae d2       	rcall	.+1372   	; 0xd34 <__unpack_f>
     7d8:	99 85       	ldd	r25, Y+9	; 0x09
     7da:	92 30       	cpi	r25, 0x02	; 2
     7dc:	78 f0       	brcs	.+30     	; 0x7fc <__mulsf3+0x56>
     7de:	89 89       	ldd	r24, Y+17	; 0x11
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	c0 f0       	brcs	.+48     	; 0x814 <__mulsf3+0x6e>
     7e4:	94 30       	cpi	r25, 0x04	; 4
     7e6:	19 f4       	brne	.+6      	; 0x7ee <__mulsf3+0x48>
     7e8:	82 30       	cpi	r24, 0x02	; 2
     7ea:	41 f4       	brne	.+16     	; 0x7fc <__mulsf3+0x56>
     7ec:	cb c0       	rjmp	.+406    	; 0x984 <__mulsf3+0x1de>
     7ee:	84 30       	cpi	r24, 0x04	; 4
     7f0:	19 f4       	brne	.+6      	; 0x7f8 <__mulsf3+0x52>
     7f2:	92 30       	cpi	r25, 0x02	; 2
     7f4:	79 f4       	brne	.+30     	; 0x814 <__mulsf3+0x6e>
     7f6:	c6 c0       	rjmp	.+396    	; 0x984 <__mulsf3+0x1de>
     7f8:	92 30       	cpi	r25, 0x02	; 2
     7fa:	51 f4       	brne	.+20     	; 0x810 <__mulsf3+0x6a>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	2a 85       	ldd	r18, Y+10	; 0x0a
     800:	9a 89       	ldd	r25, Y+18	; 0x12
     802:	29 17       	cp	r18, r25
     804:	09 f4       	brne	.+2      	; 0x808 <__mulsf3+0x62>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	8a 87       	std	Y+10, r24	; 0x0a
     80a:	ce 01       	movw	r24, r28
     80c:	09 96       	adiw	r24, 0x09	; 9
     80e:	bc c0       	rjmp	.+376    	; 0x988 <__mulsf3+0x1e2>
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	51 f4       	brne	.+20     	; 0x828 <__mulsf3+0x82>
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	2a 85       	ldd	r18, Y+10	; 0x0a
     818:	9a 89       	ldd	r25, Y+18	; 0x12
     81a:	29 17       	cp	r18, r25
     81c:	09 f4       	brne	.+2      	; 0x820 <__mulsf3+0x7a>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	8a 8b       	std	Y+18, r24	; 0x12
     822:	ce 01       	movw	r24, r28
     824:	41 96       	adiw	r24, 0x11	; 17
     826:	b0 c0       	rjmp	.+352    	; 0x988 <__mulsf3+0x1e2>
     828:	6d 84       	ldd	r6, Y+13	; 0x0d
     82a:	7e 84       	ldd	r7, Y+14	; 0x0e
     82c:	8f 84       	ldd	r8, Y+15	; 0x0f
     82e:	98 88       	ldd	r9, Y+16	; 0x10
     830:	ed 88       	ldd	r14, Y+21	; 0x15
     832:	fe 88       	ldd	r15, Y+22	; 0x16
     834:	0f 89       	ldd	r16, Y+23	; 0x17
     836:	18 8d       	ldd	r17, Y+24	; 0x18
     838:	e0 e2       	ldi	r30, 0x20	; 32
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	dc 01       	movw	r26, r24
     842:	aa 24       	eor	r10, r10
     844:	bb 24       	eor	r11, r11
     846:	65 01       	movw	r12, r10
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	a9 01       	movw	r20, r18
     84e:	b3 01       	movw	r22, r6
     850:	61 70       	andi	r22, 0x01	; 1
     852:	70 70       	andi	r23, 0x00	; 0
     854:	61 15       	cp	r22, r1
     856:	71 05       	cpc	r23, r1
     858:	d1 f0       	breq	.+52     	; 0x88e <__mulsf3+0xe8>
     85a:	2e 0d       	add	r18, r14
     85c:	3f 1d       	adc	r19, r15
     85e:	40 1f       	adc	r20, r16
     860:	51 1f       	adc	r21, r17
     862:	15 01       	movw	r2, r10
     864:	26 01       	movw	r4, r12
     866:	28 0e       	add	r2, r24
     868:	39 1e       	adc	r3, r25
     86a:	4a 1e       	adc	r4, r26
     86c:	5b 1e       	adc	r5, r27
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	2e 15       	cp	r18, r14
     878:	3f 05       	cpc	r19, r15
     87a:	40 07       	cpc	r20, r16
     87c:	51 07       	cpc	r21, r17
     87e:	18 f0       	brcs	.+6      	; 0x886 <__mulsf3+0xe0>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	dc 01       	movw	r26, r24
     886:	82 0d       	add	r24, r2
     888:	93 1d       	adc	r25, r3
     88a:	a4 1d       	adc	r26, r4
     88c:	b5 1d       	adc	r27, r5
     88e:	aa 0c       	add	r10, r10
     890:	bb 1c       	adc	r11, r11
     892:	cc 1c       	adc	r12, r12
     894:	dd 1c       	adc	r13, r13
     896:	17 ff       	sbrs	r17, 7
     898:	09 c0       	rjmp	.+18     	; 0x8ac <__mulsf3+0x106>
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	26 2e       	mov	r2, r22
     89e:	31 2c       	mov	r3, r1
     8a0:	41 2c       	mov	r4, r1
     8a2:	51 2c       	mov	r5, r1
     8a4:	a2 28       	or	r10, r2
     8a6:	b3 28       	or	r11, r3
     8a8:	c4 28       	or	r12, r4
     8aa:	d5 28       	or	r13, r5
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	49 f0       	breq	.+18     	; 0x8c2 <__mulsf3+0x11c>
     8b0:	ee 0c       	add	r14, r14
     8b2:	ff 1c       	adc	r15, r15
     8b4:	00 1f       	adc	r16, r16
     8b6:	11 1f       	adc	r17, r17
     8b8:	96 94       	lsr	r9
     8ba:	87 94       	ror	r8
     8bc:	77 94       	ror	r7
     8be:	67 94       	ror	r6
     8c0:	c6 cf       	rjmp	.-116    	; 0x84e <__mulsf3+0xa8>
     8c2:	6b 89       	ldd	r22, Y+19	; 0x13
     8c4:	7c 89       	ldd	r23, Y+20	; 0x14
     8c6:	eb 85       	ldd	r30, Y+11	; 0x0b
     8c8:	fc 85       	ldd	r31, Y+12	; 0x0c
     8ca:	6e 0f       	add	r22, r30
     8cc:	7f 1f       	adc	r23, r31
     8ce:	6e 5f       	subi	r22, 0xFE	; 254
     8d0:	7f 4f       	sbci	r23, 0xFF	; 255
     8d2:	7c 8f       	std	Y+28, r23	; 0x1c
     8d4:	6b 8f       	std	Y+27, r22	; 0x1b
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	ea 85       	ldd	r30, Y+10	; 0x0a
     8da:	7a 89       	ldd	r23, Y+18	; 0x12
     8dc:	e7 17       	cp	r30, r23
     8de:	09 f4       	brne	.+2      	; 0x8e2 <__mulsf3+0x13c>
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	6a 8f       	std	Y+26, r22	; 0x1a
     8e4:	6b 8d       	ldd	r22, Y+27	; 0x1b
     8e6:	7c 8d       	ldd	r23, Y+28	; 0x1c
     8e8:	10 c0       	rjmp	.+32     	; 0x90a <__mulsf3+0x164>
     8ea:	fc 01       	movw	r30, r24
     8ec:	e1 70       	andi	r30, 0x01	; 1
     8ee:	f0 70       	andi	r31, 0x00	; 0
     8f0:	30 97       	sbiw	r30, 0x00	; 0
     8f2:	29 f0       	breq	.+10     	; 0x8fe <__mulsf3+0x158>
     8f4:	56 95       	lsr	r21
     8f6:	47 95       	ror	r20
     8f8:	37 95       	ror	r19
     8fa:	27 95       	ror	r18
     8fc:	50 68       	ori	r21, 0x80	; 128
     8fe:	b6 95       	lsr	r27
     900:	a7 95       	ror	r26
     902:	97 95       	ror	r25
     904:	87 95       	ror	r24
     906:	6f 5f       	subi	r22, 0xFF	; 255
     908:	7f 4f       	sbci	r23, 0xFF	; 255
     90a:	b7 fd       	sbrc	r27, 7
     90c:	ee cf       	rjmp	.-36     	; 0x8ea <__mulsf3+0x144>
     90e:	0c c0       	rjmp	.+24     	; 0x928 <__mulsf3+0x182>
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	aa 1f       	adc	r26, r26
     916:	bb 1f       	adc	r27, r27
     918:	57 fd       	sbrc	r21, 7
     91a:	81 60       	ori	r24, 0x01	; 1
     91c:	22 0f       	add	r18, r18
     91e:	33 1f       	adc	r19, r19
     920:	44 1f       	adc	r20, r20
     922:	55 1f       	adc	r21, r21
     924:	61 50       	subi	r22, 0x01	; 1
     926:	70 40       	sbci	r23, 0x00	; 0
     928:	80 30       	cpi	r24, 0x00	; 0
     92a:	e0 e0       	ldi	r30, 0x00	; 0
     92c:	9e 07       	cpc	r25, r30
     92e:	e0 e0       	ldi	r30, 0x00	; 0
     930:	ae 07       	cpc	r26, r30
     932:	e0 e4       	ldi	r30, 0x40	; 64
     934:	be 07       	cpc	r27, r30
     936:	60 f3       	brcs	.-40     	; 0x910 <__mulsf3+0x16a>
     938:	6b 8f       	std	Y+27, r22	; 0x1b
     93a:	7c 8f       	std	Y+28, r23	; 0x1c
     93c:	6f e7       	ldi	r22, 0x7F	; 127
     93e:	e6 2e       	mov	r14, r22
     940:	f1 2c       	mov	r15, r1
     942:	01 2d       	mov	r16, r1
     944:	11 2d       	mov	r17, r1
     946:	e8 22       	and	r14, r24
     948:	f9 22       	and	r15, r25
     94a:	0a 23       	and	r16, r26
     94c:	1b 23       	and	r17, r27
     94e:	60 e4       	ldi	r22, 0x40	; 64
     950:	e6 16       	cp	r14, r22
     952:	f1 04       	cpc	r15, r1
     954:	01 05       	cpc	r16, r1
     956:	11 05       	cpc	r17, r1
     958:	61 f4       	brne	.+24     	; 0x972 <__mulsf3+0x1cc>
     95a:	87 fd       	sbrc	r24, 7
     95c:	0a c0       	rjmp	.+20     	; 0x972 <__mulsf3+0x1cc>
     95e:	21 15       	cp	r18, r1
     960:	31 05       	cpc	r19, r1
     962:	41 05       	cpc	r20, r1
     964:	51 05       	cpc	r21, r1
     966:	29 f0       	breq	.+10     	; 0x972 <__mulsf3+0x1cc>
     968:	80 5c       	subi	r24, 0xC0	; 192
     96a:	9f 4f       	sbci	r25, 0xFF	; 255
     96c:	af 4f       	sbci	r26, 0xFF	; 255
     96e:	bf 4f       	sbci	r27, 0xFF	; 255
     970:	80 78       	andi	r24, 0x80	; 128
     972:	8d 8f       	std	Y+29, r24	; 0x1d
     974:	9e 8f       	std	Y+30, r25	; 0x1e
     976:	af 8f       	std	Y+31, r26	; 0x1f
     978:	b8 a3       	std	Y+32, r27	; 0x20
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	89 8f       	std	Y+25, r24	; 0x19
     97e:	ce 01       	movw	r24, r28
     980:	49 96       	adiw	r24, 0x19	; 25
     982:	02 c0       	rjmp	.+4      	; 0x988 <__mulsf3+0x1e2>
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	08 d1       	rcall	.+528    	; 0xb9a <__pack_f>
     98a:	a0 96       	adiw	r28, 0x20	; 32
     98c:	e2 e1       	ldi	r30, 0x12	; 18
     98e:	57 c2       	rjmp	.+1198   	; 0xe3e <__epilogue_restores__>

00000990 <__floatsisf>:
     990:	a8 e0       	ldi	r26, 0x08	; 8
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	ed ec       	ldi	r30, 0xCD	; 205
     996:	f4 e0       	ldi	r31, 0x04	; 4
     998:	42 c2       	rjmp	.+1156   	; 0xe1e <__prologue_saves__+0x18>
     99a:	7b 01       	movw	r14, r22
     99c:	8c 01       	movw	r16, r24
     99e:	83 e0       	ldi	r24, 0x03	; 3
     9a0:	89 83       	std	Y+1, r24	; 0x01
     9a2:	d8 01       	movw	r26, r16
     9a4:	c7 01       	movw	r24, r14
     9a6:	88 27       	eor	r24, r24
     9a8:	b7 fd       	sbrc	r27, 7
     9aa:	83 95       	inc	r24
     9ac:	99 27       	eor	r25, r25
     9ae:	aa 27       	eor	r26, r26
     9b0:	bb 27       	eor	r27, r27
     9b2:	28 2f       	mov	r18, r24
     9b4:	8a 83       	std	Y+2, r24	; 0x02
     9b6:	e1 14       	cp	r14, r1
     9b8:	f1 04       	cpc	r15, r1
     9ba:	01 05       	cpc	r16, r1
     9bc:	11 05       	cpc	r17, r1
     9be:	19 f4       	brne	.+6      	; 0x9c6 <__floatsisf+0x36>
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	89 83       	std	Y+1, r24	; 0x01
     9c4:	36 c0       	rjmp	.+108    	; 0xa32 <__floatsisf+0xa2>
     9c6:	8e e1       	ldi	r24, 0x1E	; 30
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	9c 83       	std	Y+4, r25	; 0x04
     9cc:	8b 83       	std	Y+3, r24	; 0x03
     9ce:	22 23       	and	r18, r18
     9d0:	89 f0       	breq	.+34     	; 0x9f4 <__floatsisf+0x64>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	e8 16       	cp	r14, r24
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	f8 06       	cpc	r15, r24
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	08 07       	cpc	r16, r24
     9de:	80 e8       	ldi	r24, 0x80	; 128
     9e0:	18 07       	cpc	r17, r24
     9e2:	59 f1       	breq	.+86     	; 0xa3a <__floatsisf+0xaa>
     9e4:	10 95       	com	r17
     9e6:	00 95       	com	r16
     9e8:	f0 94       	com	r15
     9ea:	e0 94       	com	r14
     9ec:	e1 1c       	adc	r14, r1
     9ee:	f1 1c       	adc	r15, r1
     9f0:	01 1d       	adc	r16, r1
     9f2:	11 1d       	adc	r17, r1
     9f4:	ed 82       	std	Y+5, r14	; 0x05
     9f6:	fe 82       	std	Y+6, r15	; 0x06
     9f8:	0f 83       	std	Y+7, r16	; 0x07
     9fa:	18 87       	std	Y+8, r17	; 0x08
     9fc:	c8 01       	movw	r24, r16
     9fe:	b7 01       	movw	r22, r14
     a00:	72 d0       	rcall	.+228    	; 0xae6 <__clzsi2>
     a02:	9c 01       	movw	r18, r24
     a04:	21 50       	subi	r18, 0x01	; 1
     a06:	30 40       	sbci	r19, 0x00	; 0
     a08:	12 16       	cp	r1, r18
     a0a:	13 06       	cpc	r1, r19
     a0c:	94 f4       	brge	.+36     	; 0xa32 <__floatsisf+0xa2>
     a0e:	02 2e       	mov	r0, r18
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <__floatsisf+0x8a>
     a12:	ee 0c       	add	r14, r14
     a14:	ff 1c       	adc	r15, r15
     a16:	00 1f       	adc	r16, r16
     a18:	11 1f       	adc	r17, r17
     a1a:	0a 94       	dec	r0
     a1c:	d2 f7       	brpl	.-12     	; 0xa12 <__floatsisf+0x82>
     a1e:	ed 82       	std	Y+5, r14	; 0x05
     a20:	fe 82       	std	Y+6, r15	; 0x06
     a22:	0f 83       	std	Y+7, r16	; 0x07
     a24:	18 87       	std	Y+8, r17	; 0x08
     a26:	8e e1       	ldi	r24, 0x1E	; 30
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	82 1b       	sub	r24, r18
     a2c:	93 0b       	sbc	r25, r19
     a2e:	9c 83       	std	Y+4, r25	; 0x04
     a30:	8b 83       	std	Y+3, r24	; 0x03
     a32:	ce 01       	movw	r24, r28
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	b1 d0       	rcall	.+354    	; 0xb9a <__pack_f>
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__floatsisf+0xb2>
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	9f ec       	ldi	r25, 0xCF	; 207
     a42:	28 96       	adiw	r28, 0x08	; 8
     a44:	e6 e0       	ldi	r30, 0x06	; 6
     a46:	07 c2       	rjmp	.+1038   	; 0xe56 <__epilogue_restores__+0x18>

00000a48 <__fixsfsi>:
     a48:	ac e0       	ldi	r26, 0x0C	; 12
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	e9 e2       	ldi	r30, 0x29	; 41
     a4e:	f5 e0       	ldi	r31, 0x05	; 5
     a50:	ea c1       	rjmp	.+980    	; 0xe26 <__prologue_saves__+0x20>
     a52:	69 83       	std	Y+1, r22	; 0x01
     a54:	7a 83       	std	Y+2, r23	; 0x02
     a56:	8b 83       	std	Y+3, r24	; 0x03
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	ce 01       	movw	r24, r28
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	be 01       	movw	r22, r28
     a60:	6b 5f       	subi	r22, 0xFB	; 251
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	67 d1       	rcall	.+718    	; 0xd34 <__unpack_f>
     a66:	8d 81       	ldd	r24, Y+5	; 0x05
     a68:	82 30       	cpi	r24, 0x02	; 2
     a6a:	81 f1       	breq	.+96     	; 0xacc <__fixsfsi+0x84>
     a6c:	82 30       	cpi	r24, 0x02	; 2
     a6e:	70 f1       	brcs	.+92     	; 0xacc <__fixsfsi+0x84>
     a70:	84 30       	cpi	r24, 0x04	; 4
     a72:	21 f4       	brne	.+8      	; 0xa7c <__fixsfsi+0x34>
     a74:	8e 81       	ldd	r24, Y+6	; 0x06
     a76:	88 23       	and	r24, r24
     a78:	69 f1       	breq	.+90     	; 0xad4 <__fixsfsi+0x8c>
     a7a:	0a c0       	rjmp	.+20     	; 0xa90 <__fixsfsi+0x48>
     a7c:	2f 81       	ldd	r18, Y+7	; 0x07
     a7e:	38 85       	ldd	r19, Y+8	; 0x08
     a80:	37 fd       	sbrc	r19, 7
     a82:	24 c0       	rjmp	.+72     	; 0xacc <__fixsfsi+0x84>
     a84:	6e 81       	ldd	r22, Y+6	; 0x06
     a86:	2f 31       	cpi	r18, 0x1F	; 31
     a88:	31 05       	cpc	r19, r1
     a8a:	3c f0       	brlt	.+14     	; 0xa9a <__fixsfsi+0x52>
     a8c:	66 23       	and	r22, r22
     a8e:	11 f1       	breq	.+68     	; 0xad4 <__fixsfsi+0x8c>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	50 e8       	ldi	r21, 0x80	; 128
     a98:	21 c0       	rjmp	.+66     	; 0xadc <__fixsfsi+0x94>
     a9a:	8e e1       	ldi	r24, 0x1E	; 30
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	82 1b       	sub	r24, r18
     aa0:	93 0b       	sbc	r25, r19
     aa2:	29 85       	ldd	r18, Y+9	; 0x09
     aa4:	3a 85       	ldd	r19, Y+10	; 0x0a
     aa6:	4b 85       	ldd	r20, Y+11	; 0x0b
     aa8:	5c 85       	ldd	r21, Y+12	; 0x0c
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <__fixsfsi+0x6c>
     aac:	56 95       	lsr	r21
     aae:	47 95       	ror	r20
     ab0:	37 95       	ror	r19
     ab2:	27 95       	ror	r18
     ab4:	8a 95       	dec	r24
     ab6:	d2 f7       	brpl	.-12     	; 0xaac <__fixsfsi+0x64>
     ab8:	66 23       	and	r22, r22
     aba:	81 f0       	breq	.+32     	; 0xadc <__fixsfsi+0x94>
     abc:	50 95       	com	r21
     abe:	40 95       	com	r20
     ac0:	30 95       	com	r19
     ac2:	21 95       	neg	r18
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	4f 4f       	sbci	r20, 0xFF	; 255
     ac8:	5f 4f       	sbci	r21, 0xFF	; 255
     aca:	08 c0       	rjmp	.+16     	; 0xadc <__fixsfsi+0x94>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	a9 01       	movw	r20, r18
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <__fixsfsi+0x94>
     ad4:	2f ef       	ldi	r18, 0xFF	; 255
     ad6:	3f ef       	ldi	r19, 0xFF	; 255
     ad8:	4f ef       	ldi	r20, 0xFF	; 255
     ada:	5f e7       	ldi	r21, 0x7F	; 127
     adc:	b9 01       	movw	r22, r18
     ade:	ca 01       	movw	r24, r20
     ae0:	2c 96       	adiw	r28, 0x0c	; 12
     ae2:	e2 e0       	ldi	r30, 0x02	; 2
     ae4:	bc c1       	rjmp	.+888    	; 0xe5e <__epilogue_restores__+0x20>

00000ae6 <__clzsi2>:
     ae6:	af 92       	push	r10
     ae8:	bf 92       	push	r11
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	7b 01       	movw	r14, r22
     af8:	8c 01       	movw	r16, r24
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	e8 16       	cp	r14, r24
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	f8 06       	cpc	r15, r24
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	08 07       	cpc	r16, r24
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	18 07       	cpc	r17, r24
     b0a:	58 f4       	brcc	.+22     	; 0xb22 <__clzsi2+0x3c>
     b0c:	ef ef       	ldi	r30, 0xFF	; 255
     b0e:	ee 16       	cp	r14, r30
     b10:	f1 04       	cpc	r15, r1
     b12:	01 05       	cpc	r16, r1
     b14:	11 05       	cpc	r17, r1
     b16:	09 f0       	breq	.+2      	; 0xb1a <__clzsi2+0x34>
     b18:	90 f4       	brcc	.+36     	; 0xb3e <__clzsi2+0x58>
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	dc 01       	movw	r26, r24
     b20:	17 c0       	rjmp	.+46     	; 0xb50 <__clzsi2+0x6a>
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	ef 16       	cp	r14, r31
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	ff 06       	cpc	r15, r31
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	0f 07       	cpc	r16, r31
     b2e:	f1 e0       	ldi	r31, 0x01	; 1
     b30:	1f 07       	cpc	r17, r31
     b32:	50 f4       	brcc	.+20     	; 0xb48 <__clzsi2+0x62>
     b34:	80 e1       	ldi	r24, 0x10	; 16
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	a0 e0       	ldi	r26, 0x00	; 0
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	09 c0       	rjmp	.+18     	; 0xb50 <__clzsi2+0x6a>
     b3e:	88 e0       	ldi	r24, 0x08	; 8
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	04 c0       	rjmp	.+8      	; 0xb50 <__clzsi2+0x6a>
     b48:	88 e1       	ldi	r24, 0x18	; 24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	20 e2       	ldi	r18, 0x20	; 32
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	28 1b       	sub	r18, r24
     b5a:	39 0b       	sbc	r19, r25
     b5c:	4a 0b       	sbc	r20, r26
     b5e:	5b 0b       	sbc	r21, r27
     b60:	57 01       	movw	r10, r14
     b62:	68 01       	movw	r12, r16
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x88>
     b66:	d6 94       	lsr	r13
     b68:	c7 94       	ror	r12
     b6a:	b7 94       	ror	r11
     b6c:	a7 94       	ror	r10
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x80>
     b72:	d6 01       	movw	r26, r12
     b74:	c5 01       	movw	r24, r10
     b76:	89 5f       	subi	r24, 0xF9	; 249
     b78:	9e 4f       	sbci	r25, 0xFE	; 254
     b7a:	fc 01       	movw	r30, r24
     b7c:	80 81       	ld	r24, Z
     b7e:	28 1b       	sub	r18, r24
     b80:	31 09       	sbc	r19, r1
     b82:	41 09       	sbc	r20, r1
     b84:	51 09       	sbc	r21, r1
     b86:	c9 01       	movw	r24, r18
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	bf 90       	pop	r11
     b96:	af 90       	pop	r10
     b98:	08 95       	ret

00000b9a <__pack_f>:
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	fc 01       	movw	r30, r24
     ba8:	24 81       	ldd	r18, Z+4	; 0x04
     baa:	35 81       	ldd	r19, Z+5	; 0x05
     bac:	46 81       	ldd	r20, Z+6	; 0x06
     bae:	57 81       	ldd	r21, Z+7	; 0x07
     bb0:	61 81       	ldd	r22, Z+1	; 0x01
     bb2:	80 81       	ld	r24, Z
     bb4:	82 30       	cpi	r24, 0x02	; 2
     bb6:	20 f4       	brcc	.+8      	; 0xbc0 <__pack_f+0x26>
     bb8:	40 61       	ori	r20, 0x10	; 16
     bba:	ef ef       	ldi	r30, 0xFF	; 255
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	a3 c0       	rjmp	.+326    	; 0xd06 <__pack_f+0x16c>
     bc0:	84 30       	cpi	r24, 0x04	; 4
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <__pack_f+0x2c>
     bc4:	9b c0       	rjmp	.+310    	; 0xcfc <__pack_f+0x162>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	09 f4       	brne	.+2      	; 0xbcc <__pack_f+0x32>
     bca:	92 c0       	rjmp	.+292    	; 0xcf0 <__pack_f+0x156>
     bcc:	21 15       	cp	r18, r1
     bce:	31 05       	cpc	r19, r1
     bd0:	41 05       	cpc	r20, r1
     bd2:	51 05       	cpc	r21, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <__pack_f+0x3e>
     bd6:	8f c0       	rjmp	.+286    	; 0xcf6 <__pack_f+0x15c>
     bd8:	02 80       	ldd	r0, Z+2	; 0x02
     bda:	f3 81       	ldd	r31, Z+3	; 0x03
     bdc:	e0 2d       	mov	r30, r0
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	e2 38       	cpi	r30, 0x82	; 130
     be2:	f8 07       	cpc	r31, r24
     be4:	0c f0       	brlt	.+2      	; 0xbe8 <__pack_f+0x4e>
     be6:	5a c0       	rjmp	.+180    	; 0xc9c <__pack_f+0x102>
     be8:	c2 e8       	ldi	r28, 0x82	; 130
     bea:	df ef       	ldi	r29, 0xFF	; 255
     bec:	ce 1b       	sub	r28, r30
     bee:	df 0b       	sbc	r29, r31
     bf0:	ca 31       	cpi	r28, 0x1A	; 26
     bf2:	d1 05       	cpc	r29, r1
     bf4:	6c f5       	brge	.+90     	; 0xc50 <__pack_f+0xb6>
     bf6:	79 01       	movw	r14, r18
     bf8:	8a 01       	movw	r16, r20
     bfa:	0c 2e       	mov	r0, r28
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__pack_f+0x6c>
     bfe:	16 95       	lsr	r17
     c00:	07 95       	ror	r16
     c02:	f7 94       	ror	r15
     c04:	e7 94       	ror	r14
     c06:	0a 94       	dec	r0
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__pack_f+0x64>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	0c 2e       	mov	r0, r28
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x84>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	aa 1f       	adc	r26, r26
     c1c:	bb 1f       	adc	r27, r27
     c1e:	0a 94       	dec	r0
     c20:	d2 f7       	brpl	.-12     	; 0xc16 <__pack_f+0x7c>
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	a1 09       	sbc	r26, r1
     c26:	b1 09       	sbc	r27, r1
     c28:	82 23       	and	r24, r18
     c2a:	93 23       	and	r25, r19
     c2c:	a4 23       	and	r26, r20
     c2e:	b5 23       	and	r27, r21
     c30:	21 e0       	ldi	r18, 0x01	; 1
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	a1 05       	cpc	r26, r1
     c3c:	b1 05       	cpc	r27, r1
     c3e:	19 f4       	brne	.+6      	; 0xc46 <__pack_f+0xac>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	a9 01       	movw	r20, r18
     c46:	2e 29       	or	r18, r14
     c48:	3f 29       	or	r19, r15
     c4a:	40 2b       	or	r20, r16
     c4c:	51 2b       	or	r21, r17
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <__pack_f+0xbc>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	a9 01       	movw	r20, r18
     c56:	da 01       	movw	r26, r20
     c58:	c9 01       	movw	r24, r18
     c5a:	8f 77       	andi	r24, 0x7F	; 127
     c5c:	90 70       	andi	r25, 0x00	; 0
     c5e:	a0 70       	andi	r26, 0x00	; 0
     c60:	b0 70       	andi	r27, 0x00	; 0
     c62:	80 34       	cpi	r24, 0x40	; 64
     c64:	91 05       	cpc	r25, r1
     c66:	a1 05       	cpc	r26, r1
     c68:	b1 05       	cpc	r27, r1
     c6a:	39 f4       	brne	.+14     	; 0xc7a <__pack_f+0xe0>
     c6c:	27 ff       	sbrs	r18, 7
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <__pack_f+0xe8>
     c70:	20 5c       	subi	r18, 0xC0	; 192
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	4f 4f       	sbci	r20, 0xFF	; 255
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <__pack_f+0xe8>
     c7a:	21 5c       	subi	r18, 0xC1	; 193
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	4f 4f       	sbci	r20, 0xFF	; 255
     c80:	5f 4f       	sbci	r21, 0xFF	; 255
     c82:	e1 e0       	ldi	r30, 0x01	; 1
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	20 30       	cpi	r18, 0x00	; 0
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	38 07       	cpc	r19, r24
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	48 07       	cpc	r20, r24
     c90:	80 e4       	ldi	r24, 0x40	; 64
     c92:	58 07       	cpc	r21, r24
     c94:	28 f5       	brcc	.+74     	; 0xce0 <__pack_f+0x146>
     c96:	e0 e0       	ldi	r30, 0x00	; 0
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	22 c0       	rjmp	.+68     	; 0xce0 <__pack_f+0x146>
     c9c:	e0 38       	cpi	r30, 0x80	; 128
     c9e:	f1 05       	cpc	r31, r1
     ca0:	6c f5       	brge	.+90     	; 0xcfc <__pack_f+0x162>
     ca2:	e1 58       	subi	r30, 0x81	; 129
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0x130>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0x138>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0x138>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	57 ff       	sbrs	r21, 7
     cd4:	05 c0       	rjmp	.+10     	; 0xce0 <__pack_f+0x146>
     cd6:	56 95       	lsr	r21
     cd8:	47 95       	ror	r20
     cda:	37 95       	ror	r19
     cdc:	27 95       	ror	r18
     cde:	31 96       	adiw	r30, 0x01	; 1
     ce0:	87 e0       	ldi	r24, 0x07	; 7
     ce2:	56 95       	lsr	r21
     ce4:	47 95       	ror	r20
     ce6:	37 95       	ror	r19
     ce8:	27 95       	ror	r18
     cea:	8a 95       	dec	r24
     cec:	d1 f7       	brne	.-12     	; 0xce2 <__pack_f+0x148>
     cee:	0b c0       	rjmp	.+22     	; 0xd06 <__pack_f+0x16c>
     cf0:	e0 e0       	ldi	r30, 0x00	; 0
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x166>
     cf6:	e0 e0       	ldi	r30, 0x00	; 0
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <__pack_f+0x16c>
     cfc:	ef ef       	ldi	r30, 0xFF	; 255
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	a9 01       	movw	r20, r18
     d06:	8e 2f       	mov	r24, r30
     d08:	87 95       	ror	r24
     d0a:	88 27       	eor	r24, r24
     d0c:	87 95       	ror	r24
     d0e:	94 2f       	mov	r25, r20
     d10:	9f 77       	andi	r25, 0x7F	; 127
     d12:	67 95       	ror	r22
     d14:	66 27       	eor	r22, r22
     d16:	67 95       	ror	r22
     d18:	e6 95       	lsr	r30
     d1a:	e2 2e       	mov	r14, r18
     d1c:	a9 2f       	mov	r26, r25
     d1e:	a8 2b       	or	r26, r24
     d20:	fe 2f       	mov	r31, r30
     d22:	f6 2b       	or	r31, r22
     d24:	62 2f       	mov	r22, r18
     d26:	73 2f       	mov	r23, r19
     d28:	8a 2f       	mov	r24, r26
     d2a:	9f 2f       	mov	r25, r31
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	e6 e0       	ldi	r30, 0x06	; 6
     d32:	91 c0       	rjmp	.+290    	; 0xe56 <__epilogue_restores__+0x18>

00000d34 <__unpack_f>:
     d34:	dc 01       	movw	r26, r24
     d36:	fb 01       	movw	r30, r22
     d38:	2c 91       	ld	r18, X
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	3c 91       	ld	r19, X
     d3e:	11 97       	sbiw	r26, 0x01	; 1
     d40:	12 96       	adiw	r26, 0x02	; 2
     d42:	8c 91       	ld	r24, X
     d44:	12 97       	sbiw	r26, 0x02	; 2
     d46:	48 2f       	mov	r20, r24
     d48:	4f 77       	andi	r20, 0x7F	; 127
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	98 2f       	mov	r25, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	99 27       	eor	r25, r25
     d52:	99 1f       	adc	r25, r25
     d54:	13 96       	adiw	r26, 0x03	; 3
     d56:	6c 91       	ld	r22, X
     d58:	13 97       	sbiw	r26, 0x03	; 3
     d5a:	86 2f       	mov	r24, r22
     d5c:	88 0f       	add	r24, r24
     d5e:	89 2b       	or	r24, r25
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	66 1f       	adc	r22, r22
     d64:	66 27       	eor	r22, r22
     d66:	66 1f       	adc	r22, r22
     d68:	61 83       	std	Z+1, r22	; 0x01
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	39 f5       	brne	.+78     	; 0xdbc <__unpack_f+0x88>
     d6e:	21 15       	cp	r18, r1
     d70:	31 05       	cpc	r19, r1
     d72:	41 05       	cpc	r20, r1
     d74:	51 05       	cpc	r21, r1
     d76:	11 f4       	brne	.+4      	; 0xd7c <__unpack_f+0x48>
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	29 c0       	rjmp	.+82     	; 0xdce <__unpack_f+0x9a>
     d7c:	82 e8       	ldi	r24, 0x82	; 130
     d7e:	9f ef       	ldi	r25, 0xFF	; 255
     d80:	93 83       	std	Z+3, r25	; 0x03
     d82:	82 83       	std	Z+2, r24	; 0x02
     d84:	67 e0       	ldi	r22, 0x07	; 7
     d86:	22 0f       	add	r18, r18
     d88:	33 1f       	adc	r19, r19
     d8a:	44 1f       	adc	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	6a 95       	dec	r22
     d90:	d1 f7       	brne	.-12     	; 0xd86 <__unpack_f+0x52>
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	80 83       	st	Z, r24
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <__unpack_f+0x76>
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	44 1f       	adc	r20, r20
     d9e:	55 1f       	adc	r21, r21
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	93 83       	std	Z+3, r25	; 0x03
     da8:	82 83       	std	Z+2, r24	; 0x02
     daa:	20 30       	cpi	r18, 0x00	; 0
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	38 07       	cpc	r19, r24
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	48 07       	cpc	r20, r24
     db4:	80 e4       	ldi	r24, 0x40	; 64
     db6:	58 07       	cpc	r21, r24
     db8:	78 f3       	brcs	.-34     	; 0xd98 <__unpack_f+0x64>
     dba:	20 c0       	rjmp	.+64     	; 0xdfc <__unpack_f+0xc8>
     dbc:	8f 3f       	cpi	r24, 0xFF	; 255
     dbe:	91 05       	cpc	r25, r1
     dc0:	79 f4       	brne	.+30     	; 0xde0 <__unpack_f+0xac>
     dc2:	21 15       	cp	r18, r1
     dc4:	31 05       	cpc	r19, r1
     dc6:	41 05       	cpc	r20, r1
     dc8:	51 05       	cpc	r21, r1
     dca:	19 f4       	brne	.+6      	; 0xdd2 <__unpack_f+0x9e>
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	80 83       	st	Z, r24
     dd0:	08 95       	ret
     dd2:	44 ff       	sbrs	r20, 4
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <__unpack_f+0xa8>
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 83       	st	Z, r24
     dda:	10 c0       	rjmp	.+32     	; 0xdfc <__unpack_f+0xc8>
     ddc:	10 82       	st	Z, r1
     dde:	0e c0       	rjmp	.+28     	; 0xdfc <__unpack_f+0xc8>
     de0:	8f 57       	subi	r24, 0x7F	; 127
     de2:	90 40       	sbci	r25, 0x00	; 0
     de4:	93 83       	std	Z+3, r25	; 0x03
     de6:	82 83       	std	Z+2, r24	; 0x02
     de8:	83 e0       	ldi	r24, 0x03	; 3
     dea:	80 83       	st	Z, r24
     dec:	87 e0       	ldi	r24, 0x07	; 7
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	44 1f       	adc	r20, r20
     df4:	55 1f       	adc	r21, r21
     df6:	8a 95       	dec	r24
     df8:	d1 f7       	brne	.-12     	; 0xdee <__unpack_f+0xba>
     dfa:	50 64       	ori	r21, 0x40	; 64
     dfc:	24 83       	std	Z+4, r18	; 0x04
     dfe:	35 83       	std	Z+5, r19	; 0x05
     e00:	46 83       	std	Z+6, r20	; 0x06
     e02:	57 83       	std	Z+7, r21	; 0x07
     e04:	08 95       	ret

00000e06 <__prologue_saves__>:
     e06:	2f 92       	push	r2
     e08:	3f 92       	push	r3
     e0a:	4f 92       	push	r4
     e0c:	5f 92       	push	r5
     e0e:	6f 92       	push	r6
     e10:	7f 92       	push	r7
     e12:	8f 92       	push	r8
     e14:	9f 92       	push	r9
     e16:	af 92       	push	r10
     e18:	bf 92       	push	r11
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	ca 1b       	sub	r28, r26
     e30:	db 0b       	sbc	r29, r27
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	09 94       	ijmp

00000e3e <__epilogue_restores__>:
     e3e:	2a 88       	ldd	r2, Y+18	; 0x12
     e40:	39 88       	ldd	r3, Y+17	; 0x11
     e42:	48 88       	ldd	r4, Y+16	; 0x10
     e44:	5f 84       	ldd	r5, Y+15	; 0x0f
     e46:	6e 84       	ldd	r6, Y+14	; 0x0e
     e48:	7d 84       	ldd	r7, Y+13	; 0x0d
     e4a:	8c 84       	ldd	r8, Y+12	; 0x0c
     e4c:	9b 84       	ldd	r9, Y+11	; 0x0b
     e4e:	aa 84       	ldd	r10, Y+10	; 0x0a
     e50:	b9 84       	ldd	r11, Y+9	; 0x09
     e52:	c8 84       	ldd	r12, Y+8	; 0x08
     e54:	df 80       	ldd	r13, Y+7	; 0x07
     e56:	ee 80       	ldd	r14, Y+6	; 0x06
     e58:	fd 80       	ldd	r15, Y+5	; 0x05
     e5a:	0c 81       	ldd	r16, Y+4	; 0x04
     e5c:	1b 81       	ldd	r17, Y+3	; 0x03
     e5e:	aa 81       	ldd	r26, Y+2	; 0x02
     e60:	b9 81       	ldd	r27, Y+1	; 0x01
     e62:	ce 0f       	add	r28, r30
     e64:	d1 1d       	adc	r29, r1
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	ed 01       	movw	r28, r26
     e72:	08 95       	ret

00000e74 <vsprintf>:
     e74:	ae e0       	ldi	r26, 0x0E	; 14
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ef e3       	ldi	r30, 0x3F	; 63
     e7a:	f7 e0       	ldi	r31, 0x07	; 7
     e7c:	d2 cf       	rjmp	.-92     	; 0xe22 <__prologue_saves__+0x1c>
     e7e:	8c 01       	movw	r16, r24
     e80:	86 e0       	ldi	r24, 0x06	; 6
     e82:	8c 83       	std	Y+4, r24	; 0x04
     e84:	1a 83       	std	Y+2, r17	; 0x02
     e86:	09 83       	std	Y+1, r16	; 0x01
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	9f e7       	ldi	r25, 0x7F	; 127
     e8c:	9e 83       	std	Y+6, r25	; 0x06
     e8e:	8d 83       	std	Y+5, r24	; 0x05
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	08 d0       	rcall	.+16     	; 0xea6 <vfprintf>
     e96:	ef 81       	ldd	r30, Y+7	; 0x07
     e98:	f8 85       	ldd	r31, Y+8	; 0x08
     e9a:	e0 0f       	add	r30, r16
     e9c:	f1 1f       	adc	r31, r17
     e9e:	10 82       	st	Z, r1
     ea0:	2e 96       	adiw	r28, 0x0e	; 14
     ea2:	e4 e0       	ldi	r30, 0x04	; 4
     ea4:	da cf       	rjmp	.-76     	; 0xe5a <__epilogue_restores__+0x1c>

00000ea6 <vfprintf>:
     ea6:	ac e0       	ldi	r26, 0x0C	; 12
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e8 e5       	ldi	r30, 0x58	; 88
     eac:	f7 e0       	ldi	r31, 0x07	; 7
     eae:	ab cf       	rjmp	.-170    	; 0xe06 <__prologue_saves__>
     eb0:	6c 01       	movw	r12, r24
     eb2:	1b 01       	movw	r2, r22
     eb4:	8a 01       	movw	r16, r20
     eb6:	fc 01       	movw	r30, r24
     eb8:	17 82       	std	Z+7, r1	; 0x07
     eba:	16 82       	std	Z+6, r1	; 0x06
     ebc:	83 81       	ldd	r24, Z+3	; 0x03
     ebe:	81 ff       	sbrs	r24, 1
     ec0:	c4 c1       	rjmp	.+904    	; 0x124a <vfprintf+0x3a4>
     ec2:	2e 01       	movw	r4, r28
     ec4:	08 94       	sec
     ec6:	41 1c       	adc	r4, r1
     ec8:	51 1c       	adc	r5, r1
     eca:	f6 01       	movw	r30, r12
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	f1 01       	movw	r30, r2
     ed0:	93 fd       	sbrc	r25, 3
     ed2:	85 91       	lpm	r24, Z+
     ed4:	93 ff       	sbrs	r25, 3
     ed6:	81 91       	ld	r24, Z+
     ed8:	1f 01       	movw	r2, r30
     eda:	88 23       	and	r24, r24
     edc:	09 f4       	brne	.+2      	; 0xee0 <vfprintf+0x3a>
     ede:	b1 c1       	rjmp	.+866    	; 0x1242 <vfprintf+0x39c>
     ee0:	85 32       	cpi	r24, 0x25	; 37
     ee2:	39 f4       	brne	.+14     	; 0xef2 <vfprintf+0x4c>
     ee4:	93 fd       	sbrc	r25, 3
     ee6:	85 91       	lpm	r24, Z+
     ee8:	93 ff       	sbrs	r25, 3
     eea:	81 91       	ld	r24, Z+
     eec:	1f 01       	movw	r2, r30
     eee:	85 32       	cpi	r24, 0x25	; 37
     ef0:	21 f4       	brne	.+8      	; 0xefa <vfprintf+0x54>
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	b6 01       	movw	r22, r12
     ef6:	c5 d1       	rcall	.+906    	; 0x1282 <fputc>
     ef8:	e8 cf       	rjmp	.-48     	; 0xeca <vfprintf+0x24>
     efa:	ee 24       	eor	r14, r14
     efc:	ff 24       	eor	r15, r15
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	20 32       	cpi	r18, 0x20	; 32
     f02:	b0 f4       	brcc	.+44     	; 0xf30 <vfprintf+0x8a>
     f04:	8b 32       	cpi	r24, 0x2B	; 43
     f06:	69 f0       	breq	.+26     	; 0xf22 <vfprintf+0x7c>
     f08:	8c 32       	cpi	r24, 0x2C	; 44
     f0a:	28 f4       	brcc	.+10     	; 0xf16 <vfprintf+0x70>
     f0c:	80 32       	cpi	r24, 0x20	; 32
     f0e:	51 f0       	breq	.+20     	; 0xf24 <vfprintf+0x7e>
     f10:	83 32       	cpi	r24, 0x23	; 35
     f12:	71 f4       	brne	.+28     	; 0xf30 <vfprintf+0x8a>
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <vfprintf+0x86>
     f16:	8d 32       	cpi	r24, 0x2D	; 45
     f18:	39 f0       	breq	.+14     	; 0xf28 <vfprintf+0x82>
     f1a:	80 33       	cpi	r24, 0x30	; 48
     f1c:	49 f4       	brne	.+18     	; 0xf30 <vfprintf+0x8a>
     f1e:	21 60       	ori	r18, 0x01	; 1
     f20:	2c c0       	rjmp	.+88     	; 0xf7a <vfprintf+0xd4>
     f22:	22 60       	ori	r18, 0x02	; 2
     f24:	24 60       	ori	r18, 0x04	; 4
     f26:	29 c0       	rjmp	.+82     	; 0xf7a <vfprintf+0xd4>
     f28:	28 60       	ori	r18, 0x08	; 8
     f2a:	27 c0       	rjmp	.+78     	; 0xf7a <vfprintf+0xd4>
     f2c:	20 61       	ori	r18, 0x10	; 16
     f2e:	25 c0       	rjmp	.+74     	; 0xf7a <vfprintf+0xd4>
     f30:	27 fd       	sbrc	r18, 7
     f32:	2c c0       	rjmp	.+88     	; 0xf8c <vfprintf+0xe6>
     f34:	38 2f       	mov	r19, r24
     f36:	30 53       	subi	r19, 0x30	; 48
     f38:	3a 30       	cpi	r19, 0x0A	; 10
     f3a:	98 f4       	brcc	.+38     	; 0xf62 <vfprintf+0xbc>
     f3c:	26 ff       	sbrs	r18, 6
     f3e:	08 c0       	rjmp	.+16     	; 0xf50 <vfprintf+0xaa>
     f40:	8e 2d       	mov	r24, r14
     f42:	88 0f       	add	r24, r24
     f44:	e8 2e       	mov	r14, r24
     f46:	ee 0c       	add	r14, r14
     f48:	ee 0c       	add	r14, r14
     f4a:	e8 0e       	add	r14, r24
     f4c:	e3 0e       	add	r14, r19
     f4e:	15 c0       	rjmp	.+42     	; 0xf7a <vfprintf+0xd4>
     f50:	8f 2d       	mov	r24, r15
     f52:	88 0f       	add	r24, r24
     f54:	f8 2e       	mov	r15, r24
     f56:	ff 0c       	add	r15, r15
     f58:	ff 0c       	add	r15, r15
     f5a:	f8 0e       	add	r15, r24
     f5c:	f3 0e       	add	r15, r19
     f5e:	20 62       	ori	r18, 0x20	; 32
     f60:	0c c0       	rjmp	.+24     	; 0xf7a <vfprintf+0xd4>
     f62:	8e 32       	cpi	r24, 0x2E	; 46
     f64:	21 f4       	brne	.+8      	; 0xf6e <vfprintf+0xc8>
     f66:	26 fd       	sbrc	r18, 6
     f68:	6c c1       	rjmp	.+728    	; 0x1242 <vfprintf+0x39c>
     f6a:	20 64       	ori	r18, 0x40	; 64
     f6c:	06 c0       	rjmp	.+12     	; 0xf7a <vfprintf+0xd4>
     f6e:	8c 36       	cpi	r24, 0x6C	; 108
     f70:	11 f4       	brne	.+4      	; 0xf76 <vfprintf+0xd0>
     f72:	20 68       	ori	r18, 0x80	; 128
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <vfprintf+0xd4>
     f76:	88 36       	cpi	r24, 0x68	; 104
     f78:	49 f4       	brne	.+18     	; 0xf8c <vfprintf+0xe6>
     f7a:	f1 01       	movw	r30, r2
     f7c:	93 fd       	sbrc	r25, 3
     f7e:	85 91       	lpm	r24, Z+
     f80:	93 ff       	sbrs	r25, 3
     f82:	81 91       	ld	r24, Z+
     f84:	1f 01       	movw	r2, r30
     f86:	88 23       	and	r24, r24
     f88:	09 f0       	breq	.+2      	; 0xf8c <vfprintf+0xe6>
     f8a:	ba cf       	rjmp	.-140    	; 0xf00 <vfprintf+0x5a>
     f8c:	98 2f       	mov	r25, r24
     f8e:	95 54       	subi	r25, 0x45	; 69
     f90:	93 30       	cpi	r25, 0x03	; 3
     f92:	18 f0       	brcs	.+6      	; 0xf9a <vfprintf+0xf4>
     f94:	90 52       	subi	r25, 0x20	; 32
     f96:	93 30       	cpi	r25, 0x03	; 3
     f98:	28 f4       	brcc	.+10     	; 0xfa4 <vfprintf+0xfe>
     f9a:	0c 5f       	subi	r16, 0xFC	; 252
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	ff e3       	ldi	r31, 0x3F	; 63
     fa0:	f9 83       	std	Y+1, r31	; 0x01
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <vfprintf+0x118>
     fa4:	83 36       	cpi	r24, 0x63	; 99
     fa6:	31 f0       	breq	.+12     	; 0xfb4 <vfprintf+0x10e>
     fa8:	83 37       	cpi	r24, 0x73	; 115
     faa:	71 f0       	breq	.+28     	; 0xfc8 <vfprintf+0x122>
     fac:	83 35       	cpi	r24, 0x53	; 83
     fae:	09 f0       	breq	.+2      	; 0xfb2 <vfprintf+0x10c>
     fb0:	5c c0       	rjmp	.+184    	; 0x106a <vfprintf+0x1c4>
     fb2:	21 c0       	rjmp	.+66     	; 0xff6 <vfprintf+0x150>
     fb4:	f8 01       	movw	r30, r16
     fb6:	80 81       	ld	r24, Z
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	0e 5f       	subi	r16, 0xFE	; 254
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
     fbe:	42 01       	movw	r8, r4
     fc0:	71 e0       	ldi	r23, 0x01	; 1
     fc2:	a7 2e       	mov	r10, r23
     fc4:	b1 2c       	mov	r11, r1
     fc6:	15 c0       	rjmp	.+42     	; 0xff2 <vfprintf+0x14c>
     fc8:	62 e0       	ldi	r22, 0x02	; 2
     fca:	66 2e       	mov	r6, r22
     fcc:	71 2c       	mov	r7, r1
     fce:	60 0e       	add	r6, r16
     fd0:	71 1e       	adc	r7, r17
     fd2:	f8 01       	movw	r30, r16
     fd4:	80 80       	ld	r8, Z
     fd6:	91 80       	ldd	r9, Z+1	; 0x01
     fd8:	26 ff       	sbrs	r18, 6
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <vfprintf+0x13c>
     fdc:	6e 2d       	mov	r22, r14
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <vfprintf+0x140>
     fe2:	6f ef       	ldi	r22, 0xFF	; 255
     fe4:	7f ef       	ldi	r23, 0xFF	; 255
     fe6:	c4 01       	movw	r24, r8
     fe8:	2c 87       	std	Y+12, r18	; 0x0c
     fea:	40 d1       	rcall	.+640    	; 0x126c <strnlen>
     fec:	5c 01       	movw	r10, r24
     fee:	83 01       	movw	r16, r6
     ff0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff2:	2f 77       	andi	r18, 0x7F	; 127
     ff4:	16 c0       	rjmp	.+44     	; 0x1022 <vfprintf+0x17c>
     ff6:	52 e0       	ldi	r21, 0x02	; 2
     ff8:	65 2e       	mov	r6, r21
     ffa:	71 2c       	mov	r7, r1
     ffc:	60 0e       	add	r6, r16
     ffe:	71 1e       	adc	r7, r17
    1000:	f8 01       	movw	r30, r16
    1002:	80 80       	ld	r8, Z
    1004:	91 80       	ldd	r9, Z+1	; 0x01
    1006:	26 ff       	sbrs	r18, 6
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <vfprintf+0x16a>
    100a:	6e 2d       	mov	r22, r14
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <vfprintf+0x16e>
    1010:	6f ef       	ldi	r22, 0xFF	; 255
    1012:	7f ef       	ldi	r23, 0xFF	; 255
    1014:	c4 01       	movw	r24, r8
    1016:	2c 87       	std	Y+12, r18	; 0x0c
    1018:	1e d1       	rcall	.+572    	; 0x1256 <strnlen_P>
    101a:	5c 01       	movw	r10, r24
    101c:	2c 85       	ldd	r18, Y+12	; 0x0c
    101e:	20 68       	ori	r18, 0x80	; 128
    1020:	83 01       	movw	r16, r6
    1022:	23 fd       	sbrc	r18, 3
    1024:	1e c0       	rjmp	.+60     	; 0x1062 <vfprintf+0x1bc>
    1026:	07 c0       	rjmp	.+14     	; 0x1036 <vfprintf+0x190>
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	b6 01       	movw	r22, r12
    102e:	2c 87       	std	Y+12, r18	; 0x0c
    1030:	28 d1       	rcall	.+592    	; 0x1282 <fputc>
    1032:	fa 94       	dec	r15
    1034:	2c 85       	ldd	r18, Y+12	; 0x0c
    1036:	8f 2d       	mov	r24, r15
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a8 16       	cp	r10, r24
    103c:	b9 06       	cpc	r11, r25
    103e:	a0 f3       	brcs	.-24     	; 0x1028 <vfprintf+0x182>
    1040:	10 c0       	rjmp	.+32     	; 0x1062 <vfprintf+0x1bc>
    1042:	f4 01       	movw	r30, r8
    1044:	27 fd       	sbrc	r18, 7
    1046:	85 91       	lpm	r24, Z+
    1048:	27 ff       	sbrs	r18, 7
    104a:	81 91       	ld	r24, Z+
    104c:	4f 01       	movw	r8, r30
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	b6 01       	movw	r22, r12
    1052:	2c 87       	std	Y+12, r18	; 0x0c
    1054:	16 d1       	rcall	.+556    	; 0x1282 <fputc>
    1056:	2c 85       	ldd	r18, Y+12	; 0x0c
    1058:	f1 10       	cpse	r15, r1
    105a:	fa 94       	dec	r15
    105c:	08 94       	sec
    105e:	a1 08       	sbc	r10, r1
    1060:	b1 08       	sbc	r11, r1
    1062:	a1 14       	cp	r10, r1
    1064:	b1 04       	cpc	r11, r1
    1066:	69 f7       	brne	.-38     	; 0x1042 <vfprintf+0x19c>
    1068:	e9 c0       	rjmp	.+466    	; 0x123c <vfprintf+0x396>
    106a:	84 36       	cpi	r24, 0x64	; 100
    106c:	11 f0       	breq	.+4      	; 0x1072 <vfprintf+0x1cc>
    106e:	89 36       	cpi	r24, 0x69	; 105
    1070:	41 f5       	brne	.+80     	; 0x10c2 <vfprintf+0x21c>
    1072:	27 ff       	sbrs	r18, 7
    1074:	08 c0       	rjmp	.+16     	; 0x1086 <vfprintf+0x1e0>
    1076:	f8 01       	movw	r30, r16
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	0c 5f       	subi	r16, 0xFC	; 252
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <vfprintf+0x1f2>
    1086:	f8 01       	movw	r30, r16
    1088:	60 81       	ld	r22, Z
    108a:	71 81       	ldd	r23, Z+1	; 0x01
    108c:	88 27       	eor	r24, r24
    108e:	77 fd       	sbrc	r23, 7
    1090:	80 95       	com	r24
    1092:	98 2f       	mov	r25, r24
    1094:	0e 5f       	subi	r16, 0xFE	; 254
    1096:	1f 4f       	sbci	r17, 0xFF	; 255
    1098:	4f e6       	ldi	r20, 0x6F	; 111
    109a:	b4 2e       	mov	r11, r20
    109c:	b2 22       	and	r11, r18
    109e:	97 ff       	sbrs	r25, 7
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <vfprintf+0x20e>
    10a2:	90 95       	com	r25
    10a4:	80 95       	com	r24
    10a6:	70 95       	com	r23
    10a8:	61 95       	neg	r22
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	8f 4f       	sbci	r24, 0xFF	; 255
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	f0 e8       	ldi	r31, 0x80	; 128
    10b2:	bf 2a       	or	r11, r31
    10b4:	a2 01       	movw	r20, r4
    10b6:	2a e0       	ldi	r18, 0x0A	; 10
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	0f d1       	rcall	.+542    	; 0x12da <__ultoa_invert>
    10bc:	78 2e       	mov	r7, r24
    10be:	74 18       	sub	r7, r4
    10c0:	44 c0       	rjmp	.+136    	; 0x114a <vfprintf+0x2a4>
    10c2:	85 37       	cpi	r24, 0x75	; 117
    10c4:	31 f4       	brne	.+12     	; 0x10d2 <vfprintf+0x22c>
    10c6:	3f ee       	ldi	r19, 0xEF	; 239
    10c8:	b3 2e       	mov	r11, r19
    10ca:	b2 22       	and	r11, r18
    10cc:	2a e0       	ldi	r18, 0x0A	; 10
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	25 c0       	rjmp	.+74     	; 0x111c <vfprintf+0x276>
    10d2:	99 ef       	ldi	r25, 0xF9	; 249
    10d4:	b9 2e       	mov	r11, r25
    10d6:	b2 22       	and	r11, r18
    10d8:	8f 36       	cpi	r24, 0x6F	; 111
    10da:	c1 f0       	breq	.+48     	; 0x110c <vfprintf+0x266>
    10dc:	80 37       	cpi	r24, 0x70	; 112
    10de:	20 f4       	brcc	.+8      	; 0x10e8 <vfprintf+0x242>
    10e0:	88 35       	cpi	r24, 0x58	; 88
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <vfprintf+0x240>
    10e4:	ae c0       	rjmp	.+348    	; 0x1242 <vfprintf+0x39c>
    10e6:	0d c0       	rjmp	.+26     	; 0x1102 <vfprintf+0x25c>
    10e8:	80 37       	cpi	r24, 0x70	; 112
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <vfprintf+0x24e>
    10ec:	88 37       	cpi	r24, 0x78	; 120
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <vfprintf+0x24c>
    10f0:	a8 c0       	rjmp	.+336    	; 0x1242 <vfprintf+0x39c>
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <vfprintf+0x252>
    10f4:	20 e1       	ldi	r18, 0x10	; 16
    10f6:	b2 2a       	or	r11, r18
    10f8:	b4 fe       	sbrs	r11, 4
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <vfprintf+0x26c>
    10fc:	84 e0       	ldi	r24, 0x04	; 4
    10fe:	b8 2a       	or	r11, r24
    1100:	08 c0       	rjmp	.+16     	; 0x1112 <vfprintf+0x26c>
    1102:	b4 fe       	sbrs	r11, 4
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <vfprintf+0x272>
    1106:	e6 e0       	ldi	r30, 0x06	; 6
    1108:	be 2a       	or	r11, r30
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <vfprintf+0x272>
    110c:	28 e0       	ldi	r18, 0x08	; 8
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	05 c0       	rjmp	.+10     	; 0x111c <vfprintf+0x276>
    1112:	20 e1       	ldi	r18, 0x10	; 16
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	02 c0       	rjmp	.+4      	; 0x111c <vfprintf+0x276>
    1118:	20 e1       	ldi	r18, 0x10	; 16
    111a:	32 e0       	ldi	r19, 0x02	; 2
    111c:	b7 fe       	sbrs	r11, 7
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <vfprintf+0x28a>
    1120:	f8 01       	movw	r30, r16
    1122:	60 81       	ld	r22, Z
    1124:	71 81       	ldd	r23, Z+1	; 0x01
    1126:	82 81       	ldd	r24, Z+2	; 0x02
    1128:	93 81       	ldd	r25, Z+3	; 0x03
    112a:	0c 5f       	subi	r16, 0xFC	; 252
    112c:	1f 4f       	sbci	r17, 0xFF	; 255
    112e:	07 c0       	rjmp	.+14     	; 0x113e <vfprintf+0x298>
    1130:	f8 01       	movw	r30, r16
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 5f       	subi	r16, 0xFE	; 254
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	a2 01       	movw	r20, r4
    1140:	cc d0       	rcall	.+408    	; 0x12da <__ultoa_invert>
    1142:	78 2e       	mov	r7, r24
    1144:	74 18       	sub	r7, r4
    1146:	ff e7       	ldi	r31, 0x7F	; 127
    1148:	bf 22       	and	r11, r31
    114a:	b6 fe       	sbrs	r11, 6
    114c:	0b c0       	rjmp	.+22     	; 0x1164 <vfprintf+0x2be>
    114e:	2e ef       	ldi	r18, 0xFE	; 254
    1150:	b2 22       	and	r11, r18
    1152:	7e 14       	cp	r7, r14
    1154:	38 f4       	brcc	.+14     	; 0x1164 <vfprintf+0x2be>
    1156:	b4 fe       	sbrs	r11, 4
    1158:	07 c0       	rjmp	.+14     	; 0x1168 <vfprintf+0x2c2>
    115a:	b2 fc       	sbrc	r11, 2
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <vfprintf+0x2c2>
    115e:	8f ee       	ldi	r24, 0xEF	; 239
    1160:	b8 22       	and	r11, r24
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <vfprintf+0x2c2>
    1164:	a7 2c       	mov	r10, r7
    1166:	01 c0       	rjmp	.+2      	; 0x116a <vfprintf+0x2c4>
    1168:	ae 2c       	mov	r10, r14
    116a:	8b 2d       	mov	r24, r11
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	b4 fe       	sbrs	r11, 4
    1170:	0d c0       	rjmp	.+26     	; 0x118c <vfprintf+0x2e6>
    1172:	fe 01       	movw	r30, r28
    1174:	e7 0d       	add	r30, r7
    1176:	f1 1d       	adc	r31, r1
    1178:	20 81       	ld	r18, Z
    117a:	20 33       	cpi	r18, 0x30	; 48
    117c:	19 f4       	brne	.+6      	; 0x1184 <vfprintf+0x2de>
    117e:	e9 ee       	ldi	r30, 0xE9	; 233
    1180:	be 22       	and	r11, r30
    1182:	09 c0       	rjmp	.+18     	; 0x1196 <vfprintf+0x2f0>
    1184:	a3 94       	inc	r10
    1186:	b2 fe       	sbrs	r11, 2
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <vfprintf+0x2f0>
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <vfprintf+0x2ee>
    118c:	86 78       	andi	r24, 0x86	; 134
    118e:	90 70       	andi	r25, 0x00	; 0
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	09 f0       	breq	.+2      	; 0x1196 <vfprintf+0x2f0>
    1194:	a3 94       	inc	r10
    1196:	8b 2c       	mov	r8, r11
    1198:	99 24       	eor	r9, r9
    119a:	b3 fc       	sbrc	r11, 3
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <vfprintf+0x31e>
    119e:	b0 fe       	sbrs	r11, 0
    11a0:	0e c0       	rjmp	.+28     	; 0x11be <vfprintf+0x318>
    11a2:	af 14       	cp	r10, r15
    11a4:	28 f4       	brcc	.+10     	; 0x11b0 <vfprintf+0x30a>
    11a6:	e7 2c       	mov	r14, r7
    11a8:	ef 0c       	add	r14, r15
    11aa:	ea 18       	sub	r14, r10
    11ac:	af 2c       	mov	r10, r15
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <vfprintf+0x318>
    11b0:	e7 2c       	mov	r14, r7
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <vfprintf+0x318>
    11b4:	80 e2       	ldi	r24, 0x20	; 32
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	b6 01       	movw	r22, r12
    11ba:	63 d0       	rcall	.+198    	; 0x1282 <fputc>
    11bc:	a3 94       	inc	r10
    11be:	af 14       	cp	r10, r15
    11c0:	c8 f3       	brcs	.-14     	; 0x11b4 <vfprintf+0x30e>
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <vfprintf+0x326>
    11c4:	af 14       	cp	r10, r15
    11c6:	10 f4       	brcc	.+4      	; 0x11cc <vfprintf+0x326>
    11c8:	fa 18       	sub	r15, r10
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <vfprintf+0x328>
    11cc:	ff 24       	eor	r15, r15
    11ce:	84 fe       	sbrs	r8, 4
    11d0:	0e c0       	rjmp	.+28     	; 0x11ee <vfprintf+0x348>
    11d2:	80 e3       	ldi	r24, 0x30	; 48
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	b6 01       	movw	r22, r12
    11d8:	54 d0       	rcall	.+168    	; 0x1282 <fputc>
    11da:	82 fe       	sbrs	r8, 2
    11dc:	1d c0       	rjmp	.+58     	; 0x1218 <vfprintf+0x372>
    11de:	81 fe       	sbrs	r8, 1
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <vfprintf+0x342>
    11e2:	88 e5       	ldi	r24, 0x58	; 88
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	10 c0       	rjmp	.+32     	; 0x1208 <vfprintf+0x362>
    11e8:	88 e7       	ldi	r24, 0x78	; 120
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0d c0       	rjmp	.+26     	; 0x1208 <vfprintf+0x362>
    11ee:	c4 01       	movw	r24, r8
    11f0:	86 78       	andi	r24, 0x86	; 134
    11f2:	90 70       	andi	r25, 0x00	; 0
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	81 f0       	breq	.+32     	; 0x1218 <vfprintf+0x372>
    11f8:	81 fc       	sbrc	r8, 1
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <vfprintf+0x35a>
    11fc:	80 e2       	ldi	r24, 0x20	; 32
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <vfprintf+0x35c>
    1200:	8b e2       	ldi	r24, 0x2B	; 43
    1202:	b7 fc       	sbrc	r11, 7
    1204:	8d e2       	ldi	r24, 0x2D	; 45
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	b6 01       	movw	r22, r12
    120a:	3b d0       	rcall	.+118    	; 0x1282 <fputc>
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <vfprintf+0x372>
    120e:	80 e3       	ldi	r24, 0x30	; 48
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	b6 01       	movw	r22, r12
    1214:	36 d0       	rcall	.+108    	; 0x1282 <fputc>
    1216:	ea 94       	dec	r14
    1218:	7e 14       	cp	r7, r14
    121a:	c8 f3       	brcs	.-14     	; 0x120e <vfprintf+0x368>
    121c:	7a 94       	dec	r7
    121e:	f2 01       	movw	r30, r4
    1220:	e7 0d       	add	r30, r7
    1222:	f1 1d       	adc	r31, r1
    1224:	80 81       	ld	r24, Z
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	b6 01       	movw	r22, r12
    122a:	2b d0       	rcall	.+86     	; 0x1282 <fputc>
    122c:	77 20       	and	r7, r7
    122e:	b1 f7       	brne	.-20     	; 0x121c <vfprintf+0x376>
    1230:	05 c0       	rjmp	.+10     	; 0x123c <vfprintf+0x396>
    1232:	80 e2       	ldi	r24, 0x20	; 32
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	b6 01       	movw	r22, r12
    1238:	24 d0       	rcall	.+72     	; 0x1282 <fputc>
    123a:	fa 94       	dec	r15
    123c:	ff 20       	and	r15, r15
    123e:	c9 f7       	brne	.-14     	; 0x1232 <vfprintf+0x38c>
    1240:	44 ce       	rjmp	.-888    	; 0xeca <vfprintf+0x24>
    1242:	f6 01       	movw	r30, r12
    1244:	26 81       	ldd	r18, Z+6	; 0x06
    1246:	37 81       	ldd	r19, Z+7	; 0x07
    1248:	02 c0       	rjmp	.+4      	; 0x124e <vfprintf+0x3a8>
    124a:	2f ef       	ldi	r18, 0xFF	; 255
    124c:	3f ef       	ldi	r19, 0xFF	; 255
    124e:	c9 01       	movw	r24, r18
    1250:	2c 96       	adiw	r28, 0x0c	; 12
    1252:	e2 e1       	ldi	r30, 0x12	; 18
    1254:	f4 cd       	rjmp	.-1048   	; 0xe3e <__epilogue_restores__>

00001256 <strnlen_P>:
    1256:	fc 01       	movw	r30, r24
    1258:	05 90       	lpm	r0, Z+
    125a:	61 50       	subi	r22, 0x01	; 1
    125c:	70 40       	sbci	r23, 0x00	; 0
    125e:	01 10       	cpse	r0, r1
    1260:	d8 f7       	brcc	.-10     	; 0x1258 <strnlen_P+0x2>
    1262:	80 95       	com	r24
    1264:	90 95       	com	r25
    1266:	8e 0f       	add	r24, r30
    1268:	9f 1f       	adc	r25, r31
    126a:	08 95       	ret

0000126c <strnlen>:
    126c:	fc 01       	movw	r30, r24
    126e:	61 50       	subi	r22, 0x01	; 1
    1270:	70 40       	sbci	r23, 0x00	; 0
    1272:	01 90       	ld	r0, Z+
    1274:	01 10       	cpse	r0, r1
    1276:	d8 f7       	brcc	.-10     	; 0x126e <strnlen+0x2>
    1278:	80 95       	com	r24
    127a:	90 95       	com	r25
    127c:	8e 0f       	add	r24, r30
    127e:	9f 1f       	adc	r25, r31
    1280:	08 95       	ret

00001282 <fputc>:
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	8c 01       	movw	r16, r24
    128c:	eb 01       	movw	r28, r22
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	81 ff       	sbrs	r24, 1
    1292:	1b c0       	rjmp	.+54     	; 0x12ca <fputc+0x48>
    1294:	82 ff       	sbrs	r24, 2
    1296:	0d c0       	rjmp	.+26     	; 0x12b2 <fputc+0x30>
    1298:	2e 81       	ldd	r18, Y+6	; 0x06
    129a:	3f 81       	ldd	r19, Y+7	; 0x07
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	28 17       	cp	r18, r24
    12a2:	39 07       	cpc	r19, r25
    12a4:	64 f4       	brge	.+24     	; 0x12be <fputc+0x3c>
    12a6:	e8 81       	ld	r30, Y
    12a8:	f9 81       	ldd	r31, Y+1	; 0x01
    12aa:	01 93       	st	Z+, r16
    12ac:	f9 83       	std	Y+1, r31	; 0x01
    12ae:	e8 83       	st	Y, r30
    12b0:	06 c0       	rjmp	.+12     	; 0x12be <fputc+0x3c>
    12b2:	e8 85       	ldd	r30, Y+8	; 0x08
    12b4:	f9 85       	ldd	r31, Y+9	; 0x09
    12b6:	80 2f       	mov	r24, r16
    12b8:	09 95       	icall
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	31 f4       	brne	.+12     	; 0x12ca <fputc+0x48>
    12be:	8e 81       	ldd	r24, Y+6	; 0x06
    12c0:	9f 81       	ldd	r25, Y+7	; 0x07
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	9f 83       	std	Y+7, r25	; 0x07
    12c6:	8e 83       	std	Y+6, r24	; 0x06
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <fputc+0x4c>
    12ca:	0f ef       	ldi	r16, 0xFF	; 255
    12cc:	1f ef       	ldi	r17, 0xFF	; 255
    12ce:	c8 01       	movw	r24, r16
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <__ultoa_invert>:
    12da:	fa 01       	movw	r30, r20
    12dc:	aa 27       	eor	r26, r26
    12de:	28 30       	cpi	r18, 0x08	; 8
    12e0:	51 f1       	breq	.+84     	; 0x1336 <__ultoa_invert+0x5c>
    12e2:	20 31       	cpi	r18, 0x10	; 16
    12e4:	81 f1       	breq	.+96     	; 0x1346 <__ultoa_invert+0x6c>
    12e6:	e8 94       	clt
    12e8:	6f 93       	push	r22
    12ea:	6e 7f       	andi	r22, 0xFE	; 254
    12ec:	6e 5f       	subi	r22, 0xFE	; 254
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	8f 4f       	sbci	r24, 0xFF	; 255
    12f2:	9f 4f       	sbci	r25, 0xFF	; 255
    12f4:	af 4f       	sbci	r26, 0xFF	; 255
    12f6:	b1 e0       	ldi	r27, 0x01	; 1
    12f8:	3e d0       	rcall	.+124    	; 0x1376 <__ultoa_invert+0x9c>
    12fa:	b4 e0       	ldi	r27, 0x04	; 4
    12fc:	3c d0       	rcall	.+120    	; 0x1376 <__ultoa_invert+0x9c>
    12fe:	67 0f       	add	r22, r23
    1300:	78 1f       	adc	r23, r24
    1302:	89 1f       	adc	r24, r25
    1304:	9a 1f       	adc	r25, r26
    1306:	a1 1d       	adc	r26, r1
    1308:	68 0f       	add	r22, r24
    130a:	79 1f       	adc	r23, r25
    130c:	8a 1f       	adc	r24, r26
    130e:	91 1d       	adc	r25, r1
    1310:	a1 1d       	adc	r26, r1
    1312:	6a 0f       	add	r22, r26
    1314:	71 1d       	adc	r23, r1
    1316:	81 1d       	adc	r24, r1
    1318:	91 1d       	adc	r25, r1
    131a:	a1 1d       	adc	r26, r1
    131c:	20 d0       	rcall	.+64     	; 0x135e <__ultoa_invert+0x84>
    131e:	09 f4       	brne	.+2      	; 0x1322 <__ultoa_invert+0x48>
    1320:	68 94       	set
    1322:	3f 91       	pop	r19
    1324:	2a e0       	ldi	r18, 0x0A	; 10
    1326:	26 9f       	mul	r18, r22
    1328:	11 24       	eor	r1, r1
    132a:	30 19       	sub	r19, r0
    132c:	30 5d       	subi	r19, 0xD0	; 208
    132e:	31 93       	st	Z+, r19
    1330:	de f6       	brtc	.-74     	; 0x12e8 <__ultoa_invert+0xe>
    1332:	cf 01       	movw	r24, r30
    1334:	08 95       	ret
    1336:	46 2f       	mov	r20, r22
    1338:	47 70       	andi	r20, 0x07	; 7
    133a:	40 5d       	subi	r20, 0xD0	; 208
    133c:	41 93       	st	Z+, r20
    133e:	b3 e0       	ldi	r27, 0x03	; 3
    1340:	0f d0       	rcall	.+30     	; 0x1360 <__ultoa_invert+0x86>
    1342:	c9 f7       	brne	.-14     	; 0x1336 <__ultoa_invert+0x5c>
    1344:	f6 cf       	rjmp	.-20     	; 0x1332 <__ultoa_invert+0x58>
    1346:	46 2f       	mov	r20, r22
    1348:	4f 70       	andi	r20, 0x0F	; 15
    134a:	40 5d       	subi	r20, 0xD0	; 208
    134c:	4a 33       	cpi	r20, 0x3A	; 58
    134e:	18 f0       	brcs	.+6      	; 0x1356 <__ultoa_invert+0x7c>
    1350:	49 5d       	subi	r20, 0xD9	; 217
    1352:	31 fd       	sbrc	r19, 1
    1354:	40 52       	subi	r20, 0x20	; 32
    1356:	41 93       	st	Z+, r20
    1358:	02 d0       	rcall	.+4      	; 0x135e <__ultoa_invert+0x84>
    135a:	a9 f7       	brne	.-22     	; 0x1346 <__ultoa_invert+0x6c>
    135c:	ea cf       	rjmp	.-44     	; 0x1332 <__ultoa_invert+0x58>
    135e:	b4 e0       	ldi	r27, 0x04	; 4
    1360:	a6 95       	lsr	r26
    1362:	97 95       	ror	r25
    1364:	87 95       	ror	r24
    1366:	77 95       	ror	r23
    1368:	67 95       	ror	r22
    136a:	ba 95       	dec	r27
    136c:	c9 f7       	brne	.-14     	; 0x1360 <__ultoa_invert+0x86>
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	61 05       	cpc	r22, r1
    1372:	71 05       	cpc	r23, r1
    1374:	08 95       	ret
    1376:	9b 01       	movw	r18, r22
    1378:	ac 01       	movw	r20, r24
    137a:	0a 2e       	mov	r0, r26
    137c:	06 94       	lsr	r0
    137e:	57 95       	ror	r21
    1380:	47 95       	ror	r20
    1382:	37 95       	ror	r19
    1384:	27 95       	ror	r18
    1386:	ba 95       	dec	r27
    1388:	c9 f7       	brne	.-14     	; 0x137c <__ultoa_invert+0xa2>
    138a:	62 0f       	add	r22, r18
    138c:	73 1f       	adc	r23, r19
    138e:	84 1f       	adc	r24, r20
    1390:	95 1f       	adc	r25, r21
    1392:	a0 1d       	adc	r26, r0
    1394:	08 95       	ret

00001396 <_exit>:
    1396:	f8 94       	cli

00001398 <__stop_program>:
    1398:	ff cf       	rjmp	.-2      	; 0x1398 <__stop_program>
