
ax12_motor_test_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000150e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  0000150e  000015a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00800208  00800208  0000174a  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00002586  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000395  00000000  00000000  00002786  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000025e0  00000000  00000000  00002b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013ad  00000000  00000000  000050fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000022f0  00000000  00000000  000064a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000310  00000000  00000000  00008798  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006a4  00000000  00000000  00008aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001462  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000005ce  00000000  00000000  0000a5ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000090  00000000  00000000  0000ab7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	9e c3       	rjmp	.+1852   	; 0x754 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	f1 c3       	rjmp	.+2018   	; 0x7fe <__vector_13>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	12 e0       	ldi	r17, 0x02	; 2
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ee e0       	ldi	r30, 0x0E	; 14
      3a:	f5 e1       	ldi	r31, 0x15	; 21
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a8 30       	cpi	r26, 0x08	; 8
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	12 e0       	ldi	r17, 0x02	; 2
      4a:	a8 e0       	ldi	r26, 0x08	; 8
      4c:	b2 e0       	ldi	r27, 0x02	; 2
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ab 34       	cpi	r26, 0x4B	; 75
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	dc d1       	rcall	.+952    	; 0x412 <main>
      5a:	57 ca       	rjmp	.-2898   	; 0xfffff50a <__eeprom_end+0xff7ef50a>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <dgree_to_hex>:
#define punch_l 0x30
#define punch_h 0x31

void dgree_to_hex(int dg)
{
  dg = (int)(dg * 3.41);
      5e:	9c 01       	movw	r18, r24
      60:	b9 01       	movw	r22, r18
      62:	88 27       	eor	r24, r24
      64:	77 fd       	sbrc	r23, 7
      66:	80 95       	com	r24
      68:	98 2f       	mov	r25, r24
      6a:	f3 d4       	rcall	.+2534   	; 0xa52 <__floatsisf>
      6c:	21 e7       	ldi	r18, 0x71	; 113
      6e:	3d e3       	ldi	r19, 0x3D	; 61
      70:	4a e5       	ldi	r20, 0x5A	; 90
      72:	50 e4       	ldi	r21, 0x40	; 64
      74:	ce d3       	rcall	.+1948   	; 0x812 <__mulsf3>
      76:	49 d5       	rcall	.+2706   	; 0xb0a <__fixsfsi>
    
  ang1 = dg>>8;
      78:	87 2f       	mov	r24, r23
      7a:	99 27       	eor	r25, r25
      7c:	87 fd       	sbrc	r24, 7
      7e:	9a 95       	dec	r25
      80:	90 93 0c 02 	sts	0x020C, r25
      84:	80 93 0b 02 	sts	0x020B, r24
  ang2 = dg & 0x0ff;
      88:	70 70       	andi	r23, 0x00	; 0
      8a:	70 93 0e 02 	sts	0x020E, r23
      8e:	60 93 0d 02 	sts	0x020D, r22
}
      92:	08 95       	ret

00000094 <put_data>:


void put_data(unsigned char id_num, unsigned char data_type, unsigned char data)
{
      94:	ef 92       	push	r14
      96:	ff 92       	push	r15
      98:	0f 93       	push	r16
      9a:	1f 93       	push	r17
      9c:	df 93       	push	r29
      9e:	cf 93       	push	r28
      a0:	cd b7       	in	r28, 0x3d	; 61
      a2:	de b7       	in	r29, 0x3e	; 62
      a4:	28 97       	sbiw	r28, 0x08	; 8
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	f8 94       	cli
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	0f be       	out	0x3f, r0	; 63
      ae:	cd bf       	out	0x3d, r28	; 61
	int i;
	char put[8];
	put[0] = 0xff;
      b0:	9f ef       	ldi	r25, 0xFF	; 255
      b2:	99 83       	std	Y+1, r25	; 0x01
	put[1] = 0xff;
      b4:	9a 83       	std	Y+2, r25	; 0x02
	put[2] = id_num;   //id
      b6:	8b 83       	std	Y+3, r24	; 0x03
	put[3] = 0x04;     //length
      b8:	84 e0       	ldi	r24, 0x04	; 4
      ba:	8c 83       	std	Y+4, r24	; 0x04
	put[4] = 0x03;     //write data
      bc:	83 e0       	ldi	r24, 0x03	; 3
      be:	8d 83       	std	Y+5, r24	; 0x05
	put[5] = data_type;     //data_type
      c0:	6e 83       	std	Y+6, r22	; 0x06
	put[6] = data;
      c2:	4f 83       	std	Y+7, r20	; 0x07
	put[7] = 0x00;
      c4:	18 86       	std	Y+8, r1	; 0x08
      c6:	fe 01       	movw	r30, r28
      c8:	33 96       	adiw	r30, 0x03	; 3
  ang1 = dg>>8;
  ang2 = dg & 0x0ff;
}


void put_data(unsigned char id_num, unsigned char data_type, unsigned char data)
      ca:	ce 01       	movw	r24, r28
      cc:	08 96       	adiw	r24, 0x08	; 8
	put[6] = data;
	put[7] = 0x00;

	for( i = 2; i<7; i++)
	{
		put[7] += put[i];
      ce:	21 91       	ld	r18, Z+
      d0:	38 85       	ldd	r19, Y+8	; 0x08
      d2:	23 0f       	add	r18, r19
      d4:	28 87       	std	Y+8, r18	; 0x08
	put[4] = 0x03;     //write data
	put[5] = data_type;     //data_type
	put[6] = data;
	put[7] = 0x00;

	for( i = 2; i<7; i++)
      d6:	e8 17       	cp	r30, r24
      d8:	f9 07       	cpc	r31, r25
      da:	c9 f7       	brne	.-14     	; 0xce <put_data+0x3a>
	{
		put[7] += put[i];
	}
	put[7] = ~put[7];
      dc:	20 95       	com	r18
      de:	28 87       	std	Y+8, r18	; 0x08

	CON_PORT = SEND;
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	82 bb       	out	0x12, r24	; 18
      e4:	8e 01       	movw	r16, r28
      e6:	0f 5f       	subi	r16, 0xFF	; 255
      e8:	1f 4f       	sbci	r17, 0xFF	; 255
  ang1 = dg>>8;
  ang2 = dg & 0x0ff;
}


void put_data(unsigned char id_num, unsigned char data_type, unsigned char data)
      ea:	28 e0       	ldi	r18, 0x08	; 8
      ec:	e2 2e       	mov	r14, r18
      ee:	f1 2c       	mov	r15, r1
      f0:	e0 0e       	add	r14, r16
      f2:	f1 1e       	adc	r15, r17

	CON_PORT = SEND;

	for(i=0;i<8;i++)
	{
		USART_Transmit(put[i]);
      f4:	f8 01       	movw	r30, r16
      f6:	81 91       	ld	r24, Z+
      f8:	8f 01       	movw	r16, r30
      fa:	8d d1       	rcall	.+794    	; 0x416 <USART_Transmit>
	}
	put[7] = ~put[7];

	CON_PORT = SEND;

	for(i=0;i<8;i++)
      fc:	0e 15       	cp	r16, r14
      fe:	1f 05       	cpc	r17, r15
     100:	c9 f7       	brne	.-14     	; 0xf4 <put_data+0x60>
	{
		USART_Transmit(put[i]);
	}
}
     102:	28 96       	adiw	r28, 0x08	; 8
     104:	0f b6       	in	r0, 0x3f	; 63
     106:	f8 94       	cli
     108:	de bf       	out	0x3e, r29	; 62
     10a:	0f be       	out	0x3f, r0	; 63
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	1f 91       	pop	r17
     114:	0f 91       	pop	r16
     116:	ff 90       	pop	r15
     118:	ef 90       	pop	r14
     11a:	08 95       	ret

0000011c <get_data>:

void get_data(unsigned char id_num, unsigned char data_type, unsigned char data, char *get)
{
     11c:	cf 92       	push	r12
     11e:	df 92       	push	r13
     120:	ef 92       	push	r14
     122:	ff 92       	push	r15
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	df 93       	push	r29
     12a:	cf 93       	push	r28
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	28 97       	sbiw	r28, 0x08	; 8
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
     13c:	79 01       	movw	r14, r18
	int i;
	char put[8];

	put[0] = 0xff;
     13e:	9f ef       	ldi	r25, 0xFF	; 255
     140:	99 83       	std	Y+1, r25	; 0x01
	put[1] = 0xff;
     142:	9a 83       	std	Y+2, r25	; 0x02
	put[2] = id_num;   //id
     144:	8b 83       	std	Y+3, r24	; 0x03
	put[3] = 0x04;     //length
     146:	84 e0       	ldi	r24, 0x04	; 4
     148:	8c 83       	std	Y+4, r24	; 0x04
	put[4] = 0x02;     //read data
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	8d 83       	std	Y+5, r24	; 0x05
	put[5] = data_type;     //data_type
     14e:	6e 83       	std	Y+6, r22	; 0x06
	put[6] = data;
     150:	4f 83       	std	Y+7, r20	; 0x07
	put[7] = 0x00;
     152:	18 86       	std	Y+8, r1	; 0x08
     154:	fe 01       	movw	r30, r28
     156:	33 96       	adiw	r30, 0x03	; 3
	{
		USART_Transmit(put[i]);
	}
}

void get_data(unsigned char id_num, unsigned char data_type, unsigned char data, char *get)
     158:	ce 01       	movw	r24, r28
     15a:	08 96       	adiw	r24, 0x08	; 8
	put[6] = data;
	put[7] = 0x00;

	for( i = 2; i<7; i++)
	{
		put[7] += put[i];
     15c:	21 91       	ld	r18, Z+
     15e:	38 85       	ldd	r19, Y+8	; 0x08
     160:	23 0f       	add	r18, r19
     162:	28 87       	std	Y+8, r18	; 0x08
	put[4] = 0x02;     //read data
	put[5] = data_type;     //data_type
	put[6] = data;
	put[7] = 0x00;

	for( i = 2; i<7; i++)
     164:	e8 17       	cp	r30, r24
     166:	f9 07       	cpc	r31, r25
     168:	c9 f7       	brne	.-14     	; 0x15c <get_data+0x40>
	{
		put[7] += put[i];
	}
	put[7] = ~put[7];
     16a:	20 95       	com	r18
     16c:	28 87       	std	Y+8, r18	; 0x08

	CON_PORT = SEND;
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	82 bb       	out	0x12, r24	; 18
     172:	8e 01       	movw	r16, r28
     174:	0f 5f       	subi	r16, 0xFF	; 255
     176:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		USART_Transmit(put[i]);
	}
}

void get_data(unsigned char id_num, unsigned char data_type, unsigned char data, char *get)
     178:	38 e0       	ldi	r19, 0x08	; 8
     17a:	c3 2e       	mov	r12, r19
     17c:	d1 2c       	mov	r13, r1
     17e:	c0 0e       	add	r12, r16
     180:	d1 1e       	adc	r13, r17

	CON_PORT = SEND;

	for(i=0;i<8;i++)
	{
		USART_Transmit(put[i]);
     182:	f8 01       	movw	r30, r16
     184:	81 91       	ld	r24, Z+
     186:	8f 01       	movw	r16, r30
     188:	46 d1       	rcall	.+652    	; 0x416 <USART_Transmit>
	}
	put[7] = ~put[7];

	CON_PORT = SEND;

	for(i=0;i<8;i++)
     18a:	0c 15       	cp	r16, r12
     18c:	1d 05       	cpc	r17, r13
     18e:	c9 f7       	brne	.-14     	; 0x182 <get_data+0x66>
	{
		USART_Transmit(put[i]);
	}

	CON_PORT = GET;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	82 bb       	out	0x12, r24	; 18

	for(i=0; i<8; i++)
     194:	00 e0       	ldi	r16, 0x00	; 0
     196:	10 e0       	ldi	r17, 0x00	; 0
	{
		*get = USART_Receive();
     198:	8a d1       	rcall	.+788    	; 0x4ae <USART_Receive>
     19a:	f7 01       	movw	r30, r14
     19c:	81 93       	st	Z+, r24
     19e:	7f 01       	movw	r14, r30
		USART_Transmit(put[i]);
	}

	CON_PORT = GET;

	for(i=0; i<8; i++)
     1a0:	0f 5f       	subi	r16, 0xFF	; 255
     1a2:	1f 4f       	sbci	r17, 0xFF	; 255
     1a4:	08 30       	cpi	r16, 0x08	; 8
     1a6:	11 05       	cpc	r17, r1
     1a8:	b9 f7       	brne	.-18     	; 0x198 <get_data+0x7c>
	{
		*get = USART_Receive();
		get++;
	}

}
     1aa:	28 96       	adiw	r28, 0x08	; 8
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	f8 94       	cli
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	0f be       	out	0x3f, r0	; 63
     1b4:	cd bf       	out	0x3d, r28	; 61
     1b6:	cf 91       	pop	r28
     1b8:	df 91       	pop	r29
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	df 90       	pop	r13
     1c4:	cf 90       	pop	r12
     1c6:	08 95       	ret

000001c8 <act_dynamixel>:

void act_dynamixel(char mot_id, int ang)
{
     1c8:	ef 92       	push	r14
     1ca:	ff 92       	push	r15
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	df 93       	push	r29
     1d2:	cf 93       	push	r28
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	2b 97       	sbiw	r28, 0x0b	; 11
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	08 2f       	mov	r16, r24
	int i;
	char act[11];
	dgree_to_hex(ang);
     1e6:	cb 01       	movw	r24, r22
     1e8:	3a df       	rcall	.-396    	; 0x5e <dgree_to_hex>
	act[0] = 0xff;
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	89 83       	std	Y+1, r24	; 0x01
	act[1] = 0xff;
     1ee:	8a 83       	std	Y+2, r24	; 0x02
	act[2] = mot_id;
     1f0:	0b 83       	std	Y+3, r16	; 0x03
	act[3] = 0x07;
     1f2:	87 e0       	ldi	r24, 0x07	; 7
     1f4:	8c 83       	std	Y+4, r24	; 0x04
	act[4] = 0x03;
     1f6:	83 e0       	ldi	r24, 0x03	; 3
     1f8:	8d 83       	std	Y+5, r24	; 0x05
	act[5] = goal_position_l;
     1fa:	8e e1       	ldi	r24, 0x1E	; 30
     1fc:	8e 83       	std	Y+6, r24	; 0x06
	act[6] = ang2;
     1fe:	80 91 0d 02 	lds	r24, 0x020D
     202:	8f 83       	std	Y+7, r24	; 0x07
	act[7] = ang1;
     204:	80 91 0b 02 	lds	r24, 0x020B
     208:	88 87       	std	Y+8, r24	; 0x08
	act[8] = 0x00;
     20a:	19 86       	std	Y+9, r1	; 0x09
	act[9] = 0x02;
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	8a 87       	std	Y+10, r24	; 0x0a
	act[10] = 0x00;
     210:	1b 86       	std	Y+11, r1	; 0x0b
     212:	fe 01       	movw	r30, r28
     214:	33 96       	adiw	r30, 0x03	; 3
		get++;
	}

}

void act_dynamixel(char mot_id, int ang)
     216:	ce 01       	movw	r24, r28
     218:	0b 96       	adiw	r24, 0x0b	; 11
	act[9] = 0x02;
	act[10] = 0x00;

	for( i = 2; i<10; i++)
	{
		act[10] += act[i];
     21a:	21 91       	ld	r18, Z+
     21c:	3b 85       	ldd	r19, Y+11	; 0x0b
     21e:	23 0f       	add	r18, r19
     220:	2b 87       	std	Y+11, r18	; 0x0b
	act[7] = ang1;
	act[8] = 0x00;
	act[9] = 0x02;
	act[10] = 0x00;

	for( i = 2; i<10; i++)
     222:	e8 17       	cp	r30, r24
     224:	f9 07       	cpc	r31, r25
     226:	c9 f7       	brne	.-14     	; 0x21a <act_dynamixel+0x52>
	{
		act[10] += act[i];
	}
	act[10] = ~act[10];
     228:	20 95       	com	r18
     22a:	2b 87       	std	Y+11, r18	; 0x0b
     22c:	8e 01       	movw	r16, r28
     22e:	0f 5f       	subi	r16, 0xFF	; 255
     230:	1f 4f       	sbci	r17, 0xFF	; 255
		get++;
	}

}

void act_dynamixel(char mot_id, int ang)
     232:	4b e0       	ldi	r20, 0x0B	; 11
     234:	e4 2e       	mov	r14, r20
     236:	f1 2c       	mov	r15, r1
     238:	e0 0e       	add	r14, r16
     23a:	f1 1e       	adc	r15, r17
	act[10] = ~act[10];


	for(i=0;i<11;i++)
	{
	 	USART_Transmit(act[i]);
     23c:	f8 01       	movw	r30, r16
     23e:	81 91       	ld	r24, Z+
     240:	8f 01       	movw	r16, r30
     242:	e9 d0       	rcall	.+466    	; 0x416 <USART_Transmit>
		act[10] += act[i];
	}
	act[10] = ~act[10];


	for(i=0;i<11;i++)
     244:	0e 15       	cp	r16, r14
     246:	1f 05       	cpc	r17, r15
     248:	c9 f7       	brne	.-14     	; 0x23c <act_dynamixel+0x74>
	{
	 	USART_Transmit(act[i]);
	}
}
     24a:	2b 96       	adiw	r28, 0x0b	; 11
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	cf 91       	pop	r28
     258:	df 91       	pop	r29
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	08 95       	ret

00000264 <reg_act>:

void reg_act(char mot_id, int ang)
{
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	2b 97       	sbiw	r28, 0x0b	; 11
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	08 2f       	mov	r16, r24
	int i;
	char act[11];
	dgree_to_hex(ang);
     282:	cb 01       	movw	r24, r22
     284:	ec de       	rcall	.-552    	; 0x5e <dgree_to_hex>
	act[0] = 0xff;
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	89 83       	std	Y+1, r24	; 0x01
	act[1] = 0xff;
     28a:	8a 83       	std	Y+2, r24	; 0x02
	act[2] = mot_id;
     28c:	0b 83       	std	Y+3, r16	; 0x03
	act[3] = 0x07;
     28e:	87 e0       	ldi	r24, 0x07	; 7
     290:	8c 83       	std	Y+4, r24	; 0x04
	act[4] = 0x04;
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	8d 83       	std	Y+5, r24	; 0x05
	act[5] = goal_position_l;
     296:	8e e1       	ldi	r24, 0x1E	; 30
     298:	8e 83       	std	Y+6, r24	; 0x06
	act[6] = ang2;
     29a:	80 91 0d 02 	lds	r24, 0x020D
     29e:	8f 83       	std	Y+7, r24	; 0x07
	act[7] = ang1;
     2a0:	80 91 0b 02 	lds	r24, 0x020B
     2a4:	88 87       	std	Y+8, r24	; 0x08
	act[8] = 0x60;
     2a6:	80 e6       	ldi	r24, 0x60	; 96
     2a8:	89 87       	std	Y+9, r24	; 0x09
	act[9] = 0x00;
     2aa:	1a 86       	std	Y+10, r1	; 0x0a
	act[10] = 0x00;
     2ac:	1b 86       	std	Y+11, r1	; 0x0b
     2ae:	fe 01       	movw	r30, r28
     2b0:	33 96       	adiw	r30, 0x03	; 3
	{
	 	USART_Transmit(act[i]);
	}
}

void reg_act(char mot_id, int ang)
     2b2:	ce 01       	movw	r24, r28
     2b4:	0b 96       	adiw	r24, 0x0b	; 11
	act[9] = 0x00;
	act[10] = 0x00;

	for( i = 2; i<10; i++)
	{
		act[10] += act[i];
     2b6:	21 91       	ld	r18, Z+
     2b8:	3b 85       	ldd	r19, Y+11	; 0x0b
     2ba:	23 0f       	add	r18, r19
     2bc:	2b 87       	std	Y+11, r18	; 0x0b
	act[7] = ang1;
	act[8] = 0x60;
	act[9] = 0x00;
	act[10] = 0x00;

	for( i = 2; i<10; i++)
     2be:	e8 17       	cp	r30, r24
     2c0:	f9 07       	cpc	r31, r25
     2c2:	c9 f7       	brne	.-14     	; 0x2b6 <reg_act+0x52>
	{
		act[10] += act[i];
	}
	act[10] = ~act[10];
     2c4:	20 95       	com	r18
     2c6:	2b 87       	std	Y+11, r18	; 0x0b
     2c8:	8e 01       	movw	r16, r28
     2ca:	0f 5f       	subi	r16, 0xFF	; 255
     2cc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
	 	USART_Transmit(act[i]);
	}
}

void reg_act(char mot_id, int ang)
     2ce:	5b e0       	ldi	r21, 0x0B	; 11
     2d0:	e5 2e       	mov	r14, r21
     2d2:	f1 2c       	mov	r15, r1
     2d4:	e0 0e       	add	r14, r16
     2d6:	f1 1e       	adc	r15, r17
	act[10] = ~act[10];


	for(i=0;i<11;i++)
	{
		USART_Transmit(act[i]);
     2d8:	f8 01       	movw	r30, r16
     2da:	81 91       	ld	r24, Z+
     2dc:	8f 01       	movw	r16, r30
     2de:	9b d0       	rcall	.+310    	; 0x416 <USART_Transmit>
		act[10] += act[i];
	}
	act[10] = ~act[10];


	for(i=0;i<11;i++)
     2e0:	0e 15       	cp	r16, r14
     2e2:	1f 05       	cpc	r17, r15
     2e4:	c9 f7       	brne	.-14     	; 0x2d8 <reg_act+0x74>
	{
		USART_Transmit(act[i]);
	}
}
     2e6:	2b 96       	adiw	r28, 0x0b	; 11
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	cf 91       	pop	r28
     2f4:	df 91       	pop	r29
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	ff 90       	pop	r15
     2fc:	ef 90       	pop	r14
     2fe:	08 95       	ret

00000300 <action>:

void action()
{
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	df 93       	push	r29
     30a:	cf 93       	push	r28
     30c:	00 d0       	rcall	.+0      	; 0x30e <action+0xe>
     30e:	00 d0       	rcall	.+0      	; 0x310 <action+0x10>
     310:	00 d0       	rcall	.+0      	; 0x312 <action+0x12>
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
	int i;
	char act[6];
	act[0] = 0xff;
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	89 83       	std	Y+1, r24	; 0x01
	act[1] = 0xff;
     31a:	8a 83       	std	Y+2, r24	; 0x02
	act[2] = 0xfe;
     31c:	8e ef       	ldi	r24, 0xFE	; 254
     31e:	8b 83       	std	Y+3, r24	; 0x03
	act[3] = 0x02;
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	8c 83       	std	Y+4, r24	; 0x04
	act[4] = 0x05;
     324:	85 e0       	ldi	r24, 0x05	; 5
     326:	8d 83       	std	Y+5, r24	; 0x05

	for( i = 2; i<5; i++)
	{
		act[5] += act[i];
	}
	act[5] = ~act[5];
     328:	8a ef       	ldi	r24, 0xFA	; 250
     32a:	8e 83       	std	Y+6, r24	; 0x06
     32c:	8e 01       	movw	r16, r28
     32e:	0f 5f       	subi	r16, 0xFF	; 255
     330:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		USART_Transmit(act[i]);
	}
}

void action()
     332:	67 e0       	ldi	r22, 0x07	; 7
     334:	e6 2e       	mov	r14, r22
     336:	f1 2c       	mov	r15, r1
     338:	ec 0e       	add	r14, r28
     33a:	fd 1e       	adc	r15, r29
	}
	act[5] = ~act[5];

	for(i=0;i<6;i++)
	{
		USART_Transmit(act[i]);
     33c:	f8 01       	movw	r30, r16
     33e:	81 91       	ld	r24, Z+
     340:	8f 01       	movw	r16, r30
     342:	69 d0       	rcall	.+210    	; 0x416 <USART_Transmit>
	{
		act[5] += act[i];
	}
	act[5] = ~act[5];

	for(i=0;i<6;i++)
     344:	0e 15       	cp	r16, r14
     346:	1f 05       	cpc	r17, r15
     348:	c9 f7       	brne	.-14     	; 0x33c <action+0x3c>
	{
		USART_Transmit(act[i]);
	}
} 
     34a:	26 96       	adiw	r28, 0x06	; 6
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	08 95       	ret

00000364 <ang>:

void ang()
{
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	df 93       	push	r29
     36e:	cf 93       	push	r28
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	29 97       	sbiw	r28, 0x09	; 9
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	f8 94       	cli
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	cd bf       	out	0x3d, r28	; 61
	int i;
	char act[9];

	act[0] = 0xff;
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	89 83       	std	Y+1, r24	; 0x01
	act[1] = 0xff;
     384:	8a 83       	std	Y+2, r24	; 0x02
	act[2] = 0xfe;
     386:	8e ef       	ldi	r24, 0xFE	; 254
     388:	8b 83       	std	Y+3, r24	; 0x03
	act[3] = 0x05;
     38a:	85 e0       	ldi	r24, 0x05	; 5
     38c:	8c 83       	std	Y+4, r24	; 0x04
	act[4] = 0x03;
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	8d 83       	std	Y+5, r24	; 0x05
	act[5] = cw_angle_limit_l;
     392:	86 e0       	ldi	r24, 0x06	; 6
     394:	8e 83       	std	Y+6, r24	; 0x06
	act[6] = 0x00;
     396:	1f 82       	std	Y+7, r1	; 0x07
	act[7] = 0x00;
     398:	18 86       	std	Y+8, r1	; 0x08
	act[8] = 0x00;
     39a:	19 86       	std	Y+9, r1	; 0x09
     39c:	fe 01       	movw	r30, r28
     39e:	33 96       	adiw	r30, 0x03	; 3
	{
		USART_Transmit(act[i]);
	}
} 

void ang()
     3a0:	ce 01       	movw	r24, r28
     3a2:	09 96       	adiw	r24, 0x09	; 9
	act[7] = 0x00;
	act[8] = 0x00;

	for( i = 2; i<8; i++)
	{
		act[8] += act[i];
     3a4:	21 91       	ld	r18, Z+
     3a6:	39 85       	ldd	r19, Y+9	; 0x09
     3a8:	23 0f       	add	r18, r19
     3aa:	29 87       	std	Y+9, r18	; 0x09
	act[5] = cw_angle_limit_l;
	act[6] = 0x00;
	act[7] = 0x00;
	act[8] = 0x00;

	for( i = 2; i<8; i++)
     3ac:	e8 17       	cp	r30, r24
     3ae:	f9 07       	cpc	r31, r25
     3b0:	c9 f7       	brne	.-14     	; 0x3a4 <ang+0x40>
	{
		act[8] += act[i];
	}
	act[8] = ~act[8];
     3b2:	20 95       	com	r18
     3b4:	29 87       	std	Y+9, r18	; 0x09
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5f       	subi	r16, 0xFF	; 255
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		USART_Transmit(act[i]);
	}
} 

void ang()
     3bc:	79 e0       	ldi	r23, 0x09	; 9
     3be:	e7 2e       	mov	r14, r23
     3c0:	f1 2c       	mov	r15, r1
     3c2:	e0 0e       	add	r14, r16
     3c4:	f1 1e       	adc	r15, r17
	}
	act[8] = ~act[8];

	for(i=0;i<9;i++)
	{
		USART_Transmit(act[i]);
     3c6:	f8 01       	movw	r30, r16
     3c8:	81 91       	ld	r24, Z+
     3ca:	8f 01       	movw	r16, r30
     3cc:	24 d0       	rcall	.+72     	; 0x416 <USART_Transmit>
	{
		act[8] += act[i];
	}
	act[8] = ~act[8];

	for(i=0;i<9;i++)
     3ce:	0e 15       	cp	r16, r14
     3d0:	1f 05       	cpc	r17, r15
     3d2:	c9 f7       	brne	.-14     	; 0x3c6 <ang+0x62>
	{
		act[8] += act[i];
	}
	act[8] = ~act[8];

}
     3d4:	29 96       	adiw	r28, 0x09	; 9
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	cf 91       	pop	r28
     3e2:	df 91       	pop	r29
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	08 95       	ret

000003ee <setup>:
#include "test.h"

void setup()
{
	
	GPIO_init();
     3ee:	ab d1       	rcall	.+854    	; 0x746 <GPIO_init>
	USART_Init(115200);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	81 ee       	ldi	r24, 0xE1	; 225
     3f6:	97 e4       	ldi	r25, 0x47	; 71
     3f8:	5e d0       	rcall	.+188    	; 0x4b6 <USART_Init>
	
	SYSTEM_Log("START");
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <setup+0xe>
     3fc:	80 e6       	ldi	r24, 0x60	; 96
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	ed b7       	in	r30, 0x3d	; 61
     402:	fe b7       	in	r31, 0x3e	; 62
     404:	92 83       	std	Z+2, r25	; 0x02
     406:	81 83       	std	Z+1, r24	; 0x01
     408:	86 d0       	rcall	.+268    	; 0x516 <SYSTEM_Log>
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
}
     40e:	08 95       	ret

00000410 <loop>:
{
//	MOTOR_Move_With_RxTx_Control(1, 300, 200 );
//	_delay_ms(16000); // 1s, this is complier error.
//	MOTOR_Move_With_RxTx_Control(1, 500, 200 );
//	_delay_ms(16000);
}
     410:	08 95       	ret

00000412 <main>:



int main(){

	setup();
     412:	ed df       	rcall	.-38     	; 0x3ee <setup>
     414:	ff cf       	rjmp	.-2      	; 0x414 <main+0x2>

00000416 <USART_Transmit>:
#include "usart.h"

void USART_Transmit(volatile unsigned char data_)
{
     416:	df 93       	push	r29
     418:	cf 93       	push	r28
     41a:	0f 92       	push	r0
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	89 83       	std	Y+1, r24	; 0x01
	while((UCSRA&0x20)==0); 
     422:	5d 9b       	sbis	0x0b, 5	; 11
     424:	fe cf       	rjmp	.-4      	; 0x422 <USART_Transmit+0xc>
	UDR = (data_); 
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	8c b9       	out	0x0c, r24	; 12
}
     42a:	0f 90       	pop	r0
     42c:	cf 91       	pop	r28
     42e:	df 91       	pop	r29
     430:	08 95       	ret

00000432 <USART_Print>:

int USART_Print(char * pFormat, ...)
{
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	c1 58       	subi	r28, 0x81	; 129
     442:	d0 40       	sbci	r29, 0x00	; 0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	fe 01       	movw	r30, r28
     450:	e7 57       	subi	r30, 0x77	; 119
     452:	ff 4f       	sbci	r31, 0xFF	; 255
     454:	61 91       	ld	r22, Z+
     456:	71 91       	ld	r23, Z+
    int nRst;
    char aBuff[128] = {0, }, * p;
     458:	8e 01       	movw	r16, r28
     45a:	0f 5f       	subi	r16, 0xFF	; 255
     45c:	1f 4f       	sbci	r17, 0xFF	; 255
     45e:	80 e8       	ldi	r24, 0x80	; 128
     460:	d8 01       	movw	r26, r16
     462:	1d 92       	st	X+, r1
     464:	8a 95       	dec	r24
     466:	e9 f7       	brne	.-6      	; 0x462 <__stack+0x3>
    va_list ap;
    va_start(ap, pFormat);
    nRst = vsprintf(aBuff, pFormat, ap);
     468:	c8 01       	movw	r24, r16
     46a:	af 01       	movw	r20, r30
     46c:	bd d5       	rcall	.+2938   	; 0xfe8 <vsprintf>
     46e:	f8 2e       	mov	r15, r24
    va_end(ap);
    for(p = aBuff; *p != '\0'; p++)
     470:	0b c0       	rjmp	.+22     	; 0x488 <__stack+0x29>
    USART_Transmit(*p);
     472:	cf 57       	subi	r28, 0x7F	; 127
     474:	df 4f       	sbci	r29, 0xFF	; 255
     476:	98 83       	st	Y, r25
     478:	c1 58       	subi	r28, 0x81	; 129
     47a:	d0 40       	sbci	r29, 0x00	; 0
     47c:	cc df       	rcall	.-104    	; 0x416 <USART_Transmit>
     47e:	cf 57       	subi	r28, 0x7F	; 127
     480:	df 4f       	sbci	r29, 0xFF	; 255
     482:	98 81       	ld	r25, Y
     484:	c1 58       	subi	r28, 0x81	; 129
     486:	d0 40       	sbci	r29, 0x00	; 0
    char aBuff[128] = {0, }, * p;
    va_list ap;
    va_start(ap, pFormat);
    nRst = vsprintf(aBuff, pFormat, ap);
    va_end(ap);
    for(p = aBuff; *p != '\0'; p++)
     488:	f8 01       	movw	r30, r16
     48a:	81 91       	ld	r24, Z+
     48c:	8f 01       	movw	r16, r30
     48e:	88 23       	and	r24, r24
     490:	81 f7       	brne	.-32     	; 0x472 <__stack+0x13>
    USART_Transmit(*p);
    return nRst;
}
     492:	8f 2d       	mov	r24, r15
     494:	cf 57       	subi	r28, 0x7F	; 127
     496:	df 4f       	sbci	r29, 0xFF	; 255
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	cf 91       	pop	r28
     4a4:	df 91       	pop	r29
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	08 95       	ret

000004ae <USART_Receive>:


char USART_Receive(void)

{
	while(!(UCSRA&0x80));
     4ae:	5f 9b       	sbis	0x0b, 7	; 11
     4b0:	fe cf       	rjmp	.-4      	; 0x4ae <USART_Receive>
	return UDR;
     4b2:	8c b1       	in	r24, 0x0c	; 12
}
     4b4:	08 95       	ret

000004b6 <USART_Init>:

void USART_Init(double BPS)
{
     4b6:	ef 92       	push	r14
     4b8:	ff 92       	push	r15
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	7b 01       	movw	r14, r22
     4c0:	8c 01       	movw	r16, r24

    UCSRA = 0x00;
     4c2:	1b b8       	out	0x0b, r1	; 11
    UCSRB = 0xd8;
     4c4:	88 ed       	ldi	r24, 0xD8	; 216
     4c6:	8a b9       	out	0x0a, r24	; 10
	if( BPS == 9600){
     4c8:	c8 01       	movw	r24, r16
     4ca:	b7 01       	movw	r22, r14
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	46 e1       	ldi	r20, 0x16	; 22
     4d2:	56 e4       	ldi	r21, 0x46	; 70
     4d4:	93 d2       	rcall	.+1318   	; 0x9fc <__eqsf2>
     4d6:	88 23       	and	r24, r24
     4d8:	21 f4       	brne	.+8      	; 0x4e2 <USART_Init+0x2c>
	    
		UCSRC=0x86;
     4da:	86 e8       	ldi	r24, 0x86	; 134
     4dc:	80 bd       	out	0x20, r24	; 32
		UBRRL=103;
     4de:	87 e6       	ldi	r24, 0x67	; 103
     4e0:	11 c0       	rjmp	.+34     	; 0x504 <USART_Init+0x4e>
	}
	else if( BPS == 57600){
     4e2:	c8 01       	movw	r24, r16
     4e4:	b7 01       	movw	r22, r14
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	41 e6       	ldi	r20, 0x61	; 97
     4ec:	57 e4       	ldi	r21, 0x47	; 71
     4ee:	86 d2       	rcall	.+1292   	; 0x9fc <__eqsf2>
     4f0:	88 23       	and	r24, r24
     4f2:	21 f4       	brne	.+8      	; 0x4fc <USART_Init+0x46>
		UCSRC=0x86;
     4f4:	86 e8       	ldi	r24, 0x86	; 134
     4f6:	80 bd       	out	0x20, r24	; 32
//		UBRRH = 0;
		UBRRL=3;
     4f8:	83 e0       	ldi	r24, 0x03	; 3
     4fa:	04 c0       	rjmp	.+8      	; 0x504 <USART_Init+0x4e>
	}
	else{
		UCSRC = 0x06;
     4fc:	86 e0       	ldi	r24, 0x06	; 6
     4fe:	80 bd       	out	0x20, r24	; 32
		UBRRH = 0;
     500:	10 bc       	out	0x20, r1	; 32
	    UBRRL = 8;
     502:	88 e0       	ldi	r24, 0x08	; 8
     504:	89 b9       	out	0x09, r24	; 9
	}

	SREG |= 0x80;
     506:	8f b7       	in	r24, 0x3f	; 63
     508:	80 68       	ori	r24, 0x80	; 128
     50a:	8f bf       	out	0x3f, r24	; 63

}
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	08 95       	ret

00000516 <SYSTEM_Log>:
void SYSTEM_Log(char * pFormat, ...){
     516:	df 93       	push	r29
     518:	cf 93       	push	r28
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
	USART_Print(pFormat);
     51e:	00 d0       	rcall	.+0      	; 0x520 <SYSTEM_Log+0xa>
     520:	8d 81       	ldd	r24, Y+5	; 0x05
     522:	9e 81       	ldd	r25, Y+6	; 0x06
     524:	ed b7       	in	r30, 0x3d	; 61
     526:	fe b7       	in	r31, 0x3e	; 62
     528:	92 83       	std	Z+2, r25	; 0x02
     52a:	81 83       	std	Z+1, r24	; 0x01
     52c:	82 df       	rcall	.-252    	; 0x432 <USART_Print>
	USART_Print("\r\n");
     52e:	86 e6       	ldi	r24, 0x66	; 102
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	ed b7       	in	r30, 0x3d	; 61
     534:	fe b7       	in	r31, 0x3e	; 62
     536:	92 83       	std	Z+2, r25	; 0x02
     538:	81 83       	std	Z+1, r24	; 0x01
     53a:	7b df       	rcall	.-266    	; 0x432 <USART_Print>
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0

}
     540:	cf 91       	pop	r28
     542:	df 91       	pop	r29
     544:	08 95       	ret

00000546 <TxD>:
unsigned int Position[20];
volatile unsigned char data100=0, data10=0, data1=0;


void TxD(unsigned char MoterID ,unsigned char Length)
{
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	00 d0       	rcall	.+0      	; 0x550 <TxD+0xa>
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned char Counter; //For Counter
    volatile unsigned char CheckSum=2; //Used CheckSum >> ~(ID + Length + Parameters)
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	9a 83       	std	Y+2, r25	; 0x02

    Parameter[2]=MoterID;
     558:	80 93 6b 00 	sts	0x006B, r24
    Parameter[3]=Length;
     55c:	60 93 6c 00 	sts	0x006C, r22
    for(Counter=0; Counter < (Length+3); Counter++) 
     560:	19 82       	std	Y+1, r1	; 0x01
     562:	06 2f       	mov	r16, r22
     564:	10 e0       	ldi	r17, 0x00	; 0
     566:	0e 5f       	subi	r16, 0xFE	; 254
     568:	1f 4f       	sbci	r17, 0xFF	; 255
     56a:	11 c0       	rjmp	.+34     	; 0x58e <TxD+0x48>
    {
            USART_Transmit(Parameter[ Counter ]);
     56c:	e9 81       	ldd	r30, Y+1	; 0x01
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	e7 59       	subi	r30, 0x97	; 151
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	80 81       	ld	r24, Z
     576:	4f df       	rcall	.-354    	; 0x416 <USART_Transmit>
            CheckSum += Parameter[ Counter ];
     578:	9a 81       	ldd	r25, Y+2	; 0x02
     57a:	e9 81       	ldd	r30, Y+1	; 0x01
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	e7 59       	subi	r30, 0x97	; 151
     580:	ff 4f       	sbci	r31, 0xFF	; 255
     582:	80 81       	ld	r24, Z
     584:	89 0f       	add	r24, r25
     586:	8a 83       	std	Y+2, r24	; 0x02
    volatile unsigned char Counter; //For Counter
    volatile unsigned char CheckSum=2; //Used CheckSum >> ~(ID + Length + Parameters)

    Parameter[2]=MoterID;
    Parameter[3]=Length;
    for(Counter=0; Counter < (Length+3); Counter++) 
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	89 83       	std	Y+1, r24	; 0x01
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	08 17       	cp	r16, r24
     594:	19 07       	cpc	r17, r25
     596:	54 f7       	brge	.-44     	; 0x56c <TxD+0x26>
    {
            USART_Transmit(Parameter[ Counter ]);
            CheckSum += Parameter[ Counter ];
    }
    USART_Transmit(~(CheckSum));
     598:	8a 81       	ldd	r24, Y+2	; 0x02
     59a:	80 95       	com	r24
     59c:	3c df       	rcall	.-392    	; 0x416 <USART_Transmit>
}
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	cf 91       	pop	r28
     5a4:	df 91       	pop	r29
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	08 95       	ret

000005ac <MOTOR_Move>:

void MOTOR_Move(unsigned char MoterID ,unsigned int Position,unsigned int Speed)
{
     5ac:	df 93       	push	r29
     5ae:	cf 93       	push	r28
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <MOTOR_Move+0x6>
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned char Counter; //For Counter
    volatile unsigned char CheckSum=2; //Used CheckSum >> ~(ID + Length + Parameters)
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	9a 83       	std	Y+2, r25	; 0x02
    CheckSum=2;
     5ba:	9a 83       	std	Y+2, r25	; 0x02
    Parameter[2]=MoterID;
     5bc:	80 93 6b 00 	sts	0x006B, r24
    Parameter[3]=7;
     5c0:	87 e0       	ldi	r24, 0x07	; 7
     5c2:	80 93 6c 00 	sts	0x006C, r24
    Parameter[4]=INST_WRITE;
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	80 93 6d 00 	sts	0x006D, r24
    Parameter[5]=P_GOAL_POSITION_L ;
     5cc:	8e e1       	ldi	r24, 0x1E	; 30
     5ce:	80 93 6e 00 	sts	0x006E, r24
    Parameter[6]=Position & 0xff ;//Position_L
     5d2:	60 93 6f 00 	sts	0x006F, r22
    Parameter[7]=Position >> 8 ;//Position_H
     5d6:	70 93 70 00 	sts	0x0070, r23
   // Parameter[8]=Speed& 0xff ;//Position_L
 //   Parameter[9]=Speed >> 8 ;//Position_H
  	Parameter[8]=Speed ;//Speed_L
     5da:	40 93 71 00 	sts	0x0071, r20
 	Parameter[9]=Speed>> 8;//Speed_H
     5de:	50 93 72 00 	sts	0x0072, r21
    for(Counter=0; Counter < (10); Counter++) 
     5e2:	19 82       	std	Y+1, r1	; 0x01
     5e4:	11 c0       	rjmp	.+34     	; 0x608 <MOTOR_Move+0x5c>
    {
            USART_Transmit(Parameter[ Counter ]);
     5e6:	e9 81       	ldd	r30, Y+1	; 0x01
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	e7 59       	subi	r30, 0x97	; 151
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 81       	ld	r24, Z
     5f0:	12 df       	rcall	.-476    	; 0x416 <USART_Transmit>
 	           CheckSum += Parameter[ Counter ];
     5f2:	9a 81       	ldd	r25, Y+2	; 0x02
     5f4:	e9 81       	ldd	r30, Y+1	; 0x01
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	e7 59       	subi	r30, 0x97	; 151
     5fa:	ff 4f       	sbci	r31, 0xFF	; 255
     5fc:	80 81       	ld	r24, Z
     5fe:	89 0f       	add	r24, r25
     600:	8a 83       	std	Y+2, r24	; 0x02
    Parameter[7]=Position >> 8 ;//Position_H
   // Parameter[8]=Speed& 0xff ;//Position_L
 //   Parameter[9]=Speed >> 8 ;//Position_H
  	Parameter[8]=Speed ;//Speed_L
 	Parameter[9]=Speed>> 8;//Speed_H
    for(Counter=0; Counter < (10); Counter++) 
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	8f 5f       	subi	r24, 0xFF	; 255
     606:	89 83       	std	Y+1, r24	; 0x01
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	8a 30       	cpi	r24, 0x0A	; 10
     60c:	60 f3       	brcs	.-40     	; 0x5e6 <MOTOR_Move+0x3a>
    {
            USART_Transmit(Parameter[ Counter ]);
 	           CheckSum += Parameter[ Counter ];
    }
    USART_Transmit(~(CheckSum));
     60e:	8a 81       	ldd	r24, Y+2	; 0x02
     610:	80 95       	com	r24
     612:	01 df       	rcall	.-510    	; 0x416 <USART_Transmit>
}
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	cf 91       	pop	r28
     61a:	df 91       	pop	r29
     61c:	08 95       	ret

0000061e <Multi_Move0>:

void Multi_Move0(unsigned char N)
{
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	00 d0       	rcall	.+0      	; 0x628 <Multi_Move0+0xa>
     628:	0f 92       	push	r0
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned char Counter; //For Counter
    volatile unsigned char CheckSum=2; //Used CheckSum >> ~(ID + Length + Parameters)
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	9a 83       	std	Y+2, r25	; 0x02
    volatile unsigned char i=0;
     632:	1b 82       	std	Y+3, r1	; 0x03
    CheckSum=2;
     634:	9a 83       	std	Y+2, r25	; 0x02
    Parameter[2]=0xfe;
     636:	9e ef       	ldi	r25, 0xFE	; 254
     638:	90 93 6b 00 	sts	0x006B, r25
    Parameter[3]=((4 + 1)*N + 4);// L>> datalength(move >>4) N >> nimber of moter
     63c:	98 2f       	mov	r25, r24
     63e:	99 0f       	add	r25, r25
     640:	99 0f       	add	r25, r25
     642:	98 0f       	add	r25, r24
     644:	9c 5f       	subi	r25, 0xFC	; 252
     646:	90 93 6c 00 	sts	0x006C, r25
    Parameter[4]=INST_SYNC_WRITE;
     64a:	93 e8       	ldi	r25, 0x83	; 131
     64c:	90 93 6d 00 	sts	0x006D, r25
    Parameter[5]=P_GOAL_POSITION_L ;
     650:	9e e1       	ldi	r25, 0x1E	; 30
     652:	90 93 6e 00 	sts	0x006E, r25
    Parameter[6]=4;//length
     656:	94 e0       	ldi	r25, 0x04	; 4
     658:	90 93 6f 00 	sts	0x006F, r25
    for(i=0;i<N ;i++) {
     65c:	1b 82       	std	Y+3, r1	; 0x03
        Parameter[i*5+7]=MoterID[i];
     65e:	95 e0       	ldi	r25, 0x05	; 5
        Parameter[i*5+8]=Position[i] & 0xff ;//Position_L
        Parameter[i*5+9]=Position[i] >> 8 ;//Position_H
        Parameter[i*5+10]=0xf0 ;//Speed_L
     660:	40 ef       	ldi	r20, 0xF0	; 240
        Parameter[i*5+11]=2;//Speed_H  6+(i*N)
     662:	32 e0       	ldi	r19, 0x02	; 2
    Parameter[2]=0xfe;
    Parameter[3]=((4 + 1)*N + 4);// L>> datalength(move >>4) N >> nimber of moter
    Parameter[4]=INST_SYNC_WRITE;
    Parameter[5]=P_GOAL_POSITION_L ;
    Parameter[6]=4;//length
    for(i=0;i<N ;i++) {
     664:	39 c0       	rjmp	.+114    	; 0x6d8 <Multi_Move0+0xba>
        Parameter[i*5+7]=MoterID[i];
     666:	eb 81       	ldd	r30, Y+3	; 0x03
     668:	e9 9f       	mul	r30, r25
     66a:	f0 01       	movw	r30, r0
     66c:	11 24       	eor	r1, r1
     66e:	ab 81       	ldd	r26, Y+3	; 0x03
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	a9 5c       	subi	r26, 0xC9	; 201
     674:	bd 4f       	sbci	r27, 0xFD	; 253
     676:	2c 91       	ld	r18, X
     678:	e0 59       	subi	r30, 0x90	; 144
     67a:	ff 4f       	sbci	r31, 0xFF	; 255
     67c:	20 83       	st	Z, r18
        Parameter[i*5+8]=Position[i] & 0xff ;//Position_L
     67e:	ab 81       	ldd	r26, Y+3	; 0x03
     680:	a9 9f       	mul	r26, r25
     682:	d0 01       	movw	r26, r0
     684:	11 24       	eor	r1, r1
     686:	eb 81       	ldd	r30, Y+3	; 0x03
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	e1 5f       	subi	r30, 0xF1	; 241
     690:	fd 4f       	sbci	r31, 0xFD	; 253
     692:	20 81       	ld	r18, Z
     694:	af 58       	subi	r26, 0x8F	; 143
     696:	bf 4f       	sbci	r27, 0xFF	; 255
     698:	2c 93       	st	X, r18
        Parameter[i*5+9]=Position[i] >> 8 ;//Position_H
     69a:	ab 81       	ldd	r26, Y+3	; 0x03
     69c:	a9 9f       	mul	r26, r25
     69e:	d0 01       	movw	r26, r0
     6a0:	11 24       	eor	r1, r1
     6a2:	eb 81       	ldd	r30, Y+3	; 0x03
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	e1 5f       	subi	r30, 0xF1	; 241
     6ac:	fd 4f       	sbci	r31, 0xFD	; 253
     6ae:	21 81       	ldd	r18, Z+1	; 0x01
     6b0:	ae 58       	subi	r26, 0x8E	; 142
     6b2:	bf 4f       	sbci	r27, 0xFF	; 255
     6b4:	2c 93       	st	X, r18
        Parameter[i*5+10]=0xf0 ;//Speed_L
     6b6:	eb 81       	ldd	r30, Y+3	; 0x03
     6b8:	e9 9f       	mul	r30, r25
     6ba:	f0 01       	movw	r30, r0
     6bc:	11 24       	eor	r1, r1
     6be:	ed 58       	subi	r30, 0x8D	; 141
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	40 83       	st	Z, r20
        Parameter[i*5+11]=2;//Speed_H  6+(i*N)
     6c4:	eb 81       	ldd	r30, Y+3	; 0x03
     6c6:	e9 9f       	mul	r30, r25
     6c8:	f0 01       	movw	r30, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	ec 58       	subi	r30, 0x8C	; 140
     6ce:	ff 4f       	sbci	r31, 0xFF	; 255
     6d0:	30 83       	st	Z, r19
    Parameter[2]=0xfe;
    Parameter[3]=((4 + 1)*N + 4);// L>> datalength(move >>4) N >> nimber of moter
    Parameter[4]=INST_SYNC_WRITE;
    Parameter[5]=P_GOAL_POSITION_L ;
    Parameter[6]=4;//length
    for(i=0;i<N ;i++) {
     6d2:	2b 81       	ldd	r18, Y+3	; 0x03
     6d4:	2f 5f       	subi	r18, 0xFF	; 255
     6d6:	2b 83       	std	Y+3, r18	; 0x03
     6d8:	2b 81       	ldd	r18, Y+3	; 0x03
     6da:	28 17       	cp	r18, r24
     6dc:	20 f2       	brcs	.-120    	; 0x666 <Multi_Move0+0x48>
        Parameter[i*5+8]=Position[i] & 0xff ;//Position_L
        Parameter[i*5+9]=Position[i] >> 8 ;//Position_H
        Parameter[i*5+10]=0xf0 ;//Speed_L
        Parameter[i*5+11]=2;//Speed_H  6+(i*N)
    }
    for(Counter=0; Counter < 7+(5*N) ; Counter++) 
     6de:	19 82       	std	Y+1, r1	; 0x01
     6e0:	05 e0       	ldi	r16, 0x05	; 5
     6e2:	80 9f       	mul	r24, r16
     6e4:	80 01       	movw	r16, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	0a 5f       	subi	r16, 0xFA	; 250
     6ea:	1f 4f       	sbci	r17, 0xFF	; 255
     6ec:	11 c0       	rjmp	.+34     	; 0x710 <Multi_Move0+0xf2>
    {
            USART_Transmit(Parameter[ Counter ]);
     6ee:	e9 81       	ldd	r30, Y+1	; 0x01
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	e7 59       	subi	r30, 0x97	; 151
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	80 81       	ld	r24, Z
     6f8:	8e de       	rcall	.-740    	; 0x416 <USART_Transmit>
            CheckSum += Parameter[ Counter ];
     6fa:	9a 81       	ldd	r25, Y+2	; 0x02
     6fc:	e9 81       	ldd	r30, Y+1	; 0x01
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	e7 59       	subi	r30, 0x97	; 151
     702:	ff 4f       	sbci	r31, 0xFF	; 255
     704:	80 81       	ld	r24, Z
     706:	89 0f       	add	r24, r25
     708:	8a 83       	std	Y+2, r24	; 0x02
        Parameter[i*5+8]=Position[i] & 0xff ;//Position_L
        Parameter[i*5+9]=Position[i] >> 8 ;//Position_H
        Parameter[i*5+10]=0xf0 ;//Speed_L
        Parameter[i*5+11]=2;//Speed_H  6+(i*N)
    }
    for(Counter=0; Counter < 7+(5*N) ; Counter++) 
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	08 17       	cp	r16, r24
     716:	19 07       	cpc	r17, r25
     718:	54 f7       	brge	.-44     	; 0x6ee <Multi_Move0+0xd0>
    {
            USART_Transmit(Parameter[ Counter ]);
            CheckSum += Parameter[ Counter ];
    }
    USART_Transmit(~(CheckSum));
     71a:	8a 81       	ldd	r24, Y+2	; 0x02
     71c:	80 95       	com	r24
     71e:	7b de       	rcall	.-778    	; 0x416 <USART_Transmit>
}  
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	cf 91       	pop	r28
     728:	df 91       	pop	r29
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	08 95       	ret

00000730 <MOTOR_Move_With_RxTx_Control>:
void MOTOR_Move_With_RxTx_Control(unsigned char MoterID ,unsigned int Position,unsigned int Speed){
	PORTD = (1<<PD2);
     730:	94 e0       	ldi	r25, 0x04	; 4
     732:	92 bb       	out	0x12, r25	; 18
	MOTOR_Move(MoterID, Position, Speed );
     734:	3b df       	rcall	.-394    	; 0x5ac <MOTOR_Move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     736:	8d ee       	ldi	r24, 0xED	; 237
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <MOTOR_Move_With_RxTx_Control+0xa>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <MOTOR_Move_With_RxTx_Control+0x10>
     740:	00 00       	nop
	_delay_ms(3);
	PORTD = (0<<PD2);
     742:	12 ba       	out	0x12, r1	; 18
}
     744:	08 95       	ret

00000746 <GPIO_init>:
#include "gpio.h"
#include <avr/io.h>

void GPIO_init(){
	DDRC = (1<<DDC1); // set blue led output mode.
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	84 bb       	out	0x14, r24	; 20
	PORTC = (0<<PC1); // blue led on 
     74a:	15 ba       	out	0x15, r1	; 21
	DDRD = (1<<DDD2) | (1<<DDD3) | (1<<DDD4);
     74c:	8c e1       	ldi	r24, 0x1C	; 28
     74e:	81 bb       	out	0x11, r24	; 17
	PORTD = (1<<PD2) | (1<<PD3) | (1<<PD4);
     750:	82 bb       	out	0x12, r24	; 18
}
     752:	08 95       	ret

00000754 <__vector_11>:
#include "interrupt.h"
#include "usart.h"
#include "ax-12.h"

SIGNAL(SIG_UART_RECV){// usart receive interrupt
     754:	1f 92       	push	r1
     756:	0f 92       	push	r0
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	0f 92       	push	r0
     75c:	11 24       	eor	r1, r1
     75e:	2f 93       	push	r18
     760:	3f 93       	push	r19
     762:	4f 93       	push	r20
     764:	5f 93       	push	r21
     766:	6f 93       	push	r22
     768:	7f 93       	push	r23
     76a:	8f 93       	push	r24
     76c:	9f 93       	push	r25
     76e:	af 93       	push	r26
     770:	bf 93       	push	r27
     772:	ef 93       	push	r30
     774:	ff 93       	push	r31

	PORTC = ~PORTC; // if usart data receive led is blink
     776:	85 b3       	in	r24, 0x15	; 21
     778:	80 95       	com	r24
     77a:	85 bb       	out	0x15, r24	; 21
	char buffer = UDR;
     77c:	8c b1       	in	r24, 0x0c	; 12
	if (buffer ==  'w'){
     77e:	87 37       	cpi	r24, 0x77	; 119
     780:	21 f4       	brne	.+8      	; 0x78a <__vector_11+0x36>
		SYSTEM_Log("front");
     782:	00 d0       	rcall	.+0      	; 0x784 <__vector_11+0x30>
     784:	89 ee       	ldi	r24, 0xE9	; 233
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	05 c0       	rjmp	.+10     	; 0x794 <__vector_11+0x40>
	}
	else if(buffer == 's'){
     78a:	83 37       	cpi	r24, 0x73	; 115
     78c:	59 f4       	brne	.+22     	; 0x7a4 <__vector_11+0x50>
		SYSTEM_Log("back");
     78e:	00 d0       	rcall	.+0      	; 0x790 <__vector_11+0x3c>
     790:	8f ee       	ldi	r24, 0xEF	; 239
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	ed b7       	in	r30, 0x3d	; 61
     796:	fe b7       	in	r31, 0x3e	; 62
     798:	92 83       	std	Z+2, r25	; 0x02
     79a:	81 83       	std	Z+1, r24	; 0x01
     79c:	bc de       	rcall	.-648    	; 0x516 <SYSTEM_Log>
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	1c c0       	rjmp	.+56     	; 0x7dc <__vector_11+0x88>
	}
	else if(buffer == 'a'){
     7a4:	81 36       	cpi	r24, 0x61	; 97
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <__vector_11+0x5c>
		SYSTEM_Log("left");
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <__vector_11+0x56>
     7aa:	84 ef       	ldi	r24, 0xF4	; 244
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	f2 cf       	rjmp	.-28     	; 0x794 <__vector_11+0x40>
	}
	else if(buffer == 'd'){
     7b0:	84 36       	cpi	r24, 0x64	; 100
     7b2:	21 f4       	brne	.+8      	; 0x7bc <__vector_11+0x68>
		SYSTEM_Log("right");
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <__vector_11+0x62>
     7b6:	89 ef       	ldi	r24, 0xF9	; 249
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	ec cf       	rjmp	.-40     	; 0x794 <__vector_11+0x40>
	}
	else if(buffer == 'z'){
     7bc:	8a 37       	cpi	r24, 0x7A	; 122
     7be:	29 f4       	brne	.+10     	; 0x7ca <__vector_11+0x76>
		int i;
	//	for (i =0; i < 254; i ++){
		
			MOTOR_Move_With_RxTx_Control(254, 500, 200 );
     7c0:	8e ef       	ldi	r24, 0xFE	; 254
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	64 ef       	ldi	r22, 0xF4	; 244
     7c6:	71 e0       	ldi	r23, 0x01	; 1
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <__vector_11+0x82>
	//	}
	}
	else if(buffer == 'x'){
     7ca:	88 37       	cpi	r24, 0x78	; 120
     7cc:	39 f4       	brne	.+14     	; 0x7dc <__vector_11+0x88>
		int i;
	//	for (i =0; i < 254; i ++){
			MOTOR_Move_With_RxTx_Control(254, 300, 200 );
     7ce:	8e ef       	ldi	r24, 0xFE	; 254
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	6c e2       	ldi	r22, 0x2C	; 44
     7d4:	71 e0       	ldi	r23, 0x01	; 1
     7d6:	48 ec       	ldi	r20, 0xC8	; 200
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	aa df       	rcall	.-172    	; 0x730 <MOTOR_Move_With_RxTx_Control>
	//	}
	}


}
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	7f 91       	pop	r23
     7ea:	6f 91       	pop	r22
     7ec:	5f 91       	pop	r21
     7ee:	4f 91       	pop	r20
     7f0:	3f 91       	pop	r19
     7f2:	2f 91       	pop	r18
     7f4:	0f 90       	pop	r0
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <__vector_13>:
SIGNAL(SIG_UART_TRANS){// usart transmit interrupt
     7fe:	1f 92       	push	r1
     800:	0f 92       	push	r0
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	0f 92       	push	r0
     806:	11 24       	eor	r1, r1


// add code you want..

}
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti

00000812 <__mulsf3>:
     812:	a0 e2       	ldi	r26, 0x20	; 32
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	ee e0       	ldi	r30, 0x0E	; 14
     818:	f4 e0       	ldi	r31, 0x04	; 4
     81a:	af c3       	rjmp	.+1886   	; 0xf7a <__prologue_saves__>
     81c:	69 83       	std	Y+1, r22	; 0x01
     81e:	7a 83       	std	Y+2, r23	; 0x02
     820:	8b 83       	std	Y+3, r24	; 0x03
     822:	9c 83       	std	Y+4, r25	; 0x04
     824:	2d 83       	std	Y+5, r18	; 0x05
     826:	3e 83       	std	Y+6, r19	; 0x06
     828:	4f 83       	std	Y+7, r20	; 0x07
     82a:	58 87       	std	Y+8, r21	; 0x08
     82c:	ce 01       	movw	r24, r28
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	be 01       	movw	r22, r28
     832:	67 5f       	subi	r22, 0xF7	; 247
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	df d2       	rcall	.+1470   	; 0xdf6 <__unpack_f>
     838:	ce 01       	movw	r24, r28
     83a:	05 96       	adiw	r24, 0x05	; 5
     83c:	be 01       	movw	r22, r28
     83e:	6f 5e       	subi	r22, 0xEF	; 239
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	d9 d2       	rcall	.+1458   	; 0xdf6 <__unpack_f>
     844:	99 85       	ldd	r25, Y+9	; 0x09
     846:	92 30       	cpi	r25, 0x02	; 2
     848:	78 f0       	brcs	.+30     	; 0x868 <__mulsf3+0x56>
     84a:	89 89       	ldd	r24, Y+17	; 0x11
     84c:	82 30       	cpi	r24, 0x02	; 2
     84e:	c0 f0       	brcs	.+48     	; 0x880 <__mulsf3+0x6e>
     850:	94 30       	cpi	r25, 0x04	; 4
     852:	19 f4       	brne	.+6      	; 0x85a <__mulsf3+0x48>
     854:	82 30       	cpi	r24, 0x02	; 2
     856:	41 f4       	brne	.+16     	; 0x868 <__mulsf3+0x56>
     858:	cb c0       	rjmp	.+406    	; 0x9f0 <__mulsf3+0x1de>
     85a:	84 30       	cpi	r24, 0x04	; 4
     85c:	19 f4       	brne	.+6      	; 0x864 <__mulsf3+0x52>
     85e:	92 30       	cpi	r25, 0x02	; 2
     860:	79 f4       	brne	.+30     	; 0x880 <__mulsf3+0x6e>
     862:	c6 c0       	rjmp	.+396    	; 0x9f0 <__mulsf3+0x1de>
     864:	92 30       	cpi	r25, 0x02	; 2
     866:	51 f4       	brne	.+20     	; 0x87c <__mulsf3+0x6a>
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	2a 85       	ldd	r18, Y+10	; 0x0a
     86c:	9a 89       	ldd	r25, Y+18	; 0x12
     86e:	29 17       	cp	r18, r25
     870:	09 f4       	brne	.+2      	; 0x874 <__mulsf3+0x62>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	8a 87       	std	Y+10, r24	; 0x0a
     876:	ce 01       	movw	r24, r28
     878:	09 96       	adiw	r24, 0x09	; 9
     87a:	bc c0       	rjmp	.+376    	; 0x9f4 <__mulsf3+0x1e2>
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	51 f4       	brne	.+20     	; 0x894 <__mulsf3+0x82>
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	2a 85       	ldd	r18, Y+10	; 0x0a
     884:	9a 89       	ldd	r25, Y+18	; 0x12
     886:	29 17       	cp	r18, r25
     888:	09 f4       	brne	.+2      	; 0x88c <__mulsf3+0x7a>
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	8a 8b       	std	Y+18, r24	; 0x12
     88e:	ce 01       	movw	r24, r28
     890:	41 96       	adiw	r24, 0x11	; 17
     892:	b0 c0       	rjmp	.+352    	; 0x9f4 <__mulsf3+0x1e2>
     894:	6d 84       	ldd	r6, Y+13	; 0x0d
     896:	7e 84       	ldd	r7, Y+14	; 0x0e
     898:	8f 84       	ldd	r8, Y+15	; 0x0f
     89a:	98 88       	ldd	r9, Y+16	; 0x10
     89c:	ed 88       	ldd	r14, Y+21	; 0x15
     89e:	fe 88       	ldd	r15, Y+22	; 0x16
     8a0:	0f 89       	ldd	r16, Y+23	; 0x17
     8a2:	18 8d       	ldd	r17, Y+24	; 0x18
     8a4:	e0 e2       	ldi	r30, 0x20	; 32
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	dc 01       	movw	r26, r24
     8ae:	aa 24       	eor	r10, r10
     8b0:	bb 24       	eor	r11, r11
     8b2:	65 01       	movw	r12, r10
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	a9 01       	movw	r20, r18
     8ba:	b3 01       	movw	r22, r6
     8bc:	61 70       	andi	r22, 0x01	; 1
     8be:	70 70       	andi	r23, 0x00	; 0
     8c0:	61 15       	cp	r22, r1
     8c2:	71 05       	cpc	r23, r1
     8c4:	d1 f0       	breq	.+52     	; 0x8fa <__mulsf3+0xe8>
     8c6:	2e 0d       	add	r18, r14
     8c8:	3f 1d       	adc	r19, r15
     8ca:	40 1f       	adc	r20, r16
     8cc:	51 1f       	adc	r21, r17
     8ce:	15 01       	movw	r2, r10
     8d0:	26 01       	movw	r4, r12
     8d2:	28 0e       	add	r2, r24
     8d4:	39 1e       	adc	r3, r25
     8d6:	4a 1e       	adc	r4, r26
     8d8:	5b 1e       	adc	r5, r27
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	a0 e0       	ldi	r26, 0x00	; 0
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	2e 15       	cp	r18, r14
     8e4:	3f 05       	cpc	r19, r15
     8e6:	40 07       	cpc	r20, r16
     8e8:	51 07       	cpc	r21, r17
     8ea:	18 f0       	brcs	.+6      	; 0x8f2 <__mulsf3+0xe0>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	dc 01       	movw	r26, r24
     8f2:	82 0d       	add	r24, r2
     8f4:	93 1d       	adc	r25, r3
     8f6:	a4 1d       	adc	r26, r4
     8f8:	b5 1d       	adc	r27, r5
     8fa:	aa 0c       	add	r10, r10
     8fc:	bb 1c       	adc	r11, r11
     8fe:	cc 1c       	adc	r12, r12
     900:	dd 1c       	adc	r13, r13
     902:	17 ff       	sbrs	r17, 7
     904:	09 c0       	rjmp	.+18     	; 0x918 <__mulsf3+0x106>
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	26 2e       	mov	r2, r22
     90a:	31 2c       	mov	r3, r1
     90c:	41 2c       	mov	r4, r1
     90e:	51 2c       	mov	r5, r1
     910:	a2 28       	or	r10, r2
     912:	b3 28       	or	r11, r3
     914:	c4 28       	or	r12, r4
     916:	d5 28       	or	r13, r5
     918:	31 97       	sbiw	r30, 0x01	; 1
     91a:	49 f0       	breq	.+18     	; 0x92e <__mulsf3+0x11c>
     91c:	ee 0c       	add	r14, r14
     91e:	ff 1c       	adc	r15, r15
     920:	00 1f       	adc	r16, r16
     922:	11 1f       	adc	r17, r17
     924:	96 94       	lsr	r9
     926:	87 94       	ror	r8
     928:	77 94       	ror	r7
     92a:	67 94       	ror	r6
     92c:	c6 cf       	rjmp	.-116    	; 0x8ba <__mulsf3+0xa8>
     92e:	6b 89       	ldd	r22, Y+19	; 0x13
     930:	7c 89       	ldd	r23, Y+20	; 0x14
     932:	eb 85       	ldd	r30, Y+11	; 0x0b
     934:	fc 85       	ldd	r31, Y+12	; 0x0c
     936:	6e 0f       	add	r22, r30
     938:	7f 1f       	adc	r23, r31
     93a:	6e 5f       	subi	r22, 0xFE	; 254
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	7c 8f       	std	Y+28, r23	; 0x1c
     940:	6b 8f       	std	Y+27, r22	; 0x1b
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	ea 85       	ldd	r30, Y+10	; 0x0a
     946:	7a 89       	ldd	r23, Y+18	; 0x12
     948:	e7 17       	cp	r30, r23
     94a:	09 f4       	brne	.+2      	; 0x94e <__mulsf3+0x13c>
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	6a 8f       	std	Y+26, r22	; 0x1a
     950:	6b 8d       	ldd	r22, Y+27	; 0x1b
     952:	7c 8d       	ldd	r23, Y+28	; 0x1c
     954:	10 c0       	rjmp	.+32     	; 0x976 <__mulsf3+0x164>
     956:	fc 01       	movw	r30, r24
     958:	e1 70       	andi	r30, 0x01	; 1
     95a:	f0 70       	andi	r31, 0x00	; 0
     95c:	30 97       	sbiw	r30, 0x00	; 0
     95e:	29 f0       	breq	.+10     	; 0x96a <__mulsf3+0x158>
     960:	56 95       	lsr	r21
     962:	47 95       	ror	r20
     964:	37 95       	ror	r19
     966:	27 95       	ror	r18
     968:	50 68       	ori	r21, 0x80	; 128
     96a:	b6 95       	lsr	r27
     96c:	a7 95       	ror	r26
     96e:	97 95       	ror	r25
     970:	87 95       	ror	r24
     972:	6f 5f       	subi	r22, 0xFF	; 255
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	b7 fd       	sbrc	r27, 7
     978:	ee cf       	rjmp	.-36     	; 0x956 <__mulsf3+0x144>
     97a:	0c c0       	rjmp	.+24     	; 0x994 <__mulsf3+0x182>
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	aa 1f       	adc	r26, r26
     982:	bb 1f       	adc	r27, r27
     984:	57 fd       	sbrc	r21, 7
     986:	81 60       	ori	r24, 0x01	; 1
     988:	22 0f       	add	r18, r18
     98a:	33 1f       	adc	r19, r19
     98c:	44 1f       	adc	r20, r20
     98e:	55 1f       	adc	r21, r21
     990:	61 50       	subi	r22, 0x01	; 1
     992:	70 40       	sbci	r23, 0x00	; 0
     994:	80 30       	cpi	r24, 0x00	; 0
     996:	e0 e0       	ldi	r30, 0x00	; 0
     998:	9e 07       	cpc	r25, r30
     99a:	e0 e0       	ldi	r30, 0x00	; 0
     99c:	ae 07       	cpc	r26, r30
     99e:	e0 e4       	ldi	r30, 0x40	; 64
     9a0:	be 07       	cpc	r27, r30
     9a2:	60 f3       	brcs	.-40     	; 0x97c <__mulsf3+0x16a>
     9a4:	6b 8f       	std	Y+27, r22	; 0x1b
     9a6:	7c 8f       	std	Y+28, r23	; 0x1c
     9a8:	6f e7       	ldi	r22, 0x7F	; 127
     9aa:	e6 2e       	mov	r14, r22
     9ac:	f1 2c       	mov	r15, r1
     9ae:	01 2d       	mov	r16, r1
     9b0:	11 2d       	mov	r17, r1
     9b2:	e8 22       	and	r14, r24
     9b4:	f9 22       	and	r15, r25
     9b6:	0a 23       	and	r16, r26
     9b8:	1b 23       	and	r17, r27
     9ba:	60 e4       	ldi	r22, 0x40	; 64
     9bc:	e6 16       	cp	r14, r22
     9be:	f1 04       	cpc	r15, r1
     9c0:	01 05       	cpc	r16, r1
     9c2:	11 05       	cpc	r17, r1
     9c4:	61 f4       	brne	.+24     	; 0x9de <__mulsf3+0x1cc>
     9c6:	87 fd       	sbrc	r24, 7
     9c8:	0a c0       	rjmp	.+20     	; 0x9de <__mulsf3+0x1cc>
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	29 f0       	breq	.+10     	; 0x9de <__mulsf3+0x1cc>
     9d4:	80 5c       	subi	r24, 0xC0	; 192
     9d6:	9f 4f       	sbci	r25, 0xFF	; 255
     9d8:	af 4f       	sbci	r26, 0xFF	; 255
     9da:	bf 4f       	sbci	r27, 0xFF	; 255
     9dc:	80 78       	andi	r24, 0x80	; 128
     9de:	8d 8f       	std	Y+29, r24	; 0x1d
     9e0:	9e 8f       	std	Y+30, r25	; 0x1e
     9e2:	af 8f       	std	Y+31, r26	; 0x1f
     9e4:	b8 a3       	std	Y+32, r27	; 0x20
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	89 8f       	std	Y+25, r24	; 0x19
     9ea:	ce 01       	movw	r24, r28
     9ec:	49 96       	adiw	r24, 0x19	; 25
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__mulsf3+0x1e2>
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	33 d1       	rcall	.+614    	; 0xc5c <__pack_f>
     9f6:	a0 96       	adiw	r28, 0x20	; 32
     9f8:	e2 e1       	ldi	r30, 0x12	; 18
     9fa:	db c2       	rjmp	.+1462   	; 0xfb2 <__epilogue_restores__>

000009fc <__eqsf2>:
     9fc:	a8 e1       	ldi	r26, 0x18	; 24
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	e3 e0       	ldi	r30, 0x03	; 3
     a02:	f5 e0       	ldi	r31, 0x05	; 5
     a04:	c6 c2       	rjmp	.+1420   	; 0xf92 <__prologue_saves__+0x18>
     a06:	69 83       	std	Y+1, r22	; 0x01
     a08:	7a 83       	std	Y+2, r23	; 0x02
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	9c 83       	std	Y+4, r25	; 0x04
     a0e:	2d 83       	std	Y+5, r18	; 0x05
     a10:	3e 83       	std	Y+6, r19	; 0x06
     a12:	4f 83       	std	Y+7, r20	; 0x07
     a14:	58 87       	std	Y+8, r21	; 0x08
     a16:	8e 01       	movw	r16, r28
     a18:	07 5f       	subi	r16, 0xF7	; 247
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255
     a1c:	ce 01       	movw	r24, r28
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	b8 01       	movw	r22, r16
     a22:	e9 d1       	rcall	.+978    	; 0xdf6 <__unpack_f>
     a24:	81 e1       	ldi	r24, 0x11	; 17
     a26:	e8 2e       	mov	r14, r24
     a28:	f1 2c       	mov	r15, r1
     a2a:	ec 0e       	add	r14, r28
     a2c:	fd 1e       	adc	r15, r29
     a2e:	ce 01       	movw	r24, r28
     a30:	05 96       	adiw	r24, 0x05	; 5
     a32:	b7 01       	movw	r22, r14
     a34:	e0 d1       	rcall	.+960    	; 0xdf6 <__unpack_f>
     a36:	89 85       	ldd	r24, Y+9	; 0x09
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	38 f0       	brcs	.+14     	; 0xa4a <__eqsf2+0x4e>
     a3c:	89 89       	ldd	r24, Y+17	; 0x11
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	20 f0       	brcs	.+8      	; 0xa4a <__eqsf2+0x4e>
     a42:	c8 01       	movw	r24, r16
     a44:	b7 01       	movw	r22, r14
     a46:	40 d2       	rcall	.+1152   	; 0xec8 <__fpcmp_parts_f>
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <__eqsf2+0x50>
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	68 96       	adiw	r28, 0x18	; 24
     a4e:	e6 e0       	ldi	r30, 0x06	; 6
     a50:	bc c2       	rjmp	.+1400   	; 0xfca <__epilogue_restores__+0x18>

00000a52 <__floatsisf>:
     a52:	a8 e0       	ldi	r26, 0x08	; 8
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	ee e2       	ldi	r30, 0x2E	; 46
     a58:	f5 e0       	ldi	r31, 0x05	; 5
     a5a:	9b c2       	rjmp	.+1334   	; 0xf92 <__prologue_saves__+0x18>
     a5c:	7b 01       	movw	r14, r22
     a5e:	8c 01       	movw	r16, r24
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	88 27       	eor	r24, r24
     a6a:	b7 fd       	sbrc	r27, 7
     a6c:	83 95       	inc	r24
     a6e:	99 27       	eor	r25, r25
     a70:	aa 27       	eor	r26, r26
     a72:	bb 27       	eor	r27, r27
     a74:	28 2f       	mov	r18, r24
     a76:	8a 83       	std	Y+2, r24	; 0x02
     a78:	e1 14       	cp	r14, r1
     a7a:	f1 04       	cpc	r15, r1
     a7c:	01 05       	cpc	r16, r1
     a7e:	11 05       	cpc	r17, r1
     a80:	19 f4       	brne	.+6      	; 0xa88 <__floatsisf+0x36>
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	36 c0       	rjmp	.+108    	; 0xaf4 <__floatsisf+0xa2>
     a88:	8e e1       	ldi	r24, 0x1E	; 30
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	9c 83       	std	Y+4, r25	; 0x04
     a8e:	8b 83       	std	Y+3, r24	; 0x03
     a90:	22 23       	and	r18, r18
     a92:	89 f0       	breq	.+34     	; 0xab6 <__floatsisf+0x64>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	e8 16       	cp	r14, r24
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	f8 06       	cpc	r15, r24
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	08 07       	cpc	r16, r24
     aa0:	80 e8       	ldi	r24, 0x80	; 128
     aa2:	18 07       	cpc	r17, r24
     aa4:	59 f1       	breq	.+86     	; 0xafc <__floatsisf+0xaa>
     aa6:	10 95       	com	r17
     aa8:	00 95       	com	r16
     aaa:	f0 94       	com	r15
     aac:	e0 94       	com	r14
     aae:	e1 1c       	adc	r14, r1
     ab0:	f1 1c       	adc	r15, r1
     ab2:	01 1d       	adc	r16, r1
     ab4:	11 1d       	adc	r17, r1
     ab6:	ed 82       	std	Y+5, r14	; 0x05
     ab8:	fe 82       	std	Y+6, r15	; 0x06
     aba:	0f 83       	std	Y+7, r16	; 0x07
     abc:	18 87       	std	Y+8, r17	; 0x08
     abe:	c8 01       	movw	r24, r16
     ac0:	b7 01       	movw	r22, r14
     ac2:	72 d0       	rcall	.+228    	; 0xba8 <__clzsi2>
     ac4:	9c 01       	movw	r18, r24
     ac6:	21 50       	subi	r18, 0x01	; 1
     ac8:	30 40       	sbci	r19, 0x00	; 0
     aca:	12 16       	cp	r1, r18
     acc:	13 06       	cpc	r1, r19
     ace:	94 f4       	brge	.+36     	; 0xaf4 <__floatsisf+0xa2>
     ad0:	02 2e       	mov	r0, r18
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <__floatsisf+0x8a>
     ad4:	ee 0c       	add	r14, r14
     ad6:	ff 1c       	adc	r15, r15
     ad8:	00 1f       	adc	r16, r16
     ada:	11 1f       	adc	r17, r17
     adc:	0a 94       	dec	r0
     ade:	d2 f7       	brpl	.-12     	; 0xad4 <__floatsisf+0x82>
     ae0:	ed 82       	std	Y+5, r14	; 0x05
     ae2:	fe 82       	std	Y+6, r15	; 0x06
     ae4:	0f 83       	std	Y+7, r16	; 0x07
     ae6:	18 87       	std	Y+8, r17	; 0x08
     ae8:	8e e1       	ldi	r24, 0x1E	; 30
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	82 1b       	sub	r24, r18
     aee:	93 0b       	sbc	r25, r19
     af0:	9c 83       	std	Y+4, r25	; 0x04
     af2:	8b 83       	std	Y+3, r24	; 0x03
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	b1 d0       	rcall	.+354    	; 0xc5c <__pack_f>
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <__floatsisf+0xb2>
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	9f ec       	ldi	r25, 0xCF	; 207
     b04:	28 96       	adiw	r28, 0x08	; 8
     b06:	e6 e0       	ldi	r30, 0x06	; 6
     b08:	60 c2       	rjmp	.+1216   	; 0xfca <__epilogue_restores__+0x18>

00000b0a <__fixsfsi>:
     b0a:	ac e0       	ldi	r26, 0x0C	; 12
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	ea e8       	ldi	r30, 0x8A	; 138
     b10:	f5 e0       	ldi	r31, 0x05	; 5
     b12:	43 c2       	rjmp	.+1158   	; 0xf9a <__prologue_saves__+0x20>
     b14:	69 83       	std	Y+1, r22	; 0x01
     b16:	7a 83       	std	Y+2, r23	; 0x02
     b18:	8b 83       	std	Y+3, r24	; 0x03
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	be 01       	movw	r22, r28
     b22:	6b 5f       	subi	r22, 0xFB	; 251
     b24:	7f 4f       	sbci	r23, 0xFF	; 255
     b26:	67 d1       	rcall	.+718    	; 0xdf6 <__unpack_f>
     b28:	8d 81       	ldd	r24, Y+5	; 0x05
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	81 f1       	breq	.+96     	; 0xb8e <__fixsfsi+0x84>
     b2e:	82 30       	cpi	r24, 0x02	; 2
     b30:	70 f1       	brcs	.+92     	; 0xb8e <__fixsfsi+0x84>
     b32:	84 30       	cpi	r24, 0x04	; 4
     b34:	21 f4       	brne	.+8      	; 0xb3e <__fixsfsi+0x34>
     b36:	8e 81       	ldd	r24, Y+6	; 0x06
     b38:	88 23       	and	r24, r24
     b3a:	69 f1       	breq	.+90     	; 0xb96 <__fixsfsi+0x8c>
     b3c:	0a c0       	rjmp	.+20     	; 0xb52 <__fixsfsi+0x48>
     b3e:	2f 81       	ldd	r18, Y+7	; 0x07
     b40:	38 85       	ldd	r19, Y+8	; 0x08
     b42:	37 fd       	sbrc	r19, 7
     b44:	24 c0       	rjmp	.+72     	; 0xb8e <__fixsfsi+0x84>
     b46:	6e 81       	ldd	r22, Y+6	; 0x06
     b48:	2f 31       	cpi	r18, 0x1F	; 31
     b4a:	31 05       	cpc	r19, r1
     b4c:	3c f0       	brlt	.+14     	; 0xb5c <__fixsfsi+0x52>
     b4e:	66 23       	and	r22, r22
     b50:	11 f1       	breq	.+68     	; 0xb96 <__fixsfsi+0x8c>
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	50 e8       	ldi	r21, 0x80	; 128
     b5a:	21 c0       	rjmp	.+66     	; 0xb9e <__fixsfsi+0x94>
     b5c:	8e e1       	ldi	r24, 0x1E	; 30
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	82 1b       	sub	r24, r18
     b62:	93 0b       	sbc	r25, r19
     b64:	29 85       	ldd	r18, Y+9	; 0x09
     b66:	3a 85       	ldd	r19, Y+10	; 0x0a
     b68:	4b 85       	ldd	r20, Y+11	; 0x0b
     b6a:	5c 85       	ldd	r21, Y+12	; 0x0c
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <__fixsfsi+0x6c>
     b6e:	56 95       	lsr	r21
     b70:	47 95       	ror	r20
     b72:	37 95       	ror	r19
     b74:	27 95       	ror	r18
     b76:	8a 95       	dec	r24
     b78:	d2 f7       	brpl	.-12     	; 0xb6e <__fixsfsi+0x64>
     b7a:	66 23       	and	r22, r22
     b7c:	81 f0       	breq	.+32     	; 0xb9e <__fixsfsi+0x94>
     b7e:	50 95       	com	r21
     b80:	40 95       	com	r20
     b82:	30 95       	com	r19
     b84:	21 95       	neg	r18
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	4f 4f       	sbci	r20, 0xFF	; 255
     b8a:	5f 4f       	sbci	r21, 0xFF	; 255
     b8c:	08 c0       	rjmp	.+16     	; 0xb9e <__fixsfsi+0x94>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	a9 01       	movw	r20, r18
     b94:	04 c0       	rjmp	.+8      	; 0xb9e <__fixsfsi+0x94>
     b96:	2f ef       	ldi	r18, 0xFF	; 255
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f ef       	ldi	r20, 0xFF	; 255
     b9c:	5f e7       	ldi	r21, 0x7F	; 127
     b9e:	b9 01       	movw	r22, r18
     ba0:	ca 01       	movw	r24, r20
     ba2:	2c 96       	adiw	r28, 0x0c	; 12
     ba4:	e2 e0       	ldi	r30, 0x02	; 2
     ba6:	15 c2       	rjmp	.+1066   	; 0xfd2 <__epilogue_restores__+0x20>

00000ba8 <__clzsi2>:
     ba8:	af 92       	push	r10
     baa:	bf 92       	push	r11
     bac:	cf 92       	push	r12
     bae:	df 92       	push	r13
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	7b 01       	movw	r14, r22
     bba:	8c 01       	movw	r16, r24
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	e8 16       	cp	r14, r24
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	f8 06       	cpc	r15, r24
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	08 07       	cpc	r16, r24
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	18 07       	cpc	r17, r24
     bcc:	58 f4       	brcc	.+22     	; 0xbe4 <__clzsi2+0x3c>
     bce:	ef ef       	ldi	r30, 0xFF	; 255
     bd0:	ee 16       	cp	r14, r30
     bd2:	f1 04       	cpc	r15, r1
     bd4:	01 05       	cpc	r16, r1
     bd6:	11 05       	cpc	r17, r1
     bd8:	09 f0       	breq	.+2      	; 0xbdc <__clzsi2+0x34>
     bda:	90 f4       	brcc	.+36     	; 0xc00 <__clzsi2+0x58>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	dc 01       	movw	r26, r24
     be2:	17 c0       	rjmp	.+46     	; 0xc12 <__clzsi2+0x6a>
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ef 16       	cp	r14, r31
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	ff 06       	cpc	r15, r31
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	0f 07       	cpc	r16, r31
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	1f 07       	cpc	r17, r31
     bf4:	50 f4       	brcc	.+20     	; 0xc0a <__clzsi2+0x62>
     bf6:	80 e1       	ldi	r24, 0x10	; 16
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	09 c0       	rjmp	.+18     	; 0xc12 <__clzsi2+0x6a>
     c00:	88 e0       	ldi	r24, 0x08	; 8
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	a0 e0       	ldi	r26, 0x00	; 0
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <__clzsi2+0x6a>
     c0a:	88 e1       	ldi	r24, 0x18	; 24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	20 e2       	ldi	r18, 0x20	; 32
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	28 1b       	sub	r18, r24
     c1c:	39 0b       	sbc	r19, r25
     c1e:	4a 0b       	sbc	r20, r26
     c20:	5b 0b       	sbc	r21, r27
     c22:	57 01       	movw	r10, r14
     c24:	68 01       	movw	r12, r16
     c26:	04 c0       	rjmp	.+8      	; 0xc30 <__clzsi2+0x88>
     c28:	d6 94       	lsr	r13
     c2a:	c7 94       	ror	r12
     c2c:	b7 94       	ror	r11
     c2e:	a7 94       	ror	r10
     c30:	8a 95       	dec	r24
     c32:	d2 f7       	brpl	.-12     	; 0xc28 <__clzsi2+0x80>
     c34:	d6 01       	movw	r26, r12
     c36:	c5 01       	movw	r24, r10
     c38:	89 5f       	subi	r24, 0xF9	; 249
     c3a:	9e 4f       	sbci	r25, 0xFE	; 254
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	28 1b       	sub	r18, r24
     c42:	31 09       	sbc	r19, r1
     c44:	41 09       	sbc	r20, r1
     c46:	51 09       	sbc	r21, r1
     c48:	c9 01       	movw	r24, r18
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	08 95       	ret

00000c5c <__pack_f>:
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	fc 01       	movw	r30, r24
     c6a:	24 81       	ldd	r18, Z+4	; 0x04
     c6c:	35 81       	ldd	r19, Z+5	; 0x05
     c6e:	46 81       	ldd	r20, Z+6	; 0x06
     c70:	57 81       	ldd	r21, Z+7	; 0x07
     c72:	61 81       	ldd	r22, Z+1	; 0x01
     c74:	80 81       	ld	r24, Z
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	20 f4       	brcc	.+8      	; 0xc82 <__pack_f+0x26>
     c7a:	40 61       	ori	r20, 0x10	; 16
     c7c:	ef ef       	ldi	r30, 0xFF	; 255
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	a3 c0       	rjmp	.+326    	; 0xdc8 <__pack_f+0x16c>
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	09 f4       	brne	.+2      	; 0xc88 <__pack_f+0x2c>
     c86:	9b c0       	rjmp	.+310    	; 0xdbe <__pack_f+0x162>
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	09 f4       	brne	.+2      	; 0xc8e <__pack_f+0x32>
     c8c:	92 c0       	rjmp	.+292    	; 0xdb2 <__pack_f+0x156>
     c8e:	21 15       	cp	r18, r1
     c90:	31 05       	cpc	r19, r1
     c92:	41 05       	cpc	r20, r1
     c94:	51 05       	cpc	r21, r1
     c96:	09 f4       	brne	.+2      	; 0xc9a <__pack_f+0x3e>
     c98:	8f c0       	rjmp	.+286    	; 0xdb8 <__pack_f+0x15c>
     c9a:	02 80       	ldd	r0, Z+2	; 0x02
     c9c:	f3 81       	ldd	r31, Z+3	; 0x03
     c9e:	e0 2d       	mov	r30, r0
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	e2 38       	cpi	r30, 0x82	; 130
     ca4:	f8 07       	cpc	r31, r24
     ca6:	0c f0       	brlt	.+2      	; 0xcaa <__pack_f+0x4e>
     ca8:	5a c0       	rjmp	.+180    	; 0xd5e <__pack_f+0x102>
     caa:	c2 e8       	ldi	r28, 0x82	; 130
     cac:	df ef       	ldi	r29, 0xFF	; 255
     cae:	ce 1b       	sub	r28, r30
     cb0:	df 0b       	sbc	r29, r31
     cb2:	ca 31       	cpi	r28, 0x1A	; 26
     cb4:	d1 05       	cpc	r29, r1
     cb6:	6c f5       	brge	.+90     	; 0xd12 <__pack_f+0xb6>
     cb8:	79 01       	movw	r14, r18
     cba:	8a 01       	movw	r16, r20
     cbc:	0c 2e       	mov	r0, r28
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <__pack_f+0x6c>
     cc0:	16 95       	lsr	r17
     cc2:	07 95       	ror	r16
     cc4:	f7 94       	ror	r15
     cc6:	e7 94       	ror	r14
     cc8:	0a 94       	dec	r0
     cca:	d2 f7       	brpl	.-12     	; 0xcc0 <__pack_f+0x64>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	a0 e0       	ldi	r26, 0x00	; 0
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	0c 2e       	mov	r0, r28
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <__pack_f+0x84>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	aa 1f       	adc	r26, r26
     cde:	bb 1f       	adc	r27, r27
     ce0:	0a 94       	dec	r0
     ce2:	d2 f7       	brpl	.-12     	; 0xcd8 <__pack_f+0x7c>
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	a1 09       	sbc	r26, r1
     ce8:	b1 09       	sbc	r27, r1
     cea:	82 23       	and	r24, r18
     cec:	93 23       	and	r25, r19
     cee:	a4 23       	and	r26, r20
     cf0:	b5 23       	and	r27, r21
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	a1 05       	cpc	r26, r1
     cfe:	b1 05       	cpc	r27, r1
     d00:	19 f4       	brne	.+6      	; 0xd08 <__pack_f+0xac>
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	a9 01       	movw	r20, r18
     d08:	2e 29       	or	r18, r14
     d0a:	3f 29       	or	r19, r15
     d0c:	40 2b       	or	r20, r16
     d0e:	51 2b       	or	r21, r17
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <__pack_f+0xbc>
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	a9 01       	movw	r20, r18
     d18:	da 01       	movw	r26, r20
     d1a:	c9 01       	movw	r24, r18
     d1c:	8f 77       	andi	r24, 0x7F	; 127
     d1e:	90 70       	andi	r25, 0x00	; 0
     d20:	a0 70       	andi	r26, 0x00	; 0
     d22:	b0 70       	andi	r27, 0x00	; 0
     d24:	80 34       	cpi	r24, 0x40	; 64
     d26:	91 05       	cpc	r25, r1
     d28:	a1 05       	cpc	r26, r1
     d2a:	b1 05       	cpc	r27, r1
     d2c:	39 f4       	brne	.+14     	; 0xd3c <__pack_f+0xe0>
     d2e:	27 ff       	sbrs	r18, 7
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <__pack_f+0xe8>
     d32:	20 5c       	subi	r18, 0xC0	; 192
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	4f 4f       	sbci	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__pack_f+0xe8>
     d3c:	21 5c       	subi	r18, 0xC1	; 193
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	4f 4f       	sbci	r20, 0xFF	; 255
     d42:	5f 4f       	sbci	r21, 0xFF	; 255
     d44:	e1 e0       	ldi	r30, 0x01	; 1
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	20 30       	cpi	r18, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	38 07       	cpc	r19, r24
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	48 07       	cpc	r20, r24
     d52:	80 e4       	ldi	r24, 0x40	; 64
     d54:	58 07       	cpc	r21, r24
     d56:	28 f5       	brcc	.+74     	; 0xda2 <__pack_f+0x146>
     d58:	e0 e0       	ldi	r30, 0x00	; 0
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	22 c0       	rjmp	.+68     	; 0xda2 <__pack_f+0x146>
     d5e:	e0 38       	cpi	r30, 0x80	; 128
     d60:	f1 05       	cpc	r31, r1
     d62:	6c f5       	brge	.+90     	; 0xdbe <__pack_f+0x162>
     d64:	e1 58       	subi	r30, 0x81	; 129
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	da 01       	movw	r26, r20
     d6a:	c9 01       	movw	r24, r18
     d6c:	8f 77       	andi	r24, 0x7F	; 127
     d6e:	90 70       	andi	r25, 0x00	; 0
     d70:	a0 70       	andi	r26, 0x00	; 0
     d72:	b0 70       	andi	r27, 0x00	; 0
     d74:	80 34       	cpi	r24, 0x40	; 64
     d76:	91 05       	cpc	r25, r1
     d78:	a1 05       	cpc	r26, r1
     d7a:	b1 05       	cpc	r27, r1
     d7c:	39 f4       	brne	.+14     	; 0xd8c <__pack_f+0x130>
     d7e:	27 ff       	sbrs	r18, 7
     d80:	09 c0       	rjmp	.+18     	; 0xd94 <__pack_f+0x138>
     d82:	20 5c       	subi	r18, 0xC0	; 192
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	4f 4f       	sbci	r20, 0xFF	; 255
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <__pack_f+0x138>
     d8c:	21 5c       	subi	r18, 0xC1	; 193
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	4f 4f       	sbci	r20, 0xFF	; 255
     d92:	5f 4f       	sbci	r21, 0xFF	; 255
     d94:	57 ff       	sbrs	r21, 7
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <__pack_f+0x146>
     d98:	56 95       	lsr	r21
     d9a:	47 95       	ror	r20
     d9c:	37 95       	ror	r19
     d9e:	27 95       	ror	r18
     da0:	31 96       	adiw	r30, 0x01	; 1
     da2:	87 e0       	ldi	r24, 0x07	; 7
     da4:	56 95       	lsr	r21
     da6:	47 95       	ror	r20
     da8:	37 95       	ror	r19
     daa:	27 95       	ror	r18
     dac:	8a 95       	dec	r24
     dae:	d1 f7       	brne	.-12     	; 0xda4 <__pack_f+0x148>
     db0:	0b c0       	rjmp	.+22     	; 0xdc8 <__pack_f+0x16c>
     db2:	e0 e0       	ldi	r30, 0x00	; 0
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	05 c0       	rjmp	.+10     	; 0xdc2 <__pack_f+0x166>
     db8:	e0 e0       	ldi	r30, 0x00	; 0
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__pack_f+0x16c>
     dbe:	ef ef       	ldi	r30, 0xFF	; 255
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	a9 01       	movw	r20, r18
     dc8:	8e 2f       	mov	r24, r30
     dca:	87 95       	ror	r24
     dcc:	88 27       	eor	r24, r24
     dce:	87 95       	ror	r24
     dd0:	94 2f       	mov	r25, r20
     dd2:	9f 77       	andi	r25, 0x7F	; 127
     dd4:	67 95       	ror	r22
     dd6:	66 27       	eor	r22, r22
     dd8:	67 95       	ror	r22
     dda:	e6 95       	lsr	r30
     ddc:	e2 2e       	mov	r14, r18
     dde:	a9 2f       	mov	r26, r25
     de0:	a8 2b       	or	r26, r24
     de2:	fe 2f       	mov	r31, r30
     de4:	f6 2b       	or	r31, r22
     de6:	62 2f       	mov	r22, r18
     de8:	73 2f       	mov	r23, r19
     dea:	8a 2f       	mov	r24, r26
     dec:	9f 2f       	mov	r25, r31
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	e6 e0       	ldi	r30, 0x06	; 6
     df4:	ea c0       	rjmp	.+468    	; 0xfca <__epilogue_restores__+0x18>

00000df6 <__unpack_f>:
     df6:	dc 01       	movw	r26, r24
     df8:	fb 01       	movw	r30, r22
     dfa:	2c 91       	ld	r18, X
     dfc:	11 96       	adiw	r26, 0x01	; 1
     dfe:	3c 91       	ld	r19, X
     e00:	11 97       	sbiw	r26, 0x01	; 1
     e02:	12 96       	adiw	r26, 0x02	; 2
     e04:	8c 91       	ld	r24, X
     e06:	12 97       	sbiw	r26, 0x02	; 2
     e08:	48 2f       	mov	r20, r24
     e0a:	4f 77       	andi	r20, 0x7F	; 127
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	98 2f       	mov	r25, r24
     e10:	99 1f       	adc	r25, r25
     e12:	99 27       	eor	r25, r25
     e14:	99 1f       	adc	r25, r25
     e16:	13 96       	adiw	r26, 0x03	; 3
     e18:	6c 91       	ld	r22, X
     e1a:	13 97       	sbiw	r26, 0x03	; 3
     e1c:	86 2f       	mov	r24, r22
     e1e:	88 0f       	add	r24, r24
     e20:	89 2b       	or	r24, r25
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	66 1f       	adc	r22, r22
     e26:	66 27       	eor	r22, r22
     e28:	66 1f       	adc	r22, r22
     e2a:	61 83       	std	Z+1, r22	; 0x01
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	39 f5       	brne	.+78     	; 0xe7e <__unpack_f+0x88>
     e30:	21 15       	cp	r18, r1
     e32:	31 05       	cpc	r19, r1
     e34:	41 05       	cpc	r20, r1
     e36:	51 05       	cpc	r21, r1
     e38:	11 f4       	brne	.+4      	; 0xe3e <__unpack_f+0x48>
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	29 c0       	rjmp	.+82     	; 0xe90 <__unpack_f+0x9a>
     e3e:	82 e8       	ldi	r24, 0x82	; 130
     e40:	9f ef       	ldi	r25, 0xFF	; 255
     e42:	93 83       	std	Z+3, r25	; 0x03
     e44:	82 83       	std	Z+2, r24	; 0x02
     e46:	67 e0       	ldi	r22, 0x07	; 7
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	44 1f       	adc	r20, r20
     e4e:	55 1f       	adc	r21, r21
     e50:	6a 95       	dec	r22
     e52:	d1 f7       	brne	.-12     	; 0xe48 <__unpack_f+0x52>
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	80 83       	st	Z, r24
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <__unpack_f+0x76>
     e5a:	22 0f       	add	r18, r18
     e5c:	33 1f       	adc	r19, r19
     e5e:	44 1f       	adc	r20, r20
     e60:	55 1f       	adc	r21, r21
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	93 83       	std	Z+3, r25	; 0x03
     e6a:	82 83       	std	Z+2, r24	; 0x02
     e6c:	20 30       	cpi	r18, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	38 07       	cpc	r19, r24
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	48 07       	cpc	r20, r24
     e76:	80 e4       	ldi	r24, 0x40	; 64
     e78:	58 07       	cpc	r21, r24
     e7a:	78 f3       	brcs	.-34     	; 0xe5a <__unpack_f+0x64>
     e7c:	20 c0       	rjmp	.+64     	; 0xebe <__unpack_f+0xc8>
     e7e:	8f 3f       	cpi	r24, 0xFF	; 255
     e80:	91 05       	cpc	r25, r1
     e82:	79 f4       	brne	.+30     	; 0xea2 <__unpack_f+0xac>
     e84:	21 15       	cp	r18, r1
     e86:	31 05       	cpc	r19, r1
     e88:	41 05       	cpc	r20, r1
     e8a:	51 05       	cpc	r21, r1
     e8c:	19 f4       	brne	.+6      	; 0xe94 <__unpack_f+0x9e>
     e8e:	84 e0       	ldi	r24, 0x04	; 4
     e90:	80 83       	st	Z, r24
     e92:	08 95       	ret
     e94:	44 ff       	sbrs	r20, 4
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <__unpack_f+0xa8>
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 83       	st	Z, r24
     e9c:	10 c0       	rjmp	.+32     	; 0xebe <__unpack_f+0xc8>
     e9e:	10 82       	st	Z, r1
     ea0:	0e c0       	rjmp	.+28     	; 0xebe <__unpack_f+0xc8>
     ea2:	8f 57       	subi	r24, 0x7F	; 127
     ea4:	90 40       	sbci	r25, 0x00	; 0
     ea6:	93 83       	std	Z+3, r25	; 0x03
     ea8:	82 83       	std	Z+2, r24	; 0x02
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	80 83       	st	Z, r24
     eae:	87 e0       	ldi	r24, 0x07	; 7
     eb0:	22 0f       	add	r18, r18
     eb2:	33 1f       	adc	r19, r19
     eb4:	44 1f       	adc	r20, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	8a 95       	dec	r24
     eba:	d1 f7       	brne	.-12     	; 0xeb0 <__unpack_f+0xba>
     ebc:	50 64       	ori	r21, 0x40	; 64
     ebe:	24 83       	std	Z+4, r18	; 0x04
     ec0:	35 83       	std	Z+5, r19	; 0x05
     ec2:	46 83       	std	Z+6, r20	; 0x06
     ec4:	57 83       	std	Z+7, r21	; 0x07
     ec6:	08 95       	ret

00000ec8 <__fpcmp_parts_f>:
     ec8:	fc 01       	movw	r30, r24
     eca:	db 01       	movw	r26, r22
     ecc:	90 81       	ld	r25, Z
     ece:	92 30       	cpi	r25, 0x02	; 2
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <__fpcmp_parts_f+0xc>
     ed2:	49 c0       	rjmp	.+146    	; 0xf66 <__fpcmp_parts_f+0x9e>
     ed4:	8c 91       	ld	r24, X
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	08 f4       	brcc	.+2      	; 0xedc <__fpcmp_parts_f+0x14>
     eda:	45 c0       	rjmp	.+138    	; 0xf66 <__fpcmp_parts_f+0x9e>
     edc:	94 30       	cpi	r25, 0x04	; 4
     ede:	51 f4       	brne	.+20     	; 0xef4 <__fpcmp_parts_f+0x2c>
     ee0:	61 81       	ldd	r22, Z+1	; 0x01
     ee2:	84 30       	cpi	r24, 0x04	; 4
     ee4:	b1 f5       	brne	.+108    	; 0xf52 <__fpcmp_parts_f+0x8a>
     ee6:	11 96       	adiw	r26, 0x01	; 1
     ee8:	2c 91       	ld	r18, X
     eea:	11 97       	sbiw	r26, 0x01	; 1
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	26 1b       	sub	r18, r22
     ef0:	31 09       	sbc	r19, r1
     ef2:	41 c0       	rjmp	.+130    	; 0xf76 <__fpcmp_parts_f+0xae>
     ef4:	84 30       	cpi	r24, 0x04	; 4
     ef6:	21 f0       	breq	.+8      	; 0xf00 <__fpcmp_parts_f+0x38>
     ef8:	92 30       	cpi	r25, 0x02	; 2
     efa:	41 f4       	brne	.+16     	; 0xf0c <__fpcmp_parts_f+0x44>
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	b1 f1       	breq	.+108    	; 0xf6c <__fpcmp_parts_f+0xa4>
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	8c 91       	ld	r24, X
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	88 23       	and	r24, r24
     f08:	a1 f1       	breq	.+104    	; 0xf72 <__fpcmp_parts_f+0xaa>
     f0a:	2d c0       	rjmp	.+90     	; 0xf66 <__fpcmp_parts_f+0x9e>
     f0c:	61 81       	ldd	r22, Z+1	; 0x01
     f0e:	82 30       	cpi	r24, 0x02	; 2
     f10:	01 f1       	breq	.+64     	; 0xf52 <__fpcmp_parts_f+0x8a>
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	8c 91       	ld	r24, X
     f16:	11 97       	sbiw	r26, 0x01	; 1
     f18:	68 17       	cp	r22, r24
     f1a:	d9 f4       	brne	.+54     	; 0xf52 <__fpcmp_parts_f+0x8a>
     f1c:	22 81       	ldd	r18, Z+2	; 0x02
     f1e:	33 81       	ldd	r19, Z+3	; 0x03
     f20:	12 96       	adiw	r26, 0x02	; 2
     f22:	8d 91       	ld	r24, X+
     f24:	9c 91       	ld	r25, X
     f26:	13 97       	sbiw	r26, 0x03	; 3
     f28:	82 17       	cp	r24, r18
     f2a:	93 07       	cpc	r25, r19
     f2c:	94 f0       	brlt	.+36     	; 0xf52 <__fpcmp_parts_f+0x8a>
     f2e:	28 17       	cp	r18, r24
     f30:	39 07       	cpc	r19, r25
     f32:	bc f0       	brlt	.+46     	; 0xf62 <__fpcmp_parts_f+0x9a>
     f34:	24 81       	ldd	r18, Z+4	; 0x04
     f36:	35 81       	ldd	r19, Z+5	; 0x05
     f38:	46 81       	ldd	r20, Z+6	; 0x06
     f3a:	57 81       	ldd	r21, Z+7	; 0x07
     f3c:	14 96       	adiw	r26, 0x04	; 4
     f3e:	8d 91       	ld	r24, X+
     f40:	9d 91       	ld	r25, X+
     f42:	0d 90       	ld	r0, X+
     f44:	bc 91       	ld	r27, X
     f46:	a0 2d       	mov	r26, r0
     f48:	82 17       	cp	r24, r18
     f4a:	93 07       	cpc	r25, r19
     f4c:	a4 07       	cpc	r26, r20
     f4e:	b5 07       	cpc	r27, r21
     f50:	18 f4       	brcc	.+6      	; 0xf58 <__fpcmp_parts_f+0x90>
     f52:	66 23       	and	r22, r22
     f54:	41 f0       	breq	.+16     	; 0xf66 <__fpcmp_parts_f+0x9e>
     f56:	0d c0       	rjmp	.+26     	; 0xf72 <__fpcmp_parts_f+0xaa>
     f58:	28 17       	cp	r18, r24
     f5a:	39 07       	cpc	r19, r25
     f5c:	4a 07       	cpc	r20, r26
     f5e:	5b 07       	cpc	r21, r27
     f60:	28 f4       	brcc	.+10     	; 0xf6c <__fpcmp_parts_f+0xa4>
     f62:	66 23       	and	r22, r22
     f64:	31 f0       	breq	.+12     	; 0xf72 <__fpcmp_parts_f+0xaa>
     f66:	21 e0       	ldi	r18, 0x01	; 1
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	05 c0       	rjmp	.+10     	; 0xf76 <__fpcmp_parts_f+0xae>
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <__fpcmp_parts_f+0xae>
     f72:	2f ef       	ldi	r18, 0xFF	; 255
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	c9 01       	movw	r24, r18
     f78:	08 95       	ret

00000f7a <__prologue_saves__>:
     f7a:	2f 92       	push	r2
     f7c:	3f 92       	push	r3
     f7e:	4f 92       	push	r4
     f80:	5f 92       	push	r5
     f82:	6f 92       	push	r6
     f84:	7f 92       	push	r7
     f86:	8f 92       	push	r8
     f88:	9f 92       	push	r9
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	ca 1b       	sub	r28, r26
     fa4:	db 0b       	sbc	r29, r27
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	09 94       	ijmp

00000fb2 <__epilogue_restores__>:
     fb2:	2a 88       	ldd	r2, Y+18	; 0x12
     fb4:	39 88       	ldd	r3, Y+17	; 0x11
     fb6:	48 88       	ldd	r4, Y+16	; 0x10
     fb8:	5f 84       	ldd	r5, Y+15	; 0x0f
     fba:	6e 84       	ldd	r6, Y+14	; 0x0e
     fbc:	7d 84       	ldd	r7, Y+13	; 0x0d
     fbe:	8c 84       	ldd	r8, Y+12	; 0x0c
     fc0:	9b 84       	ldd	r9, Y+11	; 0x0b
     fc2:	aa 84       	ldd	r10, Y+10	; 0x0a
     fc4:	b9 84       	ldd	r11, Y+9	; 0x09
     fc6:	c8 84       	ldd	r12, Y+8	; 0x08
     fc8:	df 80       	ldd	r13, Y+7	; 0x07
     fca:	ee 80       	ldd	r14, Y+6	; 0x06
     fcc:	fd 80       	ldd	r15, Y+5	; 0x05
     fce:	0c 81       	ldd	r16, Y+4	; 0x04
     fd0:	1b 81       	ldd	r17, Y+3	; 0x03
     fd2:	aa 81       	ldd	r26, Y+2	; 0x02
     fd4:	b9 81       	ldd	r27, Y+1	; 0x01
     fd6:	ce 0f       	add	r28, r30
     fd8:	d1 1d       	adc	r29, r1
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	ed 01       	movw	r28, r26
     fe6:	08 95       	ret

00000fe8 <vsprintf>:
     fe8:	ae e0       	ldi	r26, 0x0E	; 14
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e9 ef       	ldi	r30, 0xF9	; 249
     fee:	f7 e0       	ldi	r31, 0x07	; 7
     ff0:	d2 cf       	rjmp	.-92     	; 0xf96 <__prologue_saves__+0x1c>
     ff2:	8c 01       	movw	r16, r24
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	8c 83       	std	Y+4, r24	; 0x04
     ff8:	1a 83       	std	Y+2, r17	; 0x02
     ffa:	09 83       	std	Y+1, r16	; 0x01
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	9f e7       	ldi	r25, 0x7F	; 127
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	ce 01       	movw	r24, r28
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	08 d0       	rcall	.+16     	; 0x101a <vfprintf>
    100a:	ef 81       	ldd	r30, Y+7	; 0x07
    100c:	f8 85       	ldd	r31, Y+8	; 0x08
    100e:	e0 0f       	add	r30, r16
    1010:	f1 1f       	adc	r31, r17
    1012:	10 82       	st	Z, r1
    1014:	2e 96       	adiw	r28, 0x0e	; 14
    1016:	e4 e0       	ldi	r30, 0x04	; 4
    1018:	da cf       	rjmp	.-76     	; 0xfce <__epilogue_restores__+0x1c>

0000101a <vfprintf>:
    101a:	ac e0       	ldi	r26, 0x0C	; 12
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e2 e1       	ldi	r30, 0x12	; 18
    1020:	f8 e0       	ldi	r31, 0x08	; 8
    1022:	ab cf       	rjmp	.-170    	; 0xf7a <__prologue_saves__>
    1024:	6c 01       	movw	r12, r24
    1026:	1b 01       	movw	r2, r22
    1028:	8a 01       	movw	r16, r20
    102a:	fc 01       	movw	r30, r24
    102c:	17 82       	std	Z+7, r1	; 0x07
    102e:	16 82       	std	Z+6, r1	; 0x06
    1030:	83 81       	ldd	r24, Z+3	; 0x03
    1032:	81 ff       	sbrs	r24, 1
    1034:	c4 c1       	rjmp	.+904    	; 0x13be <vfprintf+0x3a4>
    1036:	2e 01       	movw	r4, r28
    1038:	08 94       	sec
    103a:	41 1c       	adc	r4, r1
    103c:	51 1c       	adc	r5, r1
    103e:	f6 01       	movw	r30, r12
    1040:	93 81       	ldd	r25, Z+3	; 0x03
    1042:	f1 01       	movw	r30, r2
    1044:	93 fd       	sbrc	r25, 3
    1046:	85 91       	lpm	r24, Z+
    1048:	93 ff       	sbrs	r25, 3
    104a:	81 91       	ld	r24, Z+
    104c:	1f 01       	movw	r2, r30
    104e:	88 23       	and	r24, r24
    1050:	09 f4       	brne	.+2      	; 0x1054 <vfprintf+0x3a>
    1052:	b1 c1       	rjmp	.+866    	; 0x13b6 <vfprintf+0x39c>
    1054:	85 32       	cpi	r24, 0x25	; 37
    1056:	39 f4       	brne	.+14     	; 0x1066 <vfprintf+0x4c>
    1058:	93 fd       	sbrc	r25, 3
    105a:	85 91       	lpm	r24, Z+
    105c:	93 ff       	sbrs	r25, 3
    105e:	81 91       	ld	r24, Z+
    1060:	1f 01       	movw	r2, r30
    1062:	85 32       	cpi	r24, 0x25	; 37
    1064:	21 f4       	brne	.+8      	; 0x106e <vfprintf+0x54>
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	b6 01       	movw	r22, r12
    106a:	c5 d1       	rcall	.+906    	; 0x13f6 <fputc>
    106c:	e8 cf       	rjmp	.-48     	; 0x103e <vfprintf+0x24>
    106e:	ee 24       	eor	r14, r14
    1070:	ff 24       	eor	r15, r15
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	20 32       	cpi	r18, 0x20	; 32
    1076:	b0 f4       	brcc	.+44     	; 0x10a4 <vfprintf+0x8a>
    1078:	8b 32       	cpi	r24, 0x2B	; 43
    107a:	69 f0       	breq	.+26     	; 0x1096 <vfprintf+0x7c>
    107c:	8c 32       	cpi	r24, 0x2C	; 44
    107e:	28 f4       	brcc	.+10     	; 0x108a <vfprintf+0x70>
    1080:	80 32       	cpi	r24, 0x20	; 32
    1082:	51 f0       	breq	.+20     	; 0x1098 <vfprintf+0x7e>
    1084:	83 32       	cpi	r24, 0x23	; 35
    1086:	71 f4       	brne	.+28     	; 0x10a4 <vfprintf+0x8a>
    1088:	0b c0       	rjmp	.+22     	; 0x10a0 <vfprintf+0x86>
    108a:	8d 32       	cpi	r24, 0x2D	; 45
    108c:	39 f0       	breq	.+14     	; 0x109c <vfprintf+0x82>
    108e:	80 33       	cpi	r24, 0x30	; 48
    1090:	49 f4       	brne	.+18     	; 0x10a4 <vfprintf+0x8a>
    1092:	21 60       	ori	r18, 0x01	; 1
    1094:	2c c0       	rjmp	.+88     	; 0x10ee <vfprintf+0xd4>
    1096:	22 60       	ori	r18, 0x02	; 2
    1098:	24 60       	ori	r18, 0x04	; 4
    109a:	29 c0       	rjmp	.+82     	; 0x10ee <vfprintf+0xd4>
    109c:	28 60       	ori	r18, 0x08	; 8
    109e:	27 c0       	rjmp	.+78     	; 0x10ee <vfprintf+0xd4>
    10a0:	20 61       	ori	r18, 0x10	; 16
    10a2:	25 c0       	rjmp	.+74     	; 0x10ee <vfprintf+0xd4>
    10a4:	27 fd       	sbrc	r18, 7
    10a6:	2c c0       	rjmp	.+88     	; 0x1100 <vfprintf+0xe6>
    10a8:	38 2f       	mov	r19, r24
    10aa:	30 53       	subi	r19, 0x30	; 48
    10ac:	3a 30       	cpi	r19, 0x0A	; 10
    10ae:	98 f4       	brcc	.+38     	; 0x10d6 <vfprintf+0xbc>
    10b0:	26 ff       	sbrs	r18, 6
    10b2:	08 c0       	rjmp	.+16     	; 0x10c4 <vfprintf+0xaa>
    10b4:	8e 2d       	mov	r24, r14
    10b6:	88 0f       	add	r24, r24
    10b8:	e8 2e       	mov	r14, r24
    10ba:	ee 0c       	add	r14, r14
    10bc:	ee 0c       	add	r14, r14
    10be:	e8 0e       	add	r14, r24
    10c0:	e3 0e       	add	r14, r19
    10c2:	15 c0       	rjmp	.+42     	; 0x10ee <vfprintf+0xd4>
    10c4:	8f 2d       	mov	r24, r15
    10c6:	88 0f       	add	r24, r24
    10c8:	f8 2e       	mov	r15, r24
    10ca:	ff 0c       	add	r15, r15
    10cc:	ff 0c       	add	r15, r15
    10ce:	f8 0e       	add	r15, r24
    10d0:	f3 0e       	add	r15, r19
    10d2:	20 62       	ori	r18, 0x20	; 32
    10d4:	0c c0       	rjmp	.+24     	; 0x10ee <vfprintf+0xd4>
    10d6:	8e 32       	cpi	r24, 0x2E	; 46
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <vfprintf+0xc8>
    10da:	26 fd       	sbrc	r18, 6
    10dc:	6c c1       	rjmp	.+728    	; 0x13b6 <vfprintf+0x39c>
    10de:	20 64       	ori	r18, 0x40	; 64
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <vfprintf+0xd4>
    10e2:	8c 36       	cpi	r24, 0x6C	; 108
    10e4:	11 f4       	brne	.+4      	; 0x10ea <vfprintf+0xd0>
    10e6:	20 68       	ori	r18, 0x80	; 128
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <vfprintf+0xd4>
    10ea:	88 36       	cpi	r24, 0x68	; 104
    10ec:	49 f4       	brne	.+18     	; 0x1100 <vfprintf+0xe6>
    10ee:	f1 01       	movw	r30, r2
    10f0:	93 fd       	sbrc	r25, 3
    10f2:	85 91       	lpm	r24, Z+
    10f4:	93 ff       	sbrs	r25, 3
    10f6:	81 91       	ld	r24, Z+
    10f8:	1f 01       	movw	r2, r30
    10fa:	88 23       	and	r24, r24
    10fc:	09 f0       	breq	.+2      	; 0x1100 <vfprintf+0xe6>
    10fe:	ba cf       	rjmp	.-140    	; 0x1074 <vfprintf+0x5a>
    1100:	98 2f       	mov	r25, r24
    1102:	95 54       	subi	r25, 0x45	; 69
    1104:	93 30       	cpi	r25, 0x03	; 3
    1106:	18 f0       	brcs	.+6      	; 0x110e <vfprintf+0xf4>
    1108:	90 52       	subi	r25, 0x20	; 32
    110a:	93 30       	cpi	r25, 0x03	; 3
    110c:	28 f4       	brcc	.+10     	; 0x1118 <vfprintf+0xfe>
    110e:	0c 5f       	subi	r16, 0xFC	; 252
    1110:	1f 4f       	sbci	r17, 0xFF	; 255
    1112:	ff e3       	ldi	r31, 0x3F	; 63
    1114:	f9 83       	std	Y+1, r31	; 0x01
    1116:	0d c0       	rjmp	.+26     	; 0x1132 <vfprintf+0x118>
    1118:	83 36       	cpi	r24, 0x63	; 99
    111a:	31 f0       	breq	.+12     	; 0x1128 <vfprintf+0x10e>
    111c:	83 37       	cpi	r24, 0x73	; 115
    111e:	71 f0       	breq	.+28     	; 0x113c <vfprintf+0x122>
    1120:	83 35       	cpi	r24, 0x53	; 83
    1122:	09 f0       	breq	.+2      	; 0x1126 <vfprintf+0x10c>
    1124:	5c c0       	rjmp	.+184    	; 0x11de <vfprintf+0x1c4>
    1126:	21 c0       	rjmp	.+66     	; 0x116a <vfprintf+0x150>
    1128:	f8 01       	movw	r30, r16
    112a:	80 81       	ld	r24, Z
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	0e 5f       	subi	r16, 0xFE	; 254
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	42 01       	movw	r8, r4
    1134:	71 e0       	ldi	r23, 0x01	; 1
    1136:	a7 2e       	mov	r10, r23
    1138:	b1 2c       	mov	r11, r1
    113a:	15 c0       	rjmp	.+42     	; 0x1166 <vfprintf+0x14c>
    113c:	62 e0       	ldi	r22, 0x02	; 2
    113e:	66 2e       	mov	r6, r22
    1140:	71 2c       	mov	r7, r1
    1142:	60 0e       	add	r6, r16
    1144:	71 1e       	adc	r7, r17
    1146:	f8 01       	movw	r30, r16
    1148:	80 80       	ld	r8, Z
    114a:	91 80       	ldd	r9, Z+1	; 0x01
    114c:	26 ff       	sbrs	r18, 6
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <vfprintf+0x13c>
    1150:	6e 2d       	mov	r22, r14
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	02 c0       	rjmp	.+4      	; 0x115a <vfprintf+0x140>
    1156:	6f ef       	ldi	r22, 0xFF	; 255
    1158:	7f ef       	ldi	r23, 0xFF	; 255
    115a:	c4 01       	movw	r24, r8
    115c:	2c 87       	std	Y+12, r18	; 0x0c
    115e:	40 d1       	rcall	.+640    	; 0x13e0 <strnlen>
    1160:	5c 01       	movw	r10, r24
    1162:	83 01       	movw	r16, r6
    1164:	2c 85       	ldd	r18, Y+12	; 0x0c
    1166:	2f 77       	andi	r18, 0x7F	; 127
    1168:	16 c0       	rjmp	.+44     	; 0x1196 <vfprintf+0x17c>
    116a:	52 e0       	ldi	r21, 0x02	; 2
    116c:	65 2e       	mov	r6, r21
    116e:	71 2c       	mov	r7, r1
    1170:	60 0e       	add	r6, r16
    1172:	71 1e       	adc	r7, r17
    1174:	f8 01       	movw	r30, r16
    1176:	80 80       	ld	r8, Z
    1178:	91 80       	ldd	r9, Z+1	; 0x01
    117a:	26 ff       	sbrs	r18, 6
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <vfprintf+0x16a>
    117e:	6e 2d       	mov	r22, r14
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <vfprintf+0x16e>
    1184:	6f ef       	ldi	r22, 0xFF	; 255
    1186:	7f ef       	ldi	r23, 0xFF	; 255
    1188:	c4 01       	movw	r24, r8
    118a:	2c 87       	std	Y+12, r18	; 0x0c
    118c:	1e d1       	rcall	.+572    	; 0x13ca <strnlen_P>
    118e:	5c 01       	movw	r10, r24
    1190:	2c 85       	ldd	r18, Y+12	; 0x0c
    1192:	20 68       	ori	r18, 0x80	; 128
    1194:	83 01       	movw	r16, r6
    1196:	23 fd       	sbrc	r18, 3
    1198:	1e c0       	rjmp	.+60     	; 0x11d6 <vfprintf+0x1bc>
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <vfprintf+0x190>
    119c:	80 e2       	ldi	r24, 0x20	; 32
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	b6 01       	movw	r22, r12
    11a2:	2c 87       	std	Y+12, r18	; 0x0c
    11a4:	28 d1       	rcall	.+592    	; 0x13f6 <fputc>
    11a6:	fa 94       	dec	r15
    11a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11aa:	8f 2d       	mov	r24, r15
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a8 16       	cp	r10, r24
    11b0:	b9 06       	cpc	r11, r25
    11b2:	a0 f3       	brcs	.-24     	; 0x119c <vfprintf+0x182>
    11b4:	10 c0       	rjmp	.+32     	; 0x11d6 <vfprintf+0x1bc>
    11b6:	f4 01       	movw	r30, r8
    11b8:	27 fd       	sbrc	r18, 7
    11ba:	85 91       	lpm	r24, Z+
    11bc:	27 ff       	sbrs	r18, 7
    11be:	81 91       	ld	r24, Z+
    11c0:	4f 01       	movw	r8, r30
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	b6 01       	movw	r22, r12
    11c6:	2c 87       	std	Y+12, r18	; 0x0c
    11c8:	16 d1       	rcall	.+556    	; 0x13f6 <fputc>
    11ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    11cc:	f1 10       	cpse	r15, r1
    11ce:	fa 94       	dec	r15
    11d0:	08 94       	sec
    11d2:	a1 08       	sbc	r10, r1
    11d4:	b1 08       	sbc	r11, r1
    11d6:	a1 14       	cp	r10, r1
    11d8:	b1 04       	cpc	r11, r1
    11da:	69 f7       	brne	.-38     	; 0x11b6 <vfprintf+0x19c>
    11dc:	e9 c0       	rjmp	.+466    	; 0x13b0 <vfprintf+0x396>
    11de:	84 36       	cpi	r24, 0x64	; 100
    11e0:	11 f0       	breq	.+4      	; 0x11e6 <vfprintf+0x1cc>
    11e2:	89 36       	cpi	r24, 0x69	; 105
    11e4:	41 f5       	brne	.+80     	; 0x1236 <vfprintf+0x21c>
    11e6:	27 ff       	sbrs	r18, 7
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <vfprintf+0x1e0>
    11ea:	f8 01       	movw	r30, r16
    11ec:	60 81       	ld	r22, Z
    11ee:	71 81       	ldd	r23, Z+1	; 0x01
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	0c 5f       	subi	r16, 0xFC	; 252
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <vfprintf+0x1f2>
    11fa:	f8 01       	movw	r30, r16
    11fc:	60 81       	ld	r22, Z
    11fe:	71 81       	ldd	r23, Z+1	; 0x01
    1200:	88 27       	eor	r24, r24
    1202:	77 fd       	sbrc	r23, 7
    1204:	80 95       	com	r24
    1206:	98 2f       	mov	r25, r24
    1208:	0e 5f       	subi	r16, 0xFE	; 254
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	4f e6       	ldi	r20, 0x6F	; 111
    120e:	b4 2e       	mov	r11, r20
    1210:	b2 22       	and	r11, r18
    1212:	97 ff       	sbrs	r25, 7
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <vfprintf+0x20e>
    1216:	90 95       	com	r25
    1218:	80 95       	com	r24
    121a:	70 95       	com	r23
    121c:	61 95       	neg	r22
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	f0 e8       	ldi	r31, 0x80	; 128
    1226:	bf 2a       	or	r11, r31
    1228:	a2 01       	movw	r20, r4
    122a:	2a e0       	ldi	r18, 0x0A	; 10
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	0f d1       	rcall	.+542    	; 0x144e <__ultoa_invert>
    1230:	78 2e       	mov	r7, r24
    1232:	74 18       	sub	r7, r4
    1234:	44 c0       	rjmp	.+136    	; 0x12be <vfprintf+0x2a4>
    1236:	85 37       	cpi	r24, 0x75	; 117
    1238:	31 f4       	brne	.+12     	; 0x1246 <vfprintf+0x22c>
    123a:	3f ee       	ldi	r19, 0xEF	; 239
    123c:	b3 2e       	mov	r11, r19
    123e:	b2 22       	and	r11, r18
    1240:	2a e0       	ldi	r18, 0x0A	; 10
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	25 c0       	rjmp	.+74     	; 0x1290 <vfprintf+0x276>
    1246:	99 ef       	ldi	r25, 0xF9	; 249
    1248:	b9 2e       	mov	r11, r25
    124a:	b2 22       	and	r11, r18
    124c:	8f 36       	cpi	r24, 0x6F	; 111
    124e:	c1 f0       	breq	.+48     	; 0x1280 <vfprintf+0x266>
    1250:	80 37       	cpi	r24, 0x70	; 112
    1252:	20 f4       	brcc	.+8      	; 0x125c <vfprintf+0x242>
    1254:	88 35       	cpi	r24, 0x58	; 88
    1256:	09 f0       	breq	.+2      	; 0x125a <vfprintf+0x240>
    1258:	ae c0       	rjmp	.+348    	; 0x13b6 <vfprintf+0x39c>
    125a:	0d c0       	rjmp	.+26     	; 0x1276 <vfprintf+0x25c>
    125c:	80 37       	cpi	r24, 0x70	; 112
    125e:	21 f0       	breq	.+8      	; 0x1268 <vfprintf+0x24e>
    1260:	88 37       	cpi	r24, 0x78	; 120
    1262:	09 f0       	breq	.+2      	; 0x1266 <vfprintf+0x24c>
    1264:	a8 c0       	rjmp	.+336    	; 0x13b6 <vfprintf+0x39c>
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x252>
    1268:	20 e1       	ldi	r18, 0x10	; 16
    126a:	b2 2a       	or	r11, r18
    126c:	b4 fe       	sbrs	r11, 4
    126e:	0b c0       	rjmp	.+22     	; 0x1286 <vfprintf+0x26c>
    1270:	84 e0       	ldi	r24, 0x04	; 4
    1272:	b8 2a       	or	r11, r24
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <vfprintf+0x26c>
    1276:	b4 fe       	sbrs	r11, 4
    1278:	09 c0       	rjmp	.+18     	; 0x128c <vfprintf+0x272>
    127a:	e6 e0       	ldi	r30, 0x06	; 6
    127c:	be 2a       	or	r11, r30
    127e:	06 c0       	rjmp	.+12     	; 0x128c <vfprintf+0x272>
    1280:	28 e0       	ldi	r18, 0x08	; 8
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <vfprintf+0x276>
    1286:	20 e1       	ldi	r18, 0x10	; 16
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <vfprintf+0x276>
    128c:	20 e1       	ldi	r18, 0x10	; 16
    128e:	32 e0       	ldi	r19, 0x02	; 2
    1290:	b7 fe       	sbrs	r11, 7
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <vfprintf+0x28a>
    1294:	f8 01       	movw	r30, r16
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	0c 5f       	subi	r16, 0xFC	; 252
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <vfprintf+0x298>
    12a4:	f8 01       	movw	r30, r16
    12a6:	60 81       	ld	r22, Z
    12a8:	71 81       	ldd	r23, Z+1	; 0x01
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 5f       	subi	r16, 0xFE	; 254
    12b0:	1f 4f       	sbci	r17, 0xFF	; 255
    12b2:	a2 01       	movw	r20, r4
    12b4:	cc d0       	rcall	.+408    	; 0x144e <__ultoa_invert>
    12b6:	78 2e       	mov	r7, r24
    12b8:	74 18       	sub	r7, r4
    12ba:	ff e7       	ldi	r31, 0x7F	; 127
    12bc:	bf 22       	and	r11, r31
    12be:	b6 fe       	sbrs	r11, 6
    12c0:	0b c0       	rjmp	.+22     	; 0x12d8 <vfprintf+0x2be>
    12c2:	2e ef       	ldi	r18, 0xFE	; 254
    12c4:	b2 22       	and	r11, r18
    12c6:	7e 14       	cp	r7, r14
    12c8:	38 f4       	brcc	.+14     	; 0x12d8 <vfprintf+0x2be>
    12ca:	b4 fe       	sbrs	r11, 4
    12cc:	07 c0       	rjmp	.+14     	; 0x12dc <vfprintf+0x2c2>
    12ce:	b2 fc       	sbrc	r11, 2
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <vfprintf+0x2c2>
    12d2:	8f ee       	ldi	r24, 0xEF	; 239
    12d4:	b8 22       	and	r11, r24
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <vfprintf+0x2c2>
    12d8:	a7 2c       	mov	r10, r7
    12da:	01 c0       	rjmp	.+2      	; 0x12de <vfprintf+0x2c4>
    12dc:	ae 2c       	mov	r10, r14
    12de:	8b 2d       	mov	r24, r11
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	b4 fe       	sbrs	r11, 4
    12e4:	0d c0       	rjmp	.+26     	; 0x1300 <vfprintf+0x2e6>
    12e6:	fe 01       	movw	r30, r28
    12e8:	e7 0d       	add	r30, r7
    12ea:	f1 1d       	adc	r31, r1
    12ec:	20 81       	ld	r18, Z
    12ee:	20 33       	cpi	r18, 0x30	; 48
    12f0:	19 f4       	brne	.+6      	; 0x12f8 <vfprintf+0x2de>
    12f2:	e9 ee       	ldi	r30, 0xE9	; 233
    12f4:	be 22       	and	r11, r30
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <vfprintf+0x2f0>
    12f8:	a3 94       	inc	r10
    12fa:	b2 fe       	sbrs	r11, 2
    12fc:	06 c0       	rjmp	.+12     	; 0x130a <vfprintf+0x2f0>
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <vfprintf+0x2ee>
    1300:	86 78       	andi	r24, 0x86	; 134
    1302:	90 70       	andi	r25, 0x00	; 0
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	09 f0       	breq	.+2      	; 0x130a <vfprintf+0x2f0>
    1308:	a3 94       	inc	r10
    130a:	8b 2c       	mov	r8, r11
    130c:	99 24       	eor	r9, r9
    130e:	b3 fc       	sbrc	r11, 3
    1310:	13 c0       	rjmp	.+38     	; 0x1338 <vfprintf+0x31e>
    1312:	b0 fe       	sbrs	r11, 0
    1314:	0e c0       	rjmp	.+28     	; 0x1332 <vfprintf+0x318>
    1316:	af 14       	cp	r10, r15
    1318:	28 f4       	brcc	.+10     	; 0x1324 <vfprintf+0x30a>
    131a:	e7 2c       	mov	r14, r7
    131c:	ef 0c       	add	r14, r15
    131e:	ea 18       	sub	r14, r10
    1320:	af 2c       	mov	r10, r15
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <vfprintf+0x318>
    1324:	e7 2c       	mov	r14, r7
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <vfprintf+0x318>
    1328:	80 e2       	ldi	r24, 0x20	; 32
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	b6 01       	movw	r22, r12
    132e:	63 d0       	rcall	.+198    	; 0x13f6 <fputc>
    1330:	a3 94       	inc	r10
    1332:	af 14       	cp	r10, r15
    1334:	c8 f3       	brcs	.-14     	; 0x1328 <vfprintf+0x30e>
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <vfprintf+0x326>
    1338:	af 14       	cp	r10, r15
    133a:	10 f4       	brcc	.+4      	; 0x1340 <vfprintf+0x326>
    133c:	fa 18       	sub	r15, r10
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <vfprintf+0x328>
    1340:	ff 24       	eor	r15, r15
    1342:	84 fe       	sbrs	r8, 4
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <vfprintf+0x348>
    1346:	80 e3       	ldi	r24, 0x30	; 48
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	b6 01       	movw	r22, r12
    134c:	54 d0       	rcall	.+168    	; 0x13f6 <fputc>
    134e:	82 fe       	sbrs	r8, 2
    1350:	1d c0       	rjmp	.+58     	; 0x138c <vfprintf+0x372>
    1352:	81 fe       	sbrs	r8, 1
    1354:	03 c0       	rjmp	.+6      	; 0x135c <vfprintf+0x342>
    1356:	88 e5       	ldi	r24, 0x58	; 88
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	10 c0       	rjmp	.+32     	; 0x137c <vfprintf+0x362>
    135c:	88 e7       	ldi	r24, 0x78	; 120
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0d c0       	rjmp	.+26     	; 0x137c <vfprintf+0x362>
    1362:	c4 01       	movw	r24, r8
    1364:	86 78       	andi	r24, 0x86	; 134
    1366:	90 70       	andi	r25, 0x00	; 0
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	81 f0       	breq	.+32     	; 0x138c <vfprintf+0x372>
    136c:	81 fc       	sbrc	r8, 1
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <vfprintf+0x35a>
    1370:	80 e2       	ldi	r24, 0x20	; 32
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <vfprintf+0x35c>
    1374:	8b e2       	ldi	r24, 0x2B	; 43
    1376:	b7 fc       	sbrc	r11, 7
    1378:	8d e2       	ldi	r24, 0x2D	; 45
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	b6 01       	movw	r22, r12
    137e:	3b d0       	rcall	.+118    	; 0x13f6 <fputc>
    1380:	05 c0       	rjmp	.+10     	; 0x138c <vfprintf+0x372>
    1382:	80 e3       	ldi	r24, 0x30	; 48
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	b6 01       	movw	r22, r12
    1388:	36 d0       	rcall	.+108    	; 0x13f6 <fputc>
    138a:	ea 94       	dec	r14
    138c:	7e 14       	cp	r7, r14
    138e:	c8 f3       	brcs	.-14     	; 0x1382 <vfprintf+0x368>
    1390:	7a 94       	dec	r7
    1392:	f2 01       	movw	r30, r4
    1394:	e7 0d       	add	r30, r7
    1396:	f1 1d       	adc	r31, r1
    1398:	80 81       	ld	r24, Z
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	b6 01       	movw	r22, r12
    139e:	2b d0       	rcall	.+86     	; 0x13f6 <fputc>
    13a0:	77 20       	and	r7, r7
    13a2:	b1 f7       	brne	.-20     	; 0x1390 <vfprintf+0x376>
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <vfprintf+0x396>
    13a6:	80 e2       	ldi	r24, 0x20	; 32
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	b6 01       	movw	r22, r12
    13ac:	24 d0       	rcall	.+72     	; 0x13f6 <fputc>
    13ae:	fa 94       	dec	r15
    13b0:	ff 20       	and	r15, r15
    13b2:	c9 f7       	brne	.-14     	; 0x13a6 <vfprintf+0x38c>
    13b4:	44 ce       	rjmp	.-888    	; 0x103e <vfprintf+0x24>
    13b6:	f6 01       	movw	r30, r12
    13b8:	26 81       	ldd	r18, Z+6	; 0x06
    13ba:	37 81       	ldd	r19, Z+7	; 0x07
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <vfprintf+0x3a8>
    13be:	2f ef       	ldi	r18, 0xFF	; 255
    13c0:	3f ef       	ldi	r19, 0xFF	; 255
    13c2:	c9 01       	movw	r24, r18
    13c4:	2c 96       	adiw	r28, 0x0c	; 12
    13c6:	e2 e1       	ldi	r30, 0x12	; 18
    13c8:	f4 cd       	rjmp	.-1048   	; 0xfb2 <__epilogue_restores__>

000013ca <strnlen_P>:
    13ca:	fc 01       	movw	r30, r24
    13cc:	05 90       	lpm	r0, Z+
    13ce:	61 50       	subi	r22, 0x01	; 1
    13d0:	70 40       	sbci	r23, 0x00	; 0
    13d2:	01 10       	cpse	r0, r1
    13d4:	d8 f7       	brcc	.-10     	; 0x13cc <strnlen_P+0x2>
    13d6:	80 95       	com	r24
    13d8:	90 95       	com	r25
    13da:	8e 0f       	add	r24, r30
    13dc:	9f 1f       	adc	r25, r31
    13de:	08 95       	ret

000013e0 <strnlen>:
    13e0:	fc 01       	movw	r30, r24
    13e2:	61 50       	subi	r22, 0x01	; 1
    13e4:	70 40       	sbci	r23, 0x00	; 0
    13e6:	01 90       	ld	r0, Z+
    13e8:	01 10       	cpse	r0, r1
    13ea:	d8 f7       	brcc	.-10     	; 0x13e2 <strnlen+0x2>
    13ec:	80 95       	com	r24
    13ee:	90 95       	com	r25
    13f0:	8e 0f       	add	r24, r30
    13f2:	9f 1f       	adc	r25, r31
    13f4:	08 95       	ret

000013f6 <fputc>:
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	8c 01       	movw	r16, r24
    1400:	eb 01       	movw	r28, r22
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	81 ff       	sbrs	r24, 1
    1406:	1b c0       	rjmp	.+54     	; 0x143e <fputc+0x48>
    1408:	82 ff       	sbrs	r24, 2
    140a:	0d c0       	rjmp	.+26     	; 0x1426 <fputc+0x30>
    140c:	2e 81       	ldd	r18, Y+6	; 0x06
    140e:	3f 81       	ldd	r19, Y+7	; 0x07
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	28 17       	cp	r18, r24
    1416:	39 07       	cpc	r19, r25
    1418:	64 f4       	brge	.+24     	; 0x1432 <fputc+0x3c>
    141a:	e8 81       	ld	r30, Y
    141c:	f9 81       	ldd	r31, Y+1	; 0x01
    141e:	01 93       	st	Z+, r16
    1420:	f9 83       	std	Y+1, r31	; 0x01
    1422:	e8 83       	st	Y, r30
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <fputc+0x3c>
    1426:	e8 85       	ldd	r30, Y+8	; 0x08
    1428:	f9 85       	ldd	r31, Y+9	; 0x09
    142a:	80 2f       	mov	r24, r16
    142c:	09 95       	icall
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	31 f4       	brne	.+12     	; 0x143e <fputc+0x48>
    1432:	8e 81       	ldd	r24, Y+6	; 0x06
    1434:	9f 81       	ldd	r25, Y+7	; 0x07
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	9f 83       	std	Y+7, r25	; 0x07
    143a:	8e 83       	std	Y+6, r24	; 0x06
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <fputc+0x4c>
    143e:	0f ef       	ldi	r16, 0xFF	; 255
    1440:	1f ef       	ldi	r17, 0xFF	; 255
    1442:	c8 01       	movw	r24, r16
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <__ultoa_invert>:
    144e:	fa 01       	movw	r30, r20
    1450:	aa 27       	eor	r26, r26
    1452:	28 30       	cpi	r18, 0x08	; 8
    1454:	51 f1       	breq	.+84     	; 0x14aa <__ultoa_invert+0x5c>
    1456:	20 31       	cpi	r18, 0x10	; 16
    1458:	81 f1       	breq	.+96     	; 0x14ba <__ultoa_invert+0x6c>
    145a:	e8 94       	clt
    145c:	6f 93       	push	r22
    145e:	6e 7f       	andi	r22, 0xFE	; 254
    1460:	6e 5f       	subi	r22, 0xFE	; 254
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	8f 4f       	sbci	r24, 0xFF	; 255
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	af 4f       	sbci	r26, 0xFF	; 255
    146a:	b1 e0       	ldi	r27, 0x01	; 1
    146c:	3e d0       	rcall	.+124    	; 0x14ea <__ultoa_invert+0x9c>
    146e:	b4 e0       	ldi	r27, 0x04	; 4
    1470:	3c d0       	rcall	.+120    	; 0x14ea <__ultoa_invert+0x9c>
    1472:	67 0f       	add	r22, r23
    1474:	78 1f       	adc	r23, r24
    1476:	89 1f       	adc	r24, r25
    1478:	9a 1f       	adc	r25, r26
    147a:	a1 1d       	adc	r26, r1
    147c:	68 0f       	add	r22, r24
    147e:	79 1f       	adc	r23, r25
    1480:	8a 1f       	adc	r24, r26
    1482:	91 1d       	adc	r25, r1
    1484:	a1 1d       	adc	r26, r1
    1486:	6a 0f       	add	r22, r26
    1488:	71 1d       	adc	r23, r1
    148a:	81 1d       	adc	r24, r1
    148c:	91 1d       	adc	r25, r1
    148e:	a1 1d       	adc	r26, r1
    1490:	20 d0       	rcall	.+64     	; 0x14d2 <__ultoa_invert+0x84>
    1492:	09 f4       	brne	.+2      	; 0x1496 <__ultoa_invert+0x48>
    1494:	68 94       	set
    1496:	3f 91       	pop	r19
    1498:	2a e0       	ldi	r18, 0x0A	; 10
    149a:	26 9f       	mul	r18, r22
    149c:	11 24       	eor	r1, r1
    149e:	30 19       	sub	r19, r0
    14a0:	30 5d       	subi	r19, 0xD0	; 208
    14a2:	31 93       	st	Z+, r19
    14a4:	de f6       	brtc	.-74     	; 0x145c <__ultoa_invert+0xe>
    14a6:	cf 01       	movw	r24, r30
    14a8:	08 95       	ret
    14aa:	46 2f       	mov	r20, r22
    14ac:	47 70       	andi	r20, 0x07	; 7
    14ae:	40 5d       	subi	r20, 0xD0	; 208
    14b0:	41 93       	st	Z+, r20
    14b2:	b3 e0       	ldi	r27, 0x03	; 3
    14b4:	0f d0       	rcall	.+30     	; 0x14d4 <__ultoa_invert+0x86>
    14b6:	c9 f7       	brne	.-14     	; 0x14aa <__ultoa_invert+0x5c>
    14b8:	f6 cf       	rjmp	.-20     	; 0x14a6 <__ultoa_invert+0x58>
    14ba:	46 2f       	mov	r20, r22
    14bc:	4f 70       	andi	r20, 0x0F	; 15
    14be:	40 5d       	subi	r20, 0xD0	; 208
    14c0:	4a 33       	cpi	r20, 0x3A	; 58
    14c2:	18 f0       	brcs	.+6      	; 0x14ca <__ultoa_invert+0x7c>
    14c4:	49 5d       	subi	r20, 0xD9	; 217
    14c6:	31 fd       	sbrc	r19, 1
    14c8:	40 52       	subi	r20, 0x20	; 32
    14ca:	41 93       	st	Z+, r20
    14cc:	02 d0       	rcall	.+4      	; 0x14d2 <__ultoa_invert+0x84>
    14ce:	a9 f7       	brne	.-22     	; 0x14ba <__ultoa_invert+0x6c>
    14d0:	ea cf       	rjmp	.-44     	; 0x14a6 <__ultoa_invert+0x58>
    14d2:	b4 e0       	ldi	r27, 0x04	; 4
    14d4:	a6 95       	lsr	r26
    14d6:	97 95       	ror	r25
    14d8:	87 95       	ror	r24
    14da:	77 95       	ror	r23
    14dc:	67 95       	ror	r22
    14de:	ba 95       	dec	r27
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <__ultoa_invert+0x86>
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	61 05       	cpc	r22, r1
    14e6:	71 05       	cpc	r23, r1
    14e8:	08 95       	ret
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	0a 2e       	mov	r0, r26
    14f0:	06 94       	lsr	r0
    14f2:	57 95       	ror	r21
    14f4:	47 95       	ror	r20
    14f6:	37 95       	ror	r19
    14f8:	27 95       	ror	r18
    14fa:	ba 95       	dec	r27
    14fc:	c9 f7       	brne	.-14     	; 0x14f0 <__ultoa_invert+0xa2>
    14fe:	62 0f       	add	r22, r18
    1500:	73 1f       	adc	r23, r19
    1502:	84 1f       	adc	r24, r20
    1504:	95 1f       	adc	r25, r21
    1506:	a0 1d       	adc	r26, r0
    1508:	08 95       	ret

0000150a <_exit>:
    150a:	f8 94       	cli

0000150c <__stop_program>:
    150c:	ff cf       	rjmp	.-2      	; 0x150c <__stop_program>
